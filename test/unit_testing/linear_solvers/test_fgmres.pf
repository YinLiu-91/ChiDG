@Test
subroutine test_fgmres_solve()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, DIAG, XI_MIN, XI_MAX, &
                                          IO_DESTINATION

    use type_chidg,                 only: chidg_t
    use type_chidg_matrix
    use type_chidg_vector,          only: chidg_vector_t

    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use mod_string,                 only: string_t
    implicit none

    type(chidg_t)               :: chidg
    character(:),   allocatable :: file_name
    real(rk)                    :: tol
    integer(ik)                 :: ixi_min, ixi_max, idiag


    tol      = 1.e-9_rk
    IO_DESTINATION = 'file'


    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')



    !
    ! Set ChiDG components
    !
    call chidg%set('Solution Order', integer_input=1)
    call chidg%set('Time Integrator',  'Steady'  )
    call chidg%set('Nonlinear Solver', 'Newton'  )
    call chidg%set('Linear Solver',    'fgmres'  )
    call chidg%set('Preconditioner',   'identity')


    !
    ! Get grid points
    !
    file_name = 'file.h5'
    call create_mesh_file('D1 NxNxN', file_name, equation_sets=[string_t('Scalar Advection')], &
                                      nelem_xi=3, nelem_eta=1, nelem_zeta=1)

    

    !
    ! Read grid file
    !
    call chidg%read_mesh(file_name)


    associate ( A => chidg%data%sdata%lhs,  &
                b => chidg%data%sdata%rhs,  &
                x => chidg%data%sdata%dq,   &
                M => chidg%preconditioner )

        ! Initialize blockmatrix data (A)
        !
        ! [4  3  0]
        ! [3  4 -1]
        ! [0 -1  4]
        !
        idiag   = A%dom(1)%lblks(1,1)%loc(1,1,1)
        ixi_max = A%dom(1)%lblks(1,1)%loc(1,2,1)
        A%dom(1)%lblks(1,1)%data_(idiag)%mat   = FOUR
        A%dom(1)%lblks(1,1)%data_(ixi_max)%mat = THREE


        ixi_min = A%dom(1)%lblks(2,1)%loc(1,1,1)
        idiag   = A%dom(1)%lblks(2,1)%loc(1,2,1)
        ixi_max = A%dom(1)%lblks(2,1)%loc(1,3,1)
        A%dom(1)%lblks(2,1)%data_(ixi_min)%mat = THREE
        A%dom(1)%lblks(2,1)%data_(idiag)%mat   = 4._rk
        A%dom(1)%lblks(2,1)%data_(ixi_max)%mat = -ONE


        ixi_min = A%dom(1)%lblks(3,1)%loc(1,2,1)
        idiag   = A%dom(1)%lblks(3,1)%loc(1,3,1)
        A%dom(1)%lblks(3,1)%data_(ixi_min)%mat = -ONE
        A%dom(1)%lblks(3,1)%data_(idiag)%mat   = 4._rk




        ! Initialize blockvector data (b)
        !
        ! [ 24]
        ! [ 30]
        ! [-24]
        !
        b%dom(1)%vecs(1)%vec =  24._rk
        b%dom(1)%vecs(2)%vec =  30._rk
        b%dom(1)%vecs(3)%vec = -24._rk

        

        !
        ! Finalize ChiDG initialization
        !
        call chidg%init('algorithms')


        !
        ! Solve matrix system. Ax=b. TESTING
        !
        chidg%linear_solver%report = .false.  
        chidg%linear_solver%tol    = 1.e-13_rk
        call chidg%linear_solver%solve(A,x,b,M)



        ! Expecting solution
        !
        !     [ 3]
        ! x = [ 4]
        !     [-5]
        !
        @assertEqual(3._rk,x%dom(1)%vecs(1)%vec,tol)
        @assertEqual(4._rk,x%dom(1)%vecs(2)%vec,tol)
        @assertEqual(-5._rk,x%dom(1)%vecs(3)%vec,tol)

    end associate


    !
    ! Close ChiDG interface
    !
    call chidg%shut_down('core')


    !
    ! Clean up
    !
    call delete_file(file_name)

end subroutine test_fgmres_solve
