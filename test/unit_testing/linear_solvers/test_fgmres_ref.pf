@Test
subroutine test_fgmres_ref_solve()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, DIAG, XI_MIN, XI_MAX, &
                                          IO_DESTINATION

    use type_chidg,                 only: chidg_t
    use type_chidg_matrix
    use type_chidg_vector,          only: chidg_vector_t
    use type_fgmres,                only: fgmres_t

    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use mod_string,                 only: string_t
    implicit none

    type(chidg_t)               :: chidg
    type(chidg_matrix_t)        :: A
    type(chidg_vector_t)        :: x, b
    type(fgmres_t)              :: linear_solver
    
    character(:),   allocatable :: file_name
    real(rk)                    :: tol
    integer(ik)                 :: idomain, imat, ielem, itime


    tol             = 1.e-9_rk
    idomain         = 1
    IO_DESTINATION  = 'file'


    ! Initialize ChiDG
    call chidg%start_up('core')


    ! Set ChiDG components
    call chidg%set('Solution Order', integer_input=1)
    call chidg%set('Time Integrator',  'steady'  )
    call chidg%set('Nonlinear Solver', 'newton'  )
    call chidg%set('Linear Solver',    'fgmres'  )
    call chidg%set('Preconditioner',   'identity')


    ! Create grid file
    file_name = 'file.h5'
    call create_mesh_file('D1 NxNxN', file_name, equation_sets=[string_t('Scalar Advection')], &
                                                 nelem_xi=2, nelem_eta=1, nelem_zeta=1)

    
    ! Read grid
    call chidg%read_mesh(file_name)


    ! Initialize data containers
    call A%init(chidg%data%mesh,storage_config='full',dof_type='primal')
    call x%init(chidg%data%mesh,chidg%data%mesh%domain(1)%ntime,'primal')
    call b%init(chidg%data%mesh,chidg%data%mesh%domain(1)%ntime,'primal')



    ! Initialize blockmatrix data (A)
    !
    ! [ 0  1]
    ! [-1  0]
    ! 
    ielem = 1
    itime = 1
    imat = A%dom(1)%lblks(ielem,itime)%loc(1,1,1)
    A%dom(1)%lblks(1,1)%data_(imat)%mat = ZERO

    imat = A%dom(1)%lblks(ielem,itime)%loc(1,2,1)
    A%dom(1)%lblks(1,1)%data_(imat)%mat = ONE



    ielem = 2
    itime = 1
    imat = A%dom(1)%lblks(ielem,itime)%loc(1,1,1)
    A%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -ONE

    imat = A%dom(1)%lblks(ielem,itime)%loc(1,2,1)
    A%dom(1)%lblks(ielem,itime)%data_(imat)%mat = ZERO




    ! Initialize blockvector data (b)
    !
    ! [ 1]
    ! [ 1]
    !
    b%dom(1)%vecs(1)%vec = ONE
    b%dom(1)%vecs(2)%vec = ONE


    ! Finalize ChiDG initialization
    call chidg%init('algorithms')


    ! Solve matrix system. Ax=b. TESTING
    associate ( M => chidg%preconditioner )
    linear_solver%report = .false.  
    linear_solver%tol    = 1.e-13_rk
    call linear_solver%solve(A,x,b,M)
    end associate



    ! Expecting solution
    !     [-1]
    ! x = [ 1]
    !
    @assertEqual(-ONE,x%dom(1)%vecs(1)%vec,tol)
    @assertEqual(ONE,x%dom(1)%vecs(2)%vec,tol)


    ! Close ChiDG interface
    call chidg%shut_down('core')


    ! Clean up
    call delete_file(file_name)


end subroutine test_fgmres_ref_solve
