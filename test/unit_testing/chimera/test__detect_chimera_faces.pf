!
!
!   Overlapping cubes. Each cube is 2x2x2 elements. Only one element of overlap
!
!    |--------|-|---------|
!    |        | |         |
!    |        | |         |
!    |        | |         |
!    |--------|-|---------|
!
!
!
@Test
subroutine test__detect_chimera_faces()
    use pfunit_mod
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, INTERIOR, CHIMERA, IO_DESTINATION

    use type_chidg,         only: chidg_t

    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file

    use mod_chimera,        only: detect_chimera_faces
    implicit none


    type(chidg_t)           :: chidg
    character(len=100)      :: filename = 'D2E8M1_overlapping_matching.h5'

    print*, 'hiiiiiiiiiiii'

    IO_DESTINATION  = 'file'


    !
    ! Initialize ChiDG environment
    !
    call chidg%start_up('core')


    !
    ! Set accuracy of the solution expansion
    !
    call chidg%set('Solution Order', integer_input=2)


    !
    ! Create grid file
    !
    call create_mesh_file("D2 E8 M1 : Overlapping : Matching", filename)


    !
    ! Read 2-Domain overlapping grid
    !
    call chidg%read_mesh_grids(filename)
    call chidg%read_mesh_boundary_conditions(filename)



    call chidg%init('domains')
    call chidg%init('comm - interior')




    !
    ! Detect Chimera faces. THIS IS BEING TESTED
    !
    call detect_chimera_faces(chidg%data%mesh)





    !
    ! Test detection and assignment of Chimera faces
    !
    associate (mesh => chidg%data%mesh)
    ! XI_MAX faces of domain-1 should be chimera faces
    @assertEqual(CHIMERA, mesh%domain(1)%faces(2,XI_MAX)%ftype)
    @assertEqual(CHIMERA, mesh%domain(1)%faces(4,XI_MAX)%ftype)
    @assertEqual(CHIMERA, mesh%domain(1)%faces(6,XI_MAX)%ftype)
    @assertEqual(CHIMERA, mesh%domain(1)%faces(8,XI_MAX)%ftype)

    ! XI_MIN faces of domain-2 should be chimera faces
    @assertEqual(CHIMERA, mesh%domain(2)%faces(1,XI_MIN)%ftype)
    @assertEqual(CHIMERA, mesh%domain(2)%faces(3,XI_MIN)%ftype)
    @assertEqual(CHIMERA, mesh%domain(2)%faces(5,XI_MIN)%ftype)
    @assertEqual(CHIMERA, mesh%domain(2)%faces(7,XI_MIN)%ftype)



    ! THESE SHOULD BE BOUNDARY FACES
    @assertEqual(INTERIOR, mesh%domain(1)%faces(2,XI_MIN)%ftype)
    @assertEqual(INTERIOR, mesh%domain(1)%faces(4,XI_MIN)%ftype)
    @assertEqual(INTERIOR, mesh%domain(1)%faces(6,XI_MIN)%ftype)
    @assertEqual(INTERIOR, mesh%domain(1)%faces(8,XI_MIN)%ftype)

    @assertEqual(INTERIOR, mesh%domain(2)%faces(1,XI_MAX)%ftype)
    @assertEqual(INTERIOR, mesh%domain(2)%faces(3,XI_MAX)%ftype)
    @assertEqual(INTERIOR, mesh%domain(2)%faces(5,XI_MAX)%ftype)
    @assertEqual(INTERIOR, mesh%domain(2)%faces(7,XI_MAX)%ftype)


    end associate



    !
    ! Close ChiDG interface
    !
    call chidg%shut_down('core')


    !
    ! Clean-up
    !
    call delete_file(filename)

end subroutine test__detect_chimera_faces
!****************************************************************************************
