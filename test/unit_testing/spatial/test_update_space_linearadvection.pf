!--------------------------------------------------------------------------------------
!!
!!  chidgA
!!  
!!      Single-Block
!!  .----.----.----.----.
!!  |    |    |    |    |
!!  .----.----.----.----.
!!  |    |    |    |    |
!!  .----.----.----.----.
!!
!!
!!  chidgB
!!
!!     Block1     Block2
!!  .----.----..----.----.
!!  |    |    ||    |    |
!!  .----.----..----.----.
!!  |    |    ||    |    |
!!  .----.----..----.----.
!!
!!
!!
!!
!**************************************************************************************
@Test
subroutine test_update_space_linearadvection()
#include <messenger.h>
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, &
                                  IO_DESTINATION, dQ_DIFF

    use type_chidg,         only: chidg_t
    use type_function,      only: function_t

    use mod_function,       only: create_function
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file
    use mod_spatial,        only: update_space

    use operator_chidg_mv,  only: chidg_mv
    implicit none


    type(chidg_t)                   :: chidgA, chidgB
    character(:),       allocatable :: chidgAfile, chidgBfile
    class(function_t),  allocatable :: gaussian
    integer(ik)                     :: ChiID, idomA, idomB, ielemA, ielemB, itime, &
                                       imatA, imatB
    real(rk)                        :: tol



    tol             = 1.e-15_rk
    IO_DESTINATION  = 'file'


    ! Initialize ChiDG
    call chidgA%start_up('core')
    !call chidgB%start_up('core')


    !
    ! Set accuracy of the solution expansion
    !
    call chidgA%set('Solution Order', integer_input=2)
    call chidgB%set('Solution Order', integer_input=2)


    chidgAfile = 'D1E16M1.h5'
    chidgBfile = 'D2E8M1.h5'
    call create_mesh_file("D1 NxNxN", chidgAfile, nelem_xi=4, nelem_eta=2, nelem_zeta=2)
    call create_mesh_file("D2 E8 M1 : Abutting : Matching", chidgBfile)


    !
    ! Read grid. These grids are the same geometry. The first has only one block. 
    ! The second has two blocks. Here, we wish to initialize both and then compare 
    ! the initialized data between the two. They should be the same.
    !
    call chidgA%read_mesh(chidgAfile)
    call chidgB%read_mesh(chidgBfile)



    !
    ! Initialize solution
    !
    call create_function(gaussian,'gaussian')

    call chidgA%data%sdata%q%project(chidgA%data%mesh,gaussian,1)
    call chidgB%data%sdata%q%project(chidgB%data%mesh,gaussian,1)




    !
    ! Compare initial solution
    !
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(1)%vec,  chidgB%data%sdata%q%dom(1)%vecs(1)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(2)%vec,  chidgB%data%sdata%q%dom(1)%vecs(2)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(3)%vec,  chidgB%data%sdata%q%dom(2)%vecs(1)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(4)%vec,  chidgB%data%sdata%q%dom(2)%vecs(2)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(5)%vec,  chidgB%data%sdata%q%dom(1)%vecs(3)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(6)%vec,  chidgB%data%sdata%q%dom(1)%vecs(4)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(7)%vec,  chidgB%data%sdata%q%dom(2)%vecs(3)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(8)%vec,  chidgB%data%sdata%q%dom(2)%vecs(4)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(9)%vec,  chidgB%data%sdata%q%dom(1)%vecs(5)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(10)%vec, chidgB%data%sdata%q%dom(1)%vecs(6)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(11)%vec, chidgB%data%sdata%q%dom(2)%vecs(5)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(12)%vec, chidgB%data%sdata%q%dom(2)%vecs(6)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(13)%vec, chidgB%data%sdata%q%dom(1)%vecs(7)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(14)%vec, chidgB%data%sdata%q%dom(1)%vecs(8)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(15)%vec, chidgB%data%sdata%q%dom(2)%vecs(7)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%vecs(16)%vec, chidgB%data%sdata%q%dom(2)%vecs(8)%vec )






    !
    ! Compare interpolation matrices between standard interior and the chimera faces
    !
    ChiID = chidgB%data%mesh%domain(2)%faces(1,XI_MIN)%ChiID
    @assertEqual(chidgA%data%mesh%domain(1)%faces(2,XI_MAX)%basis_s%interpolator_face('Value',XI_MAX), chidgB%data%mesh%domain(2)%chimera%recv(ChiID)%donor(1)%value, tol)

    ChiID = chidgB%data%mesh%domain(2)%faces(3,XI_MIN)%ChiID
    @assertEqual(chidgA%data%mesh%domain(1)%faces(6,XI_MAX)%basis_s%interpolator_face('Value',XI_MAX), chidgB%data%mesh%domain(2)%chimera%recv(ChiID)%donor(1)%value, tol)

    ChiID = chidgB%data%mesh%domain(1)%faces(2,XI_MAX)%ChiID
    @assertEqual(chidgA%data%mesh%domain(1)%faces(3,XI_MIN)%basis_s%interpolator_face('Value',XI_MIN), chidgB%data%mesh%domain(1)%chimera%recv(ChiID)%donor(1)%value, tol)

    ChiID = chidgB%data%mesh%domain(1)%faces(4,XI_MAX)%ChiID
    @assertEqual(chidgA%data%mesh%domain(1)%faces(7,XI_MIN)%basis_s%interpolator_face('Value',XI_MIN), chidgB%data%mesh%domain(1)%chimera%recv(ChiID)%donor(1)%value, tol)


    !
    ! Call update_space
    !
    call write_line("ChiDG - A: Updating Space")
    call update_space(chidgA%data,differentiate=dQ_DIFF)

    call write_line("ChiDG - B: Updating Space")
    call update_space(chidgB%data,differentiate=dQ_DIFF)





    !
    ! Compare geometry
    !
    @assertEqual(chidgA%data%mesh%domain(1)%elems(1)%coords%vec, chidgB%data%mesh%domain(1)%elems(1)%coords%vec )
    @assertEqual(chidgA%data%mesh%domain(1)%elems(2)%coords%vec, chidgB%data%mesh%domain(1)%elems(2)%coords%vec )
    @assertEqual(chidgA%data%mesh%domain(1)%elems(3)%coords%vec, chidgB%data%mesh%domain(2)%elems(1)%coords%vec )
    @assertEqual(chidgA%data%mesh%domain(1)%elems(4)%coords%vec, chidgB%data%mesh%domain(2)%elems(2)%coords%vec )
    @assertEqual(chidgA%data%mesh%domain(1)%elems(5)%coords%vec, chidgB%data%mesh%domain(1)%elems(3)%coords%vec )
    @assertEqual(chidgA%data%mesh%domain(1)%elems(6)%coords%vec, chidgB%data%mesh%domain(1)%elems(4)%coords%vec )
    @assertEqual(chidgA%data%mesh%domain(1)%elems(7)%coords%vec, chidgB%data%mesh%domain(2)%elems(3)%coords%vec )
    @assertEqual(chidgA%data%mesh%domain(1)%elems(8)%coords%vec, chidgB%data%mesh%domain(2)%elems(4)%coords%vec )







    !
    ! Compare residual vector entries
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(1)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(1)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(2)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(2)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(3)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(1)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(4)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(2)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(5)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(3)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(6)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(4)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(7)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(3)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(8)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(4)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(9)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(5)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(10)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(6)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(11)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(5)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(12)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(6)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(13)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(7)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(14)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(8)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(15)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(7)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(16)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(8)%vec, tol )



    !
    ! Compare jacobian matrix entries
    !
    ! Comparing the Single-Domain 16 element block jacobians to the 
    ! Two-Domain, 8-element block Chimera jacobians
    itime  = 1



    !
    ! Domain 1 Chimera Blocks
    !

    ! ielement_g = 2
    idomA  = 1
    ielemA = 2
    idomB  = 1
    ielemB = 2

    ! XI_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,1,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,1,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)

    ! XI_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,3,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%loc(2,1,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%data_(imatB)%mat, tol)

    ! ETA_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,6,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,4,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)

    ! ZETA_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,10,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,6,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)



    ! ielement_g = 6
    idomA  = 1
    ielemA = 6
    idomB  = 1
    ielemB = 4


    ! XI_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,5,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,3,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)


    ! XI_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,7,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%loc(2,3,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%data_(imatB)%mat, tol)


    ! ETA_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,2,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,2,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)

    ! ZETA_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,14,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,8,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)




    !
    ! ielement_g = 6
    !
    idomA  = 1
    ielemA = 10
    idomB  = 1
    ielemB = 6


    ! XI_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,9,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,5,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)


    ! XI_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,11,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%loc(2,5,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%data_(imatB)%mat, tol)


    ! ETA_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,14,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,8,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)

    ! ZETA_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,2,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,2,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)
    


    !
    ! ielement_g = 6
    !
    idomA  = 1
    ielemA = 14
    idomB  = 1
    ielemB = 8


    ! XI_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,13,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,7,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)


    ! XI_MAX
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,15,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%loc(2,7,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%chi_blks(ielemB,itime)%data_(imatB)%mat, tol)


    ! ETA_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,10,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,6,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)


    ! ZETA_MIN
    imatA = chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%loc(1,6,itime)
    imatB = chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%loc(1,4,itime)
    @assertEqual(chidgA%data%sdata%lhs%dom(idomA)%lblks(ielemA,itime)%data_(imatA)%mat, chidgB%data%sdata%lhs%dom(idomB)%lblks(ielemB,itime)%data_(imatB)%mat, tol)
    


!    !
!    ! Domain 2 Chimera Blocks
!    !
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(1,1)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(1,XI_MAX)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,ETA_MAX)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(1,ETA_MAX)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,ZETA_MAX)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(1,ZETA_MAX)%mat)
!
!
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(3,1)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(3,XI_MAX)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,ETA_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(3,ETA_MIN)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,ZETA_MAX)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(3,ZETA_MAX)%mat)
!
!
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(5,1)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(5,XI_MAX)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,ETA_MAX)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(5,ETA_MAX)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,ZETA_MIN)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(5,ZETA_MIN)%mat)
!
!
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(7,1)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(7,XI_MAX)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,ETA_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(7,ETA_MIN)%mat)
!    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,ZETA_MIN)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(7,ZETA_MIN)%mat)








    !
    ! Compare matrix vector product
    !
    chidgA%data%sdata%rhs = chidg_mv(chidgA%data%sdata%lhs , chidgA%data%sdata%q)
    chidgB%data%sdata%rhs = chidg_mv(chidgB%data%sdata%lhs , chidgB%data%sdata%q)




    !
    ! Test
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(1)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(1)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(2)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(2)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(3)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(1)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(4)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(2)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(5)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(3)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(6)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(4)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(7)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(3)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(8)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(4)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(9)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(5)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(10)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(6)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(11)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(5)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(12)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(6)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(13)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(7)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(14)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(8)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(15)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(7)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(16)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(8)%vec,tol)






    !
    ! Close ChiDG interface
    !
    call chidgA%shut_down('core')
    call chidgB%shut_down('core')




    call delete_file(chidgAfile)
    call delete_file(chidgBfile)



end subroutine test_update_space_linearadvection
