!>  Test init_element
!!
!!  element_type = 1
!!  Testing that self%nodes_r(reference nodes), which represents 
!!  the .'s in the diagram below are initialized and computed
!!  correctly.
!!
!!         .--------.
!!        /        /|
!!       /        / | 
!!      .--------.  | 
!!      |        |  .
!!      |        | /
!!      |        |/
!!      .--------.
!!
!!
!-----------------------------------------------------------------------
@Test
subroutine test_reference_element__nodes_r1()
    use pfunit_mod
    use mod_kinds,              only: rk
    use mod_constants,          only: ZERO, ONE, TWO
    use type_reference_element, only: reference_element_t
    implicit none

    type(reference_element_t)   :: ref_elem


    ! Test Element data
    call ref_elem%init_element(element_type = 1)

    @assertEqual(ref_elem%element_type, 1)
    @assertEqual(ref_elem%nodes_r(:,1), [-ONE,  ONE,  ONE,-ONE, -ONE,  ONE,  ONE,-ONE],   1.e-8_rk)
    @assertEqual(ref_elem%nodes_r(:,2), [-ONE, -ONE,  ONE, ONE, -ONE, -ONE,  ONE, ONE],   1.e-8_rk)
    @assertEqual(ref_elem%nodes_r(:,3), [-ONE, -ONE, -ONE,-ONE,  ONE,  ONE,  ONE, ONE],   1.e-8_rk)

end subroutine test_reference_element__nodes_r1
!***********************************************************************


!>  Test init_element
!!
!!  element_type = 2
!!  Testing that self%nodes_r(reference nodes), which represents 
!!  the .'s in the diagram below are initialized and computed
!!  correctly.
!!
!!         .----.----.
!!        /    /    /|
!!       .----.----. .
!!      /    /    /|/|
!!     .----.----. . .
!!     |    |    |/|/
!!     .----.----. .
!!     |    |    |/
!!     .----.----.
!!
!!
!-----------------------------------------------------------------------
@Test
subroutine test_reference_element__nodes_r2()
    use pfunit_mod
    use mod_kinds,              only: rk
    use mod_constants,          only: ZERO, ONE, TWO
    use type_reference_element, only: reference_element_t
    implicit none

    type(reference_element_t)   :: ref_elem
    real(rk),   allocatable     :: ref_nodes(:)


    ! Test Element data
    call ref_elem%init_element(element_type = 2)

    @assertEqual(ref_elem%element_type, 2)

    ref_nodes = [-ONE, ONE, ONE, -ONE, -ONE,  ONE, ONE, -ONE,   &
                 ZERO, ONE, ZERO, -ONE, -ONE, ONE, ONE, -ONE,   &
                 ZERO, ONE, ZERO, -ONE, ZERO, ZERO, ONE, ZERO, -ONE, ZERO, ZERO]
    @assertEqual(ref_elem%nodes_r(:,1), ref_nodes, 1.e-8_rk)


    ref_nodes = [-ONE, -ONE, ONE, ONE, -ONE, -ONE, ONE, ONE,    &
                 -ONE, ZERO, ONE, ZERO, -ONE, -ONE, ONE, ONE,   &
                 -ONE, ZERO, ONE, ZERO, ZERO, -ONE, ZERO, ONE, ZERO, ZERO, ZERO]
    @assertEqual(ref_elem%nodes_r(:,2), ref_nodes, 1.e-8_rk)


    ref_nodes = [-ONE, -ONE, -ONE, -ONE,  ONE,  ONE,  ONE,  ONE,    & 
                 -ONE, -ONE, -ONE, -ONE, ZERO, ZERO, ZERO, ZERO,    &
                 ONE, ONE, ONE, ONE, -ONE, ZERO, ZERO, ZERO, ZERO, ONE, ZERO]
    @assertEqual(ref_elem%nodes_r(:,3), ref_nodes, 1.e-8_rk)

end subroutine test_reference_element__nodes_r2
!***********************************************************************











!>  Test reference_element_t: nodes - quadrature
!!
!!  Node set: 'Quadrature'
!!  Level:         1
!!
!!         .--------.
!!        /   x    /|
!!       /        / | 
!!      .--------. x| 
!!      |        |  .
!!      |   x    | /
!!      |        |/
!!      .--------.
!!
!!
!!  1D nodes   = [0.0]
!!  1D weights = [2.0]
!!
!-----------------------------------------------------------------------
@Test
subroutine test_reference_element__nodes__quadrature1()
    use pfunit_mod
    use mod_kinds,              only: rk
    use mod_constants,          only: ZERO, ONE, TWO
    use type_reference_element, only: reference_element_t
    implicit none

    
    type(reference_element_t)   :: ref_elem
    real(rk),   allocatable     :: nodes_ref(:,:), weights_ref(:)


    ! Test Element data
    allocate(nodes_ref(1,3), weights_ref(1))
    call ref_elem%init_interpolator(polynomial='Legendre', nterms=1, node_set='Quadrature', level=1, nterms_rule=1)
    nodes_ref = ZERO
    weights_ref = [TWO*TWO*TWO]

    @assertEqual(ref_elem%nodes_element(),   nodes_ref,   1.e-8_rk)
    @assertEqual(ref_elem%weights_element(), weights_ref, 1.e-8_rk)


    ! Test Face data
    !iface = 1
    nodes_ref(1,:) = [-ONE,ZERO,ZERO]
    weights_ref    = [TWO*TWO]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=1),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=1), 1.e-8_rk)

    !iface = 2
    nodes_ref(1,:) = [ONE,ZERO,ZERO]
    weights_ref    = [TWO*TWO]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=2),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=2), 1.e-8_rk)

    !iface = 3
    nodes_ref(1,:) = [ZERO,-ONE,ZERO]
    weights_ref    = [TWO*TWO]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=3),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=3), 1.e-8_rk)

    !iface = 4
    nodes_ref(1,:) = [ZERO,ONE,ZERO]
    weights_ref    = [TWO*TWO]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=4),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=4), 1.e-8_rk)

    !iface = 5
    nodes_ref(1,:) = [ZERO,ZERO,-ONE]
    weights_ref    = [TWO*TWO]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=5),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=5), 1.e-8_rk)

    !iface = 6
    nodes_ref(1,:) = [ZERO,ZERO,ONE]
    weights_ref    = [TWO*TWO]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=6),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=6), 1.e-8_rk)


end subroutine test_reference_element__nodes__quadrature1
!**************************************************************************




!>  Test reference_element_t: nodes - quadrature
!!
!!  Node set: 'Quadrature'
!!  Level:         2
!!
!!         .--------.
!!        / x    x /|
!!       / x    x /x| 
!!      .--------. x| 
!!      | x    x |x .
!!      |        |x/
!!      | x    x |/
!!      .--------.
!!
!!
!!  1D nodes   = [-sqrt(1/3), sqrt(1/3)]
!!  1D weights = [1.0,        1.0      ]
!!
!!
!-------------------------------------------------------------------------
@Test
subroutine test_reference_element__nodes__quadrature2()
    use pfunit_mod
    use mod_kinds,              only: rk
    use mod_constants,          only: ZERO, ONE, TWO, THREE
    use type_reference_element, only: reference_element_t
    implicit none

    
    type(reference_element_t)   :: ref_elem
    real(rk),   allocatable     :: nodes_ref(:,:), weights_ref(:)


    ! Test Element data
    allocate(nodes_ref(8,3), weights_ref(8))
!    call ref_elem%init_element(element_type=1)
    call ref_elem%init_interpolator(polynomial='Legendre', nterms=1, node_set='Quadrature', level=2, nterms_rule=1)
    nodes_ref(1,:) = [-sqrt(ONE/THREE), -sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(2,:) = [ sqrt(ONE/THREE), -sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(3,:) = [-sqrt(ONE/THREE),  sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(4,:) = [ sqrt(ONE/THREE),  sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(5,:) = [-sqrt(ONE/THREE), -sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    nodes_ref(6,:) = [ sqrt(ONE/THREE), -sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    nodes_ref(7,:) = [-sqrt(ONE/THREE),  sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    nodes_ref(8,:) = [ sqrt(ONE/THREE),  sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    weights_ref    = ONE

    @assertEqual(ref_elem%nodes_element(),   nodes_ref,   1.e-8_rk)
    @assertEqual(ref_elem%weights_element(), weights_ref, 1.e-8_rk)


    ! Test Face data
    deallocate(nodes_ref, weights_ref)
    allocate(nodes_ref(4,3), weights_ref(4))
    !iface = 1
    nodes_ref(1,:) = [ -ONE, -sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(2,:) = [ -ONE,  sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(3,:) = [ -ONE, -sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    nodes_ref(4,:) = [ -ONE,  sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    weights_ref    = ONE
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=1),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=1), 1.e-8_rk)

    !iface = 2
    nodes_ref(1,:) = [ONE, -sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(2,:) = [ONE,  sqrt(ONE/THREE), -sqrt(ONE/THREE)]
    nodes_ref(3,:) = [ONE, -sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    nodes_ref(4,:) = [ONE,  sqrt(ONE/THREE),  sqrt(ONE/THREE)]
    weights_ref    = ONE
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=2),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=2), 1.e-8_rk)

    !iface = 3
    nodes_ref(1,:) = [-sqrt(ONE/THREE), -ONE, -sqrt(ONE/THREE)]
    nodes_ref(2,:) = [ sqrt(ONE/THREE), -ONE, -sqrt(ONE/THREE)]
    nodes_ref(3,:) = [-sqrt(ONE/THREE), -ONE,  sqrt(ONE/THREE)]
    nodes_ref(4,:) = [ sqrt(ONE/THREE), -ONE,  sqrt(ONE/THREE)]
    weights_ref    = ONE
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=3),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=3), 1.e-8_rk)

    !iface = 4
    nodes_ref(1,:) = [-sqrt(ONE/THREE), ONE, -sqrt(ONE/THREE)]
    nodes_ref(2,:) = [ sqrt(ONE/THREE), ONE, -sqrt(ONE/THREE)]
    nodes_ref(3,:) = [-sqrt(ONE/THREE), ONE,  sqrt(ONE/THREE)]
    nodes_ref(4,:) = [ sqrt(ONE/THREE), ONE,  sqrt(ONE/THREE)]
    weights_ref    = ONE
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=4),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=4), 1.e-8_rk)

    !iface = 5
    nodes_ref(1,:) = [-sqrt(ONE/THREE), -sqrt(ONE/THREE), -ONE]
    nodes_ref(2,:) = [ sqrt(ONE/THREE), -sqrt(ONE/THREE), -ONE]
    nodes_ref(3,:) = [-sqrt(ONE/THREE),  sqrt(ONE/THREE), -ONE]
    nodes_ref(4,:) = [ sqrt(ONE/THREE),  sqrt(ONE/THREE), -ONE]
    weights_ref    = ONE
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=5),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=5), 1.e-8_rk)

    !iface = 6
    nodes_ref(1,:) = [-sqrt(ONE/THREE), -sqrt(ONE/THREE), ONE]
    nodes_ref(2,:) = [ sqrt(ONE/THREE), -sqrt(ONE/THREE), ONE]
    nodes_ref(3,:) = [-sqrt(ONE/THREE),  sqrt(ONE/THREE), ONE]
    nodes_ref(4,:) = [ sqrt(ONE/THREE),  sqrt(ONE/THREE), ONE]
    weights_ref    = ONE
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=6),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=6), 1.e-8_rk)


end subroutine test_reference_element__nodes__quadrature2
!*************************************************************************




!>  Test reference_element_t: nodes - quadrature
!!
!!  Node set: 'Quadrature'
!!  Level:         3
!!
!!         .--------.
!!        / x  x x /|
!!       / x  x x /x| 
!!      .--------.xx| 
!!      | x  x x |xx.
!!      | x  x x |x/
!!      | x  x x |/
!!      .--------.
!!
!!
!!  1D nodes   = [-sqrt(3/5), 0.0,  sqrt(3/5)]
!!  1D weights = [    5/9,    8/9,     5/9   ]
!!
!!
!-------------------------------------------------------------------------
@Test
subroutine test_reference_element__nodes__quadrature3()
    use pfunit_mod
    use mod_kinds,              only: rk
    use mod_constants,          only: ZERO, ONE, TWO, THREE, FIVE, EIGHT, NINE
    use type_reference_element, only: reference_element_t
    implicit none

    
    type(reference_element_t)   :: ref_elem
    real(rk),   allocatable     :: nodes_ref(:,:), weights_ref(:)


    ! Test Element data
    allocate(nodes_ref(27,3), weights_ref(27))
!    call ref_elem%init_element(element_type=1)
    call ref_elem%init_interpolator(polynomial='Legendre', nterms=1, node_set='Quadrature', level=3, nterms_rule=1)
    nodes_ref(1,:)  = [-sqrt(THREE/FIVE), -sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(2,:)  = [       ZERO      , -sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(3,:)  = [ sqrt(THREE/FIVE), -sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(4,:)  = [-sqrt(THREE/FIVE),        ZERO      , -sqrt(THREE/FIVE)]
    nodes_ref(5,:)  = [       ZERO      ,        ZERO      , -sqrt(THREE/FIVE)]
    nodes_ref(6,:)  = [ sqrt(THREE/FIVE),        ZERO      , -sqrt(THREE/FIVE)]
    nodes_ref(7,:)  = [-sqrt(THREE/FIVE),  sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(8,:)  = [       ZERO      ,  sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(9,:)  = [ sqrt(THREE/FIVE),  sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(10,:) = [-sqrt(THREE/FIVE), -sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(11,:) = [       ZERO      , -sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(12,:) = [ sqrt(THREE/FIVE), -sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(13,:) = [-sqrt(THREE/FIVE),        ZERO      ,        ZERO      ]
    nodes_ref(14,:) = [       ZERO      ,        ZERO      ,        ZERO      ]
    nodes_ref(15,:) = [ sqrt(THREE/FIVE),        ZERO      ,        ZERO      ]
    nodes_ref(16,:) = [-sqrt(THREE/FIVE),  sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(17,:) = [       ZERO      ,  sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(18,:) = [ sqrt(THREE/FIVE),  sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(19,:) = [-sqrt(THREE/FIVE), -sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    nodes_ref(20,:) = [       ZERO      , -sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    nodes_ref(21,:) = [ sqrt(THREE/FIVE), -sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    nodes_ref(22,:) = [-sqrt(THREE/FIVE),        ZERO      ,  sqrt(THREE/FIVE)]
    nodes_ref(23,:) = [       ZERO      ,        ZERO      ,  sqrt(THREE/FIVE)]
    nodes_ref(24,:) = [ sqrt(THREE/FIVE),        ZERO      ,  sqrt(THREE/FIVE)]
    nodes_ref(25,:) = [-sqrt(THREE/FIVE),  sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    nodes_ref(26,:) = [       ZERO      ,  sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    nodes_ref(27,:) = [ sqrt(THREE/FIVE),  sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]

    weights_ref = [ (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (EIGHT/NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(EIGHT/NINE)*(FIVE/NINE) , &
                    (EIGHT/NINE)*(EIGHT/NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(EIGHT/NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (EIGHT/NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(FIVE /NINE)*(EIGHT/NINE), &
                    (EIGHT/NINE)*(FIVE /NINE)*(EIGHT/NINE), &
                    (FIVE /NINE)*(FIVE /NINE)*(EIGHT/NINE), &
                    (FIVE /NINE)*(EIGHT/NINE)*(EIGHT/NINE), &
                    (EIGHT/NINE)*(EIGHT/NINE)*(EIGHT/NINE), &
                    (FIVE /NINE)*(EIGHT/NINE)*(EIGHT/NINE), &
                    (FIVE /NINE)*(FIVE /NINE)*(EIGHT/NINE), &
                    (EIGHT/NINE)*(FIVE /NINE)*(EIGHT/NINE), &
                    (FIVE /NINE)*(FIVE /NINE)*(EIGHT/NINE), &
                    (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (EIGHT/NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(EIGHT/NINE)*(FIVE/NINE) , &
                    (EIGHT/NINE)*(EIGHT/NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(EIGHT/NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (EIGHT/NINE)*(FIVE /NINE)*(FIVE/NINE) , &
                    (FIVE /NINE)*(FIVE /NINE)*(FIVE/NINE) ]

    @assertEqual(ref_elem%nodes_element(),   nodes_ref,   1.e-8_rk)
    @assertEqual(ref_elem%weights_element(), weights_ref, 1.e-8_rk)


    ! Test Face data
    deallocate(nodes_ref, weights_ref)
    allocate(nodes_ref(9,3), weights_ref(9))
    !iface = 1
    nodes_ref(1,:) = [ -ONE, -sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(2,:) = [ -ONE,       ZERO       , -sqrt(THREE/FIVE)]
    nodes_ref(3,:) = [ -ONE,  sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(4,:) = [ -ONE, -sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(5,:) = [ -ONE,       ZERO       ,        ZERO      ]
    nodes_ref(6,:) = [ -ONE,  sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(7,:) = [ -ONE, -sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    nodes_ref(8,:) = [ -ONE,       ZERO       ,  sqrt(THREE/FIVE)]
    nodes_ref(9,:) = [ -ONE,  sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    weights_ref    = [ (FIVE /NINE)*(FIVE /NINE), &
                       (EIGHT/NINE)*(FIVE /NINE), &
                       (FIVE /NINE)*(FIVE /NINE), &
                       (FIVE /NINE)*(EIGHT/NINE), &
                       (EIGHT/NINE)*(EIGHT/NINE), &
                       (FIVE /NINE)*(EIGHT/NINE), &
                       (FIVE /NINE)*(FIVE/NINE) , &
                       (EIGHT/NINE)*(FIVE/NINE) , &
                       (FIVE /NINE)*(FIVE/NINE)]
                       
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=1),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=1), 1.e-8_rk)

    !iface = 2
    nodes_ref(1,:) = [  ONE, -sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(2,:) = [  ONE,       ZERO       , -sqrt(THREE/FIVE)]
    nodes_ref(3,:) = [  ONE,  sqrt(THREE/FIVE), -sqrt(THREE/FIVE)]
    nodes_ref(4,:) = [  ONE, -sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(5,:) = [  ONE,       ZERO       ,        ZERO      ]
    nodes_ref(6,:) = [  ONE,  sqrt(THREE/FIVE),        ZERO      ]
    nodes_ref(7,:) = [  ONE, -sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    nodes_ref(8,:) = [  ONE,       ZERO       ,  sqrt(THREE/FIVE)]
    nodes_ref(9,:) = [  ONE,  sqrt(THREE/FIVE),  sqrt(THREE/FIVE)]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=2),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=2), 1.e-8_rk)

    !iface = 3
    nodes_ref(1,:) = [-sqrt(THREE/FIVE), -ONE, -sqrt(THREE/FIVE)]
    nodes_ref(2,:) = [      ZERO       , -ONE, -sqrt(THREE/FIVE)]
    nodes_ref(3,:) = [ sqrt(THREE/FIVE), -ONE, -sqrt(THREE/FIVE)]
    nodes_ref(4,:) = [-sqrt(THREE/FIVE), -ONE,        ZERO      ]
    nodes_ref(5,:) = [      ZERO       , -ONE,        ZERO      ]
    nodes_ref(6,:) = [ sqrt(THREE/FIVE), -ONE,        ZERO      ]
    nodes_ref(7,:) = [-sqrt(THREE/FIVE), -ONE,  sqrt(THREE/FIVE)]
    nodes_ref(8,:) = [      ZERO       , -ONE,  sqrt(THREE/FIVE)]
    nodes_ref(9,:) = [ sqrt(THREE/FIVE), -ONE,  sqrt(THREE/FIVE)]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=3),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=3), 1.e-8_rk)

    !iface = 4
    nodes_ref(1,:) = [-sqrt(THREE/FIVE), ONE, -sqrt(THREE/FIVE)]
    nodes_ref(2,:) = [      ZERO       , ONE, -sqrt(THREE/FIVE)]
    nodes_ref(3,:) = [ sqrt(THREE/FIVE), ONE, -sqrt(THREE/FIVE)]
    nodes_ref(4,:) = [-sqrt(THREE/FIVE), ONE,        ZERO      ]
    nodes_ref(5,:) = [      ZERO       , ONE,        ZERO      ]
    nodes_ref(6,:) = [ sqrt(THREE/FIVE), ONE,        ZERO      ]
    nodes_ref(7,:) = [-sqrt(THREE/FIVE), ONE,  sqrt(THREE/FIVE)]
    nodes_ref(8,:) = [      ZERO       , ONE,  sqrt(THREE/FIVE)]
    nodes_ref(9,:) = [ sqrt(THREE/FIVE), ONE,  sqrt(THREE/FIVE)]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=4),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=4), 1.e-8_rk)

    !iface = 5
    nodes_ref(1,:) = [-sqrt(THREE/FIVE), -sqrt(THREE/FIVE), -ONE]
    nodes_ref(2,:) = [      ZERO       , -sqrt(THREE/FIVE), -ONE]
    nodes_ref(3,:) = [ sqrt(THREE/FIVE), -sqrt(THREE/FIVE), -ONE]
    nodes_ref(4,:) = [-sqrt(THREE/FIVE),        ZERO      , -ONE]
    nodes_ref(5,:) = [      ZERO       ,        ZERO      , -ONE]
    nodes_ref(6,:) = [ sqrt(THREE/FIVE),        ZERO      , -ONE]
    nodes_ref(7,:) = [-sqrt(THREE/FIVE),  sqrt(THREE/FIVE), -ONE]
    nodes_ref(8,:) = [      ZERO       ,  sqrt(THREE/FIVE), -ONE]
    nodes_ref(9,:) = [ sqrt(THREE/FIVE),  sqrt(THREE/FIVE), -ONE]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=5),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=5), 1.e-8_rk)

    !iface = 6
    nodes_ref(1,:) = [-sqrt(THREE/FIVE), -sqrt(THREE/FIVE), ONE]
    nodes_ref(2,:) = [      ZERO       , -sqrt(THREE/FIVE), ONE]
    nodes_ref(3,:) = [ sqrt(THREE/FIVE), -sqrt(THREE/FIVE), ONE]
    nodes_ref(4,:) = [-sqrt(THREE/FIVE),        ZERO      , ONE]
    nodes_ref(5,:) = [      ZERO       ,        ZERO      , ONE]
    nodes_ref(6,:) = [ sqrt(THREE/FIVE),        ZERO      , ONE]
    nodes_ref(7,:) = [-sqrt(THREE/FIVE),  sqrt(THREE/FIVE), ONE]
    nodes_ref(8,:) = [      ZERO       ,  sqrt(THREE/FIVE), ONE]
    nodes_ref(9,:) = [ sqrt(THREE/FIVE),  sqrt(THREE/FIVE), ONE]
    @assertequal(nodes_ref,   ref_elem%nodes_face(iface=6),   1.e-8_rk)
    @assertequal(weights_ref, ref_elem%weights_face(iface=6), 1.e-8_rk)


end subroutine test_reference_element__nodes__quadrature3
!************************************************************************






!>  Test reference_element_t: nodes - Uniform
!!
!!  Node set: 'Uniform'
!!  Level:         1
!!
!!         x--------x
!!        /        /|
!!       /        / | 
!!      x--------x  | 
!!      |        |  x
!!      |        | /
!!      |        |/
!!      x--------x
!!
!!
!!  1D nodes   = [-ONE, ONE]
!!
!-----------------------------------------------------------------------
@Test
subroutine test_reference_element__nodes__uniform1()
    use pfunit_mod
    use mod_kinds,              only: rk
    use mod_constants,          only: ZERO, ONE, TWO
    use type_reference_element, only: reference_element_t
    implicit none

    
    type(reference_element_t)   :: ref_elem
    real(rk),   allocatable     :: nodes_ref(:,:)


    ! Test Element data
    allocate(nodes_ref(8,3))
!    call ref_elem%init_element(element_type=1)
    call ref_elem%init_interpolator(polynomial='Legendre', nterms=8, node_set='Uniform', level=1, nterms_rule=8)
    nodes_ref(:,1) = [-ONE,  ONE, -ONE, ONE, -ONE,  ONE, -ONE, ONE]
    nodes_ref(:,2) = [-ONE, -ONE,  ONE, ONE, -ONE, -ONE,  ONE, ONE]
    nodes_ref(:,3) = [-ONE, -ONE, -ONE,-ONE,  ONE,  ONE,  ONE, ONE]
    @assertEqual(ref_elem%nodes_element(),   nodes_ref,   1.e-8_rk)


    ! Test Face data
    deallocate(nodes_ref)
    allocate(nodes_ref(4,3))
    nodes_ref(1,:) = [-ONE,-ONE,-ONE]
    nodes_ref(2,:) = [-ONE, ONE,-ONE]
    nodes_ref(3,:) = [-ONE,-ONE, ONE]
    nodes_ref(4,:) = [-ONE, ONE, ONE]
    @assertequal(nodes_ref, ref_elem%nodes_face(iface=1),   1.e-8_rk)

    nodes_ref(1,:) = [ ONE,-ONE,-ONE]
    nodes_ref(2,:) = [ ONE, ONE,-ONE]
    nodes_ref(3,:) = [ ONE,-ONE, ONE]
    nodes_ref(4,:) = [ ONE, ONE, ONE]
    @assertequal(nodes_ref, ref_elem%nodes_face(iface=2),   1.e-8_rk)

    nodes_ref(1,:) = [-ONE,-ONE,-ONE]
    nodes_ref(2,:) = [ ONE,-ONE,-ONE]
    nodes_ref(3,:) = [-ONE,-ONE, ONE]
    nodes_ref(4,:) = [ ONE,-ONE, ONE]
    @assertequal(nodes_ref, ref_elem%nodes_face(iface=3),   1.e-8_rk)

    nodes_ref(1,:) = [-ONE, ONE,-ONE]
    nodes_ref(2,:) = [ ONE, ONE,-ONE]
    nodes_ref(3,:) = [-ONE, ONE, ONE]
    nodes_ref(4,:) = [ ONE, ONE, ONE]
    @assertequal(nodes_ref, ref_elem%nodes_face(iface=4),   1.e-8_rk)

    nodes_ref(1,:) = [-ONE,-ONE,-ONE]
    nodes_ref(2,:) = [ ONE,-ONE,-ONE]
    nodes_ref(3,:) = [-ONE, ONE,-ONE]
    nodes_ref(4,:) = [ ONE, ONE,-ONE]
    @assertequal(nodes_ref, ref_elem%nodes_face(iface=5),   1.e-8_rk)

    nodes_ref(1,:) = [-ONE,-ONE, ONE]
    nodes_ref(2,:) = [ ONE,-ONE, ONE]
    nodes_ref(3,:) = [-ONE, ONE, ONE]
    nodes_ref(4,:) = [ ONE, ONE, ONE]
    @assertequal(nodes_ref, ref_elem%nodes_face(iface=6),   1.e-8_rk)


end subroutine test_reference_element__nodes__uniform1
!**************************************************************************



!>  Test reference_element_t: nodes - Uniform
!!
!!  Node set: 'Uniform'
!!  Level:         2
!!
!!          x----x----x
!!         /    /    /|
!!        x----x----x x
!!       /    /    /|/|
!!      x----x----x x x
!!      |    |    |/|/
!!      x----x----x x 
!!      |    |    |/
!!      x----x--- x
!!
!!
!!  1D nodes   = [-ONE, ZERO, ONE]
!!
!-----------------------------------------------------------------------
@Test
subroutine test_reference_element__nodes__uniform2()
    use pfunit_mod
    use mod_kinds,              only: rk
    use mod_constants,          only: ZERO, ONE, TWO
    use type_reference_element, only: reference_element_t
    implicit none

    
    type(reference_element_t)   :: ref_elem
    real(rk),   allocatable     :: ref_nodes(:,:)


    ! Test Element nodes
    allocate(ref_nodes(27,3))
!    call ref_elem%init_element(element_type=1)
    call ref_elem%init_interpolator(polynomial='Legendre', nterms=8, node_set='Uniform', level=2, nterms_rule=8)
    ref_nodes(:,1) = [-ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO, ONE, &
                      -ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO, ONE, &
                      -ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO, ONE]
    ref_nodes(:,2) = [-ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE, ONE, & 
                      -ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE, ONE, &
                      -ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE, ONE]
    ref_nodes(:,3) = [-ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, & 
                      ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, &
                       ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE]
    @assertEqual(ref_elem%nodes_element(), ref_nodes, 1.e-8_rk)




    ! Test Face nodes
    deallocate(ref_nodes)
    allocate(ref_nodes(9,3))
    ref_nodes(:,1) = [-ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE]
    ref_nodes(:,2) = [-ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO,  ONE]
    ref_nodes(:,3) = [-ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE,  ONE]
    @assertequal(ref_nodes, ref_elem%nodes_face(iface=1),   1.e-8_rk)

    ref_nodes(:,1) = [ ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE]
    ref_nodes(:,2) = [-ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO,  ONE]
    ref_nodes(:,3) = [-ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE,  ONE]
    @assertequal(ref_nodes, ref_elem%nodes_face(iface=2),   1.e-8_rk)

    ref_nodes(:,1) = [-ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO,  ONE]
    ref_nodes(:,2) = [-ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE]
    ref_nodes(:,3) = [-ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE,  ONE]
    @assertequal(ref_nodes, ref_elem%nodes_face(iface=3),   1.e-8_rk)

    ref_nodes(:,1) = [-ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO,  ONE]
    ref_nodes(:,2) = [ ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE]
    ref_nodes(:,3) = [-ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE,  ONE]
    @assertequal(ref_nodes, ref_elem%nodes_face(iface=4),   1.e-8_rk)

    ref_nodes(:,1) = [-ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO,  ONE]
    ref_nodes(:,2) = [-ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE,  ONE]
    ref_nodes(:,3) = [-ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE, -ONE]
    @assertequal(ref_nodes, ref_elem%nodes_face(iface=5),   1.e-8_rk)

    ref_nodes(:,1) = [-ONE, ZERO,  ONE, -ONE, ZERO,  ONE, -ONE, ZERO,  ONE]
    ref_nodes(:,2) = [-ONE, -ONE, -ONE, ZERO, ZERO, ZERO,  ONE,  ONE,  ONE]
    ref_nodes(:,3) = [ ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE,  ONE]
    @assertequal(ref_nodes, ref_elem%nodes_face(iface=6),   1.e-8_rk)

end subroutine test_reference_element__nodes__uniform2
!**************************************************************************































