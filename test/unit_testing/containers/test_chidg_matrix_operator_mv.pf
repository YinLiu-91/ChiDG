!>  Compute a matrix vector multiplication between chidg_matrix and chidg_vector
!!  instances that have been initialized with Chimera grid blocks.
!!
!!  The grid block configurations are shown here: 
!!      - Block1 is 2x2x2 and symmetric.
!!      - Block2 is 2x2x2 and its center y-constant plane is translated down.
!!
!!     Block 1               Block 2
!!  .-----.-----.         .-----.-----.
!!  |     |     |         |     |     |
!!  |     |     |         |     |     |
!!  .-----.-----.         |     |     |
!!  |     |     |         .-----.-----.
!!  |     |     |         |     |     |
!!  .-----.-----.         .-----.-----.
!!
!!
!!  These blocks overlap, so that there is Chimera communication between the blocks:
!!
!!        Block 1       Block 2
!!        .-----.---.-.---.-----.            
!!        |     |   | |   |     |            
!!        |     |   | |   |     |            
!!        .-----.---|-.   |     |            
!!        |     |   .-|---.-----.            
!!        |     |   | |   |     |            
!!        .-----.---.-.---.-----.            
!!      
!!
!!
!*****************************************************************************************
@Test
subroutine test_chidg_matrix_operator_mv()
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, &
                                  EIGHT, NINE, TEN, DIAG, XI_MIN, XI_MAX, ETA_MIN, &
                                  ETA_MAX, ZETA_MIN, ZETA_MAX, IO_DESTINATION

    use type_chidg,         only: chidg_t
    use type_chidg_matrix,   only: chidg_matrix_t
    use type_chidg_vector,   only: chidg_vector_t
    use type_meshdata,      only: meshdata_t
    use mod_bc,             only: create_bc
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file

    use operator_chidg_mv,  only: chidg_mv
    implicit none


    type(chidg_t)                   :: chidg
    type(meshdata_t),   allocatable :: meshdata(:)
    integer(ik)                     :: idom, nterms_s, idiag, idom_d, ielem_d, itime, ielem
    real(rk), dimension(8)          :: bref_1, bref_2
    real(rk)                        :: tol
    character(:),       allocatable :: filename

    type(chidg_matrix_t)             :: A
    type(chidg_vector_t)             :: x, b

    tol             = 1.e-13_rk
    nterms_s        = 8
    IO_DESTINATION  = 'file'
    

    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')


    !
    ! Create grid file
    !
    filename = "D2E8M1_overlapping_nonmatching.h5"
    call create_mesh_file("D2 E8 M1 : Overlapping : NonMatching", filename)


    !
    ! Set the order of accuracy for the solution
    !
    call chidg%set('Solution Order', integer_input=2)


    !
    ! Get grid points
    !
    call chidg%read_mesh(filename)



    !
    ! Initialize data containers
    !
    call A%init(chidg%data%mesh,storage_config='full',dof_type='primal')
    call x%init(chidg%data%mesh,chidg%data%mesh%domain(1)%ntime,'primal')
    call b%init(chidg%data%mesh,chidg%data%mesh%domain(1)%ntime,'primal')



    !           lblks               chi_blks                 x
    !   [ 1                 ] [                  ]          [     ]
    !   [                   ] [ 2   3            ]          [ 0.1 ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !
    !         chi_blks               lblks
    !   [   4               ] [                  ]          [ 0.2 ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [ 0.3 ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !   [                   ] [                  ]          [     ]
    !





    !
    ! Initialize chidg_matrix and corresponding chidg_vector data -- domain 1
    !
    ielem = 1
    itime = 1
    idiag = A%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
    A%dom(1)%lblks(ielem,itime)%data_(idiag)%mat = ONE


    ielem = 2
    itime = 1
    idom_d  = A%dom(1)%chi_blks(ielem,itime)%dparent_g(1)
    ielem_d = A%dom(1)%chi_blks(ielem,itime)%eparent_g(1)
    A%dom(1)%chi_blks(ielem,itime)%data_(1)%mat = TWO
    x%dom(idom_d)%vecs(ielem_d)%vec = 0.2_rk


    ielem = 2
    itime = 1
    idom_d  = A%dom(1)%chi_blks(ielem,itime)%dparent_g(2)
    ielem_d = A%dom(1)%chi_blks(ielem,itime)%eparent_g(2)
    A%dom(1)%chi_blks(ielem,itime)%data_(2)%mat = THREE
    x%dom(idom_d)%vecs(ielem_d)%vec = 0.3_rk







    !
    ! Initialize chidg_matrix and corresponding chidg_vector data -- domain 2
    !
    ielem = 1
    itime = 1
    idom_d  = A%dom(2)%chi_blks(ielem,itime)%dparent_g(1)
    ielem_d = A%dom(2)%chi_blks(ielem,itime)%eparent_g(1)
    A%dom(2)%chi_blks(ielem,itime)%data_(1)%mat = FOUR
    x%dom(idom_d)%vecs(ielem_d)%vec = 0.1_rk


    !
    ! Perform matrix-vector multiplication. THIS IS BEING TESTED
    !
    b = chidg_mv(A,x)


    !
    ! Compute reference values
    !
    bref_1 = (2._rk * 0.2_rk)*nterms_s + (THREE * 0.3_rk)*nterms_s
    bref_2 = (FOUR * 0.1_rk)*nterms_s


    !
    ! Test MV operation
    !
    @assertEqual(bref_1,b%dom(1)%vecs(2)%vec,tol)
    @assertEqual(bref_2,b%dom(2)%vecs(1)%vec,tol)


    !
    ! Close ChiDG interface
    !
    call chidg%shut_down('core')


    !
    ! Clean-up
    !
    call delete_file(filename)

end subroutine test_chidg_matrix_operator_mv
