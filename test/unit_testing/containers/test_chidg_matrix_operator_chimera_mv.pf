@Test
subroutine test_chidg_matrix_operator_chimera_mv()
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, &
                                  ONE, TWO, THREE, FOUR, ZERO, IO_DESTINATION

    use type_chidg,         only: chidg_t
    use type_meshdata,      only: meshdata_t
    use type_function,      only: function_t
    use type_point,         only: point_t
    use mod_bc,             only: create_bc


    use mod_function,       only: create_function
    use mod_spatial,        only: update_space
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file

    use operator_chidg_mv,  only: chidg_mv
    implicit none


    type(chidg_t)                   :: chidg
    type(meshdata_t),   allocatable :: meshdata(:)
    character(:),       allocatable :: filename
    class(function_t),  allocatable :: constant, gaussian
    real(rk),           allocatable :: density_residual_D4_E31(:), density_residual_D4_E36(:)
    integer(ik)                     :: ChiID, iface, ndonors, gq_index, igq, ngq, neqns, &
                                       nterms_s, idom, ielem, idom_d, ielem_d, &
                                       idonor, idom_p, ielem_p, imat, itime
    real(rk)                        :: chi_xi, chi_eta, chi_zeta, ref_xi, ref_eta, ref_zeta
    type(point_t)                   :: chimera_node
    real(rk)                        :: tol
    real(rk), allocatable           :: mat_a(:,:), mat_b(:,:)
    real(rk), allocatable           :: vec_a(:), vec_b(:), refvec(:)


    tol             = 1.e-12_rk
    neqns           = 5
    nterms_s        = 8
    IO_DESTINATION  = 'file'


    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')


    !
    ! Create grid file
    !
    filename = "cylinder_overlapping_multipledonor.h5"
    call create_mesh_file("Cylinder : Diagonal : NonMatching MultipleDonor", filename)


    !
    ! Set order of accuracy for the solution expansion
    !
    call chidg%set('Solution Order', integer_input=2)


    !
    ! Read grid
    !
    call chidg%read_mesh(filename)


    !
    ! Test computational coordinates
    !
    idom = 4
    ielem = 19
    itime = 1
    iface = XI_MIN
    ChiID   = chidg%data%mesh%domain(idom)%faces(ielem,iface)%ChiID



    !
    ! Donor 1, Set some chimera matrix and vector values
    !
    idonor = 1
    idom_d  = chidg%data%mesh%domain(idom)%chimera%recv(ChiID)%donor(idonor)%elem_info%idomain_l
    ielem_d = chidg%data%mesh%domain(idom)%chimera%recv(ChiID)%donor(idonor)%elem_info%ielement_l

    ! Set matrix values corresponding to first donor
    imat = chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%loc(idom_d,ielem_d,itime)
    chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%data_(imat)%mat = ONE

    ! Set vector values for first donor
    chidg%data%sdata%rhs%dom(idom_d)%vecs(ielem_d)%vec = THREE



    
    !
    ! Donor 2, Set some chimera matrix and vector values
    !
    idonor = 2
    idom_d = chidg%data%mesh%domain(idom)%chimera%recv(ChiID)%donor(idonor)%elem_info%idomain_l
    ielem_d = chidg%data%mesh%domain(idom)%chimera%recv(ChiID)%donor(idonor)%elem_info%ielement_l

    ! Set matrix values corresponding to first donor
    imat = chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%loc(idom_d,ielem_d,itime)
    chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%data_(imat)%mat = TWO

    ! Set vector values for first donor
    chidg%data%sdata%rhs%dom(idom_d)%vecs(ielem_d)%vec = FOUR




    !
    ! Compute matrix-vector Product
    !
    chidg%data%sdata%dq = chidg_mv(chidg%data%sdata%lhs , chidg%data%sdata%rhs)




    !
    ! Allocate storage to compute refrence expected values
    !
    allocate(mat_a(nterms_s*neqns, nterms_s*neqns), &
             vec_a(nterms_s*neqns) )
    mat_a = ZERO
    mat_b = mat_a

    vec_a  = ZERO
    vec_b  = vec_a
    refvec = vec_a


    mat_a = ONE
    vec_a = THREE

    mat_b = TWO
    vec_b = FOUR


    !
    ! This is the reference actions of the Mat-Vec multiplication from the Chimera terms
    !
    refvec = matmul(mat_a,vec_a) + matmul(mat_b,vec_b)



    !
    ! Test the result vector of the Mat-Vec multiplication
    !
    @assertEqual(refvec, chidg%data%sdata%dq%dom(idom)%vecs(ielem)%vec, tol)








    call chidg%data%sdata%dq%clear()
    call chidg%data%sdata%rhs%clear()
    call chidg%data%sdata%lhs%clear()








    call create_function(constant,'constant')

    call constant%set_option('val', 1.13_rk)
    call chidg%data%sdata%q%project(chidg%data%mesh,constant,1)

    call constant%set_option('val', 190._rk)
    call chidg%data%sdata%q%project(chidg%data%mesh,constant,2)

    call constant%set_option('val', ZERO)
    call chidg%data%sdata%q%project(chidg%data%mesh,constant,3)

    call constant%set_option('val', ZERO)
    call chidg%data%sdata%q%project(chidg%data%mesh,constant,4)

    call constant%set_option('val', 248000._rk)
    call chidg%data%sdata%q%project(chidg%data%mesh,constant,5)



    call update_space(chidg%data,differentiate=.true.)



    !
    ! Zero reference vector
    !
    refvec = 0.


    !
    ! Manual multiplication of one line of the matrix with the residual vector, Including Chimera blocks
    !
    idom = 4
    ielem = 19
    itime = 1

    ! XI_MAX
    idom_p = 4
    ielem_p = 20
    imat = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%loc(idom_p,ielem_p,itime)
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%data_(imat)%mat, &
                             chidg%data%sdata%rhs%dom(idom_p)%vecs(ielem_p)%vec)


    ! ETA_MIN
    idom_p = 4
    ielem_p = 13
    imat = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%loc(idom_p,ielem_p,itime)
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%data_(imat)%mat, &
                             chidg%data%sdata%rhs%dom(idom_p)%vecs(ielem_p)%vec)


    ! ETA_MAX
    idom_p = 4
    ielem_p = 25
    imat = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%loc(idom_p,ielem_p,itime)
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%data_(imat)%mat, &
                             chidg%data%sdata%rhs%dom(idom_p)%vecs(ielem_p)%vec)


    ! DIAG
    idom_p = 4
    ielem_p = 19
    imat = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%loc(idom_p,ielem_p,itime)
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,itime)%data_(imat)%mat, &
                             chidg%data%sdata%rhs%dom(idom_p)%vecs(ielem_p)%vec)



    idonor  = 1
    idom_p  = chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%dparent_l(idonor)
    ielem_p = chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%eparent_l(idonor)
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%data_(idonor)%mat, &
                             chidg%data%sdata%rhs%dom(idom_p)%vecs(ielem_p)%vec)


    idonor  = 2
    idom_p  = chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%dparent_l(idonor)
    ielem_p = chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%eparent_l(idonor)
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%chi_blks(ielem,itime)%data_(idonor)%mat, &
                             chidg%data%sdata%rhs%dom(idom_p)%vecs(ielem_p)%vec)









    !
    ! Standard Matrix-Vector Operation
    !
    chidg%data%sdata%dq = chidg_mv(chidg%data%sdata%lhs , chidg%data%sdata%rhs)




    !
    ! Check that the reference vector and the vector are equal for location idom, ielem
    !
    @assertEqual(refvec, chidg%data%sdata%dq%dom(idom)%vecs(ielem)%vec,tol)





    !
    ! Close ChiDG interface
    !
    call chidg%shut_down('core')


    !
    ! Clean-up Test
    !
    call delete_file(filename)


end subroutine test_chidg_matrix_operator_chimera_mv
