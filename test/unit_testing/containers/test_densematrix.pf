!>  Test init_gen procedure for initializing general matrix storage
!!
!!  @author Nathan A. Wukie
!!
!!
!--------------------------------------------------------------------------------------------------
@Test
subroutine test_densematrix__init() 
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: TWO, dQ_DIFF
    use type_densematrix
    
    implicit none
    type(densematrix_t)  :: blk
    integer(ik)          :: nterms,nfields,dparent_g,dparent_l,eparent_g,eparent_l, &
                            nentries, parent_proc, itime, nnodes_r
    
    !    
    ! Test initialization procedure
    !
    nterms  = 8
    nfields = 10
    nnodes_r = 8
    nentries    = (nterms*nfields)**TWO
    dparent_g   = 1
    dparent_l   = 2
    eparent_g   = 60
    eparent_l   = 55
    parent_proc = 3
    itime = 1
    
    !
    ! Call initialization procedure. THIS IS BEING TESTED.
    !
    call blk%init(nterms,nfields,dparent_g,dparent_l,eparent_g,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    
    @assertEqual(nterms*nfields,blk%idim())
    @assertEqual(nterms*nfields,blk%jdim())
    @assertEqual(nentries,blk%nentries())
    @assertEqual(dparent_g,blk%dparent_g())
    @assertEqual(dparent_l,blk%dparent_l())
    @assertEqual(eparent_g,blk%eparent_g())
    @assertEqual(eparent_l,blk%eparent_l())
    @assertEqual(parent_proc,blk%parent_proc())
    @assertEqual(itime,blk%tparent())

end subroutine test_densematrix__init
!**************************************************************************************************



!>  Test init_gen procedure for initializing general matrix storage
!!
!!  @author Nathan A. Wukie (AFRL)
!!
!!
!!
!--------------------------------------------------------------------------------------------------
@Test
subroutine test_densematrix__reinit() 
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: TWO, dQ_DIFF
    use type_densematrix
    
    implicit none
    type(densematrix_t)  :: blk
    integer(ik)          :: nterms,nfields,dparent_g,dparent_l,eparent_g,eparent_l, &
                            nentries, parent_proc, itime, nnodes_r



    !    
    ! Initialize matrix
    !
    nterms  = 8
    nfields = 2
    nnodes_r = 8
    nentries    = (nterms*nfields)**TWO
    dparent_g   = 1
    dparent_l   = 2
    eparent_g   = 60
    eparent_l   = 55
    parent_proc = 3
    itime       = 1
    
    call blk%init(nterms,nfields,dparent_g,dparent_l,eparent_g,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)



    
    !
    ! Test reinitialization procedure. THIS IS BEING TESTED.
    !
    nterms  = 1
    nfields = 3
    nnodes_r= 8
    nentries = (nterms*nfields)**TWO
    dparent_g   = 2
    dparent_l   = 3
    eparent_g   = 66
    eparent_l   = 65
    parent_proc = 2
    itime = 2
    
    call blk%init(nterms,nfields,dparent_g,dparent_l,eparent_g,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    
    @assertEqual(nterms*nfields,blk%idim())
    @assertEqual(nterms*nfields,blk%jdim())
    @assertEqual(nentries,blk%nentries())
    @assertEqual(dparent_g,blk%dparent_g())
    @assertEqual(dparent_l,blk%dparent_l())
    @assertEqual(eparent_g,blk%eparent_g())
    @assertEqual(eparent_l,blk%eparent_l())
    @assertEqual(parent_proc,blk%parent_proc())
    @assertEqual(itime,blk%tparent())
    
end subroutine test_densematrix__reinit
!***************************************************************************************







!> Test 'resize' procedure for resizing matrix storage
!!
!!  @author Nathan A. Wukie
!!
!!
!!
!!
!----------------------------------------------------------------------------------------
@Test
subroutine test_densematrix__resize()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: TWO, dQ_DIFF
    use type_densematrix
    
    implicit none
    type(densematrix_t) :: blk
    integer(ik)         :: nterms,nfields,idim,jdim,dparent_g,dparent_l,eparent_g,  &
                           eparent_l,parent_proc,nentries,itime, nnodes_r
    
    
    !
    ! Initialize matrix
    !
    nterms  = 8
    nfields = 2
    nnodes_r = 8
    dparent_g   = 2
    dparent_l   = 3
    eparent_g   = 66
    eparent_l   = 65
    parent_proc = 2
    itime = 1
    call blk%init(nterms,nfields,dparent_g,dparent_l,eparent_g,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    
    !
    ! Test resize procedure
    !
    idim   = 12
    jdim   = 33
    nentries = idim*jdim
    
    call blk%resize(idim,jdim)
    
    @assertEqual(idim,blk%idim())
    @assertEqual(jdim,blk%jdim())
    @assertEqual(nentries,blk%nentries())
    @assertEqual(dparent_g,blk%dparent_g())
    @assertEqual(dparent_l,blk%dparent_l())
    @assertEqual(eparent_g,blk%eparent_g())
    @assertEqual(eparent_l,blk%eparent_l())
    @assertEqual(parent_proc,blk%parent_proc())
    @assertEqual(itime,blk%tparent())

end subroutine test_densematrix__resize
!*******************************************************************************************







!>  Test 'restrict' procedure for producing a matrix restricted to a lower
!!  polynomial space.
!!
!!  @author Nathan A. Wukie
!!  @date   7/23/2017
!!
!!
!----------------------------------------------------------------------------------------
@Test
subroutine test_densematrix__restrict()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: TWO, dQ_DIFF
    use type_densematrix
    implicit none

    
    type(densematrix_t) :: dmatrix, restricted
    real(rk)            :: tol
    integer(ik)         :: nterms,nfields,idim,jdim,dparent_g,dparent_l,eparent_g,  &
                           eparent_l,parent_proc,nentries,itime, nnodes_r

    tol = 1.e-6_rk
    
    !
    ! Initialize matrix
    !
    nterms      = 8
    nfields     = 2
    nnodes_r    = 8
    dparent_g   = 2
    dparent_l   = 3
    eparent_g   = 66
    eparent_l   = 65
    parent_proc = 2
    itime = 1
    call dmatrix%init(nterms,nfields,dparent_g,dparent_l,eparent_g,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)


    !
    ! Seed initial matrix with random numbers
    !
    call random_number(dmatrix%mat)

    
    !
    ! Test restrict procedure
    !
    restricted = dmatrix%restrict(nterms_r=1)
    
    

    @assertEqual(2,           size(restricted%mat,1)   )
    @assertEqual(2,           size(restricted%mat,2)   )
    @assertEqual(dparent_g,   restricted%dparent_g()   )
    @assertEqual(dparent_l,   restricted%dparent_l()   )
    @assertEqual(eparent_g,   restricted%eparent_g()   )
    @assertEqual(eparent_l,   restricted%eparent_l()   )
    @assertEqual(parent_proc, restricted%parent_proc() )
    @assertEqual(itime,       restricted%tparent() )

    ! Check values of restricted matrix
    @assertEqual(dmatrix%mat(1,1), restricted%mat(1,1), tol)
    @assertEqual(dmatrix%mat(9,1), restricted%mat(2,1), tol)
    @assertEqual(dmatrix%mat(1,9), restricted%mat(1,2), tol)
    @assertEqual(dmatrix%mat(9,9), restricted%mat(2,2), tol)

end subroutine test_densematrix__restrict
!*******************************************************************************************










