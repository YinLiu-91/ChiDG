module test_domain_matrix_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, &
                                          SEVEN, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, &
                                          ZETA_MAX, IO_DESTINATION
    use mod_string,                 only: string_t
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use type_domain_matrix,         only: domain_matrix_t
    use DNAD_D
    use fcn_constant,               only: constant_f
    implicit none

    public  :: test_domain_matrix

    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_domain_matrix

        type(chidg_t)                       :: chidg
        type(domain_matrix_t)               :: bmat
        type(constant_f)                    :: fcn

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_domain_matrix
    !*****************************************************************************************


contains

    !>  NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !!  derived type procedure. The argument names have to match
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_domain_matrix),    intent(inout)   :: this

        integer(ik)                                 :: nterms_c, ivar, ielem, iblk, spacedim, nelements_g, eqn_ID
        type(point_t),  allocatable                 :: nodes(:)
        type(domain_connectivity_t)                 :: connectivity
        
        IO_DESTINATION = 'file' 

        !
        ! Initialize ChiDG environment
        !
        call this%chidg%start_up('core')


        !
        ! Create 3x3x3 element grid
        !
        call create_mesh_file("D1 NxNxN", filename = 'file.h5',                             &
                                          equation_sets = [string_t('Scalar Advection')],   &
                                          nelem_xi   = 3,                                   &
                                          nelem_eta  = 3,                                   &
                                          nelem_zeta = 3 )

        call this%chidg%set('Solution Order', integer_input=2)
        call this%chidg%set('Time Integrator' , algorithm='Steady')
        call this%chidg%set('Nonlinear Solver', algorithm='Newton')
        call this%chidg%set('Linear Solver'   , algorithm='FGMRES')
        call this%chidg%set('Preconditioner'  , algorithm='ILU0')
        call this%chidg%read_mesh('file.h5')


        !
        ! Initialize domain_matrix
        !
        call this%bmat%init(this%chidg%data%mesh,idom=1,mtype='full')

    
    end subroutine setUp
    !*****************************************************************************************
    




    !>
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_domain_matrix),    intent(inout)   :: this
        
        ! Close ChiDG interface
        call this%chidg%shut_down('core')


        call delete_file('file.h5')

    end subroutine tearDown
    !*****************************************************************************************



    !-----------------------------------------------------------------------------------------
    !-----------------------------------------------------------------------------------------
    !-----------------------------------------------------------------------------------------



    !>  Test that number of rows equals number of elements
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------
    @Test
    subroutine test_domain_matrix__init_linearization__nelem(self)
        class(test_domain_matrix),    intent(inout)   :: self
        
        integer(ik) :: nelem

        nelem = self%chidg%data%mesh%domain(1)%nelem
        @assertEqual(nelem,size(self%bmat%lblks,1))  
        @assertEqual(nelem,size(self%bmat%chi_blks,1))  

    end subroutine test_domain_matrix__init_linearization__nelem
    !************************************************************************************
    
    
    


    !>  Test that number of columns equals number of time levels.
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_matrix__init_linearization__ntime(self)
        class(test_domain_matrix),    intent(inout)   :: self

        integer(ik) :: ntime

        ntime = self%chidg%data%mesh%domain(1)%ntime
        @assertEqual(ntime,size(self%bmat%lblks,2))  
        @assertEqual(ntime,size(self%bmat%chi_blks,2))  
        
    end subroutine test_domain_matrix__init_linearization__ntime
    !*************************************************************************************
    
    
    



    !>  Test that appropriate blocks are allocated. Test block dimensions
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_matrix__init_linearization__denseblocks(self)
        class(test_domain_matrix),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, size1d, nmat, imat, itime, ientry
        integer(ik), allocatable    :: idomain_g(:), ielement_g(:)
        integer(ik), allocatable    :: idomain_g_known(:), ielement_g_known(:)
        real(rk),    allocatable    :: mat(:,:)
        
        associate ( domain => self%chidg%data%mesh%domain(1), lblks => self%bmat%lblks)
        
            
            
            !
            ! Test the first element            
            !
            ielem = 1
            itime = 1
            

            ! Test number of linearization dense matrices, 3 neighbors + self = 4
            nmat = lblks(ielem,itime)%size()
            @assertEqual(4,nmat)


            ! Test domain/element indices are valid.
            allocate(idomain_g(nmat), ielement_g(nmat))
            idomain_g_known = [1,1,1,1]
            ielement_g_known = [1,2,4,10]
            do imat = 1,lblks(ielem,itime)%size()
                idomain_g(imat)  = lblks(ielem,itime)%dparent_g(imat)
                ielement_g(imat) = lblks(ielem,itime)%eparent_g(imat)
            end do

            do ientry = 1,size(idomain_g)
                @assertTrue(any(idomain_g(ientry)  == idomain_g_known ))
            end do

            do ientry = 1,size(ielement_g)
                @assertTrue(any(ielement_g(ientry) == ielement_g_known))
            end do
            
            ! Test first element, linearization block sizes
            size1d = domain%nterms_s * domain%nfields
            do imat = 1,lblks(ielem,itime)%size()
                mat = lblks(ielem,itime)%dmat(imat)

                @assertEqual(size1d,size(mat,1))
                @assertEqual(size1d,size(mat,2))

            end do

            
            





            !
            ! Test the middle element            
            !
            ielem = 14
            itime = 1
            

            ! Test number of linearization dense matrices, 6 neighbors + self = 7
            nmat = lblks(ielem,itime)%size()
            @assertEqual(7,nmat)


            ! Test domain/element indices are valid.
            deallocate(idomain_g,ielement_g)
            allocate(idomain_g(nmat), ielement_g(nmat))
            idomain_g_known = [1]
            ielement_g_known = [5,11,13,14,15,17,23]
            do imat = 1,lblks(ielem,itime)%size()
                idomain_g(imat)  = lblks(ielem,itime)%dparent_g(imat)
                ielement_g(imat) = lblks(ielem,itime)%eparent_g(imat)
            end do

            do ientry = 1,size(idomain_g)
                @assertTrue(any(idomain_g(ientry)  == idomain_g_known ))
            end do

            do ientry = 1,size(ielement_g)
                @assertTrue(any(ielement_g(ientry) == ielement_g_known))
            end do

            
            ! Test  linearization block sizes
            size1d = domain%nterms_s * domain%nfields
            do imat = 1,lblks(ielem,itime)%size()
                mat = lblks(ielem,itime)%dmat(imat)

                @assertEqual(size1d,size(mat,1))
                @assertEqual(size1d,size(mat,2))

            end do



    
    
        end associate   
    
    
    end subroutine test_domain_matrix__init_linearization__denseblocks
    !**********************************************************************************
    
    
    





end module test_domain_matrix_mod
