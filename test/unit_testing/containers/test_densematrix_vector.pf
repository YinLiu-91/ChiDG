!>  Test push_back to append a general densematrix to the densematrix_vector_t
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------

@Test
subroutine test_densematrix_vector__init()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_vector_t)      :: vec


    !
    ! Initialize a densematrix_vector   THIS IS BEING TESTED
    !
    call vec%init(1,2,3,4)

    !
    ! test the init subroutine
    !
    @assertEqual(1,vec%get_idomain_g())
    @assertEqual(2,vec%get_ielement_g())
    @assertEqual(3,vec%get_idomain_l())
    @assertEqual(4,vec%get_ielement_l())
    @assertEqual(0,vec%capacity())
    @assertEqual(0,vec%size())

end subroutine







!>  Test store integral vector in densematrix in index location
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__store()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    use mod_constants,              only: ZERO, ONE, TWO, dQ_DIFF
    use DNAD_D
    implicit none

    type(densematrix_vector_t)      :: vec
    integer(ik)                     :: nterms_s
    type(AD_D)                      :: integral_s(2)

    integer(ik)                     :: nfields
    integer(ik)                     :: nderiv
    type(densematrix_t)             :: inmat1, inmat2
    real(rk)                        :: matval(6,6), mat(6,6)
    integer(ik)                     :: dparent_g_1, dparent_g_2, dparent_l, eparent_g_1, eparent_g_2, eparent_l, parent_proc, itime1, itime2, nnodes_r
    integer(ik)                     :: i
    
    
    nterms_s = 2
    nfields  = 3
    nnodes_r = 8
    matval   = ZERO
    dparent_g_1     = 1
    dparent_g_2     = 1
    dparent_l       = 1
    eparent_g_1     = 1
    eparent_g_2     = 2
    eparent_l       = 1
    parent_proc     = 1
    itime1 = 1
    itime2 = 2




    !
    ! Initialize AD variables with allocated derivative arrays
    !
    nderiv = nfields*nterms_s
    do i = 1,nterms_s
        integral_s(i) = AD_D(nderiv)
    end do

    
    !
    ! Define the functional value for each AD_D in integral vector
    !
    integral_s = [ONE, TWO]
    
    !
    ! Set the first and last element of each derivative array sot they are not just zeros
    !
    integral_s(1)%xp_ad_(1) = ONE
    integral_s(1)%xp_ad_(6) = ONE
    
    integral_s(2)%xp_ad_(1) = TWO
    integral_s(2)%xp_ad_(6) = TWO
    

    !
    ! Initialize the densematrix to push twice
    !
    call inmat1%init(nterms_s,nfields,dparent_g_1,dparent_l,eparent_g_1,eparent_l,parent_proc,itime1,nnodes_r,dQ_DIFF)
    call inmat2%init(nterms_s,nfields,dparent_g_2,dparent_l,eparent_g_2,eparent_l,parent_proc,itime2,nnodes_r,dQ_DIFF)

    !
    ! Assign a matrix of zeros to inmat
    !
    inmat1%mat = matval
    inmat2%mat = matval

    !
    ! Push the two densematrixes
    !
    call vec%push_back(inmat1)
    call vec%push_back(inmat2)

    !
    ! Store the integral vector in the second densematrix THIS IS BEING TESTED
    !
    do i = 1,nfields
        call vec%store(2,i,nterms_s,integral_s)
    end do


    !
    ! Check that the derivatives were assigned to their right locations in the right densematrix
    !
    mat = vec%dmat(2)
    @assertEqual(matval,vec%dmat(1))
    @assertEqual(integral_s(1)%xp_ad_, mat(1,:) )
    @assertEqual(integral_s(2)%xp_ad_, mat(2,:) )
    @assertEqual(integral_s(1)%xp_ad_, mat(3,:) )
    @assertEqual(integral_s(2)%xp_ad_, mat(4,:) )
    @assertEqual(integral_s(1)%xp_ad_, mat(5,:) )
    @assertEqual(integral_s(2)%xp_ad_, mat(6,:) )


end subroutine









!>  Test push_back to append a general densematrix to the densematrix_vector_t
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------

@Test
subroutine test_densematrix_vector__push_back__onedensematrix()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat
    type(densematrix_vector_t)  :: vec
    integer(ik)                    :: nterms_s, nfields, dparent_g, dparent_l, eparent_g, eparent_l, parent_proc, itime, nnodes_r
    real(rk),   dimension(3,3)     :: matval

    
    ! Test initialization procedure

    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_g   = 19
    eparent_l   = 33
    parent_proc = 2
    itime = 1
    matval = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval)))
    
    ! Test initialization of densematrix to push
    call inmat%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    inmat%mat = matval
    
    ! Store densematrix. THIS IS BEING TESTED
    call vec%push_back(inmat)

    ! Test value
    @assertEqual(matval,vec%dmat(1))
    @assertEqual(1,vec%size())
    @assertEqual(7,vec%capacity())

end subroutine







!>  Test push_back to append two densematrixes to the densematrix_vector_t
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------



@Test
subroutine test_densematrix_vector__push_back__twodensematixes()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat1, inmat2
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g_1, dparent_g_2, dparent_l, eparent_g_1, eparent_g_2, eparent_l, parent_proc, itime, nnodes_r

    real(rk),   dimension(3,3)              :: matval1, matval2
    real(rk),   dimension(3,3),parameter    :: id_mat = ONE

    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g_1 = 23
    dparent_g_2 = 24
    dparent_l   = 31
    eparent_g_1 = 19
    eparent_g_2 = 20
    eparent_l   = 33
    parent_proc = 2
    itime = 1
    matval1 = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval1)))
    matval2 = matval1+id_mat

    ! Test initialization of densematrix to push
    call inmat1%init(nterms_s,nfields,dparent_g_1,dparent_l,eparent_g_1,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    call inmat2%init(nterms_s,nfields,dparent_g_2,dparent_l,eparent_g_2,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    
    inmat1%mat = matval1
    inmat2%mat = matval2

    
    ! Store densematrix. THIS IS BEING TESTED
    call vec%push_back(inmat1)
    call vec%push_back(inmat2)


    ! Test value
    @assertEqual(matval1,vec%dmat(1))
    @assertEqual(matval2,vec%dmat(2))
    @assertEqual(2,vec%size())
    @assertEqual(7,vec%capacity())

end subroutine



!>  Test push_back to append thirty densematrixes to the densematrix_vector_t
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__push_back__thirtydensematixes()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat(30)
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_l, parent_proc, itime, nnodes_r
    integer(ik)                 :: eparent_g(30)
    real(rk),   dimension(3,3)              :: matval
    real(rk),   dimension(3,3),parameter    :: id_mat = ONE
    integer(ik)                             :: i
    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1

    !
    ! Set eparent_g for each densematrix pushed
    !
    do i = 1,30
        eparent_g(i) = i
    end do
    matval = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval)))


    ! Test initialization of densematrixes to push
    do i = 1,30
        call inmat(i)%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g(i),eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
        inmat(i)%mat = matval
        matval = matval + id_mat
    end do


    !
    ! Store densematrix. THIS IS BEING TESTED
    !
    do i = 1,30
        call vec%push_back(inmat(i))
    end do


    ! Test value
    matval = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval)))

    do i = 1,30
        @assertEqual(matval,vec%dmat(i))
        matval = matval + id_mat
    end do

    ! Test size
    @assertEqual(30,vec%size())
    @assertEqual(35,vec%capacity())

end subroutine






!>  Test data function which returns the entire data vector
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__data()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat1, inmat2, inmat3
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_g_1, eparent_g_2, eparent_g_3, eparent_l, parent_proc, itime, nnodes_r

    real(rk),   dimension(3,3)              :: matval1, matval2,matval3
    real(rk),   dimension(3,3),parameter    :: id_mat = ONE
    
    type(densematrix_t),dimension(3)        :: res_vec

    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_g_1 = 19
    eparent_g_2 = 20
    eparent_g_3 = 21
    eparent_l   = 33
    parent_proc = 2
    itime = 1

    matval1 = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval1)))
    matval2 = matval1+id_mat
    matval3 = matval2+id_mat

    ! Test initialization of densematrix to push
    call inmat1%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g_1,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    call inmat2%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g_2,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    call inmat3%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g_3,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    
    inmat1%mat = matval1
    inmat2%mat = matval2
    inmat3%mat = matval3

    ! Push back the three densematrixes
    call vec%push_back(inmat1)
    call vec%push_back(inmat2)
    call vec%push_back(inmat3)

    !
    ! Return the vector containing the three densematrixes. THIS IS BEING TESTED
    !
    res_vec = vec%data()

    ! Test value
    @assertEqual(matval1,res_vec(1)%mat)
    @assertEqual(matval2,res_vec(2)%mat)
    @assertEqual(matval3,res_vec(3)%mat)


end subroutine





!>  Test loc function which locate a given densematrix based on idomain_g and ielem_g
!!  and return zero when nothing is found
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__loc()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat1, inmat2, inmat3
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g_1, dparent_g_2, dparent_g_3, dparent_l, eparent_g_1, eparent_g_2, eparent_g_3, eparent_l, parent_proc, itime, nnodes_r


    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g_1   = 1
    dparent_g_2   = 2
    dparent_g_3   = 3
    eparent_g_1   = 4
    eparent_g_2   = 5
    eparent_g_3   = 6
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1

    ! Test initialization of densematrix to push
    call inmat1%init(nterms_s,nfields,dparent_g_1,dparent_l,eparent_g_1,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    call inmat2%init(nterms_s,nfields,dparent_g_2,dparent_l,eparent_g_2,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    call inmat3%init(nterms_S,nfields,dparent_g_3,dparent_l,eparent_g_3,eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    

    !
    ! Store densematrix. THIS IS BEING TESTED
    !
    call vec%push_back(inmat1)
    call vec%push_back(inmat2)
    call vec%push_back(inmat3)
    

    ! Test location
    @assertEqual(1,vec%loc(1,4,itime))
    @assertEqual(2,vec%loc(2,5,itime))
    @assertEqual(3,vec%loc(3,6,itime))
    @assertEqual(0,vec%loc(7,2,itime))


end subroutine







!>  Test clear to empty the densematrix_vector
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__clear()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat(30)
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_l, parent_proc, itime, nnodes_r
    integer(ik)                 :: eparent_g(30)

    real(rk),   dimension(3,3)              :: matval
    real(rk),   dimension(3,3),parameter    :: id_mat = ONE
    integer(ik)                             :: i
    logical                                 :: alloc=.false.

    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1
    
    do i = 1,30
        eparent_g(i) = i
    end do
    matval = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval)))

    ! Test initialization of densematrixes to push
    do i = 1,30
        call inmat(i)%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g(i),eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
        inmat(i)%mat = matval
        matval = matval + id_mat
    end do


    ! Store densematrix.
    do i = 1,30
        call vec%push_back(inmat(i))
    end do


    ! Pretest value
    matval = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval)))

    do i = 1,30
        @assertEqual(matval,vec%dmat(i))
        matval = matval + id_mat
    end do

    ! Pretest size
    @assertEqual(30,vec%size())

    ! Pretest capacity
    @assertEqual(35,vec%capacity())
    
    !
    ! Test clear     THIS IS BEING TESTED
    !
    call vec%clear
    
    ! Test size
    @assertEqual(0,vec%size())
    @assertEqual(0,vec%capacity())

    ! Test allocation
    if (.not. allocated(vec%data_)) alloc=.true.
    @assertEqual(.true.,alloc)

end subroutine





!>  Test setzero  which sets all the densematrixes to zero
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__setzero()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat(3)
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_l, parent_proc, itime, nnodes_r
    integer(ik)                 :: eparent_g(3)

    real(rk),   dimension(3,3)  :: matval, matzero = ZERO
    integer(ik)                 :: i
    
    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1
    

    do i = 1,3
        eparent_g(i) = i
    end do
    matval = transpose(reshape((/ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE/),shape(matval)))
    
    ! Test initialization of densematrix to push
    do i = 1,3
        call inmat(i)%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g(i),eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
        inmat(i)%mat = matval
    end do
    

    ! Store densematrix.
    do i = 1,3
        call vec%push_back(inmat(i))
    end do

    !
    ! Set densematrixes to zero.  THIS IS BEING TESTED
    !
    call vec%setzero()

    ! Test value
    @assertEqual(matzero,vec%dmat(1))
    @assertEqual(matzero,vec%dmat(2))
    @assertEqual(matzero,vec%dmat(3))


end subroutine







!>  Test set_itranspose  which define the itranspose attribute of a densematrix at an index location
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__set_itranspose()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat(3)
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_l, parent_proc, itime, nnodes_r
    integer(ik)                 :: eparent_g(3)
    integer(ik)                 :: i    
    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1

    do i = 1,3
        eparent_g(i) = i
    end do
    
    
    ! Test initialization of densematrix to push
    do i = 1,3
        call inmat(i)%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g(i),eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    end do

    
    ! Store densematrix.
    do i = 1,3
        call vec%push_back(inmat(i))
    end do


    !
    ! Set the itranspose attribute for each densematrix. THIS IS BEING TESTED
    !
    call vec%set_itranspose(1,20)
    call vec%set_itranspose(2,30)
    call vec%set_itranspose(3,40)


    ! Test value
    @assertEqual(20,vec%itranspose(1))
    @assertEqual(30,vec%itranspose(2))
    @assertEqual(40,vec%itranspose(3))


end subroutine






!>  Test set_recv_comm 
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__set_recv_comm()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat(3)
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_l, parent_proc, itime, nnodes_r
    integer(ik)                 :: eparent_g(3)
    integer(iK)                 :: i
    
    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1

    do i = 1,3
        eparent_g(i) = i
    end do

    ! Test initialization of densematrix to push
    do i = 1,3
        call inmat(i)%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g(i),eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    end do


    ! Store densematrix.
    do i = 1,3
        call vec%push_back(inmat(i))
    end do


    ! Set receiver comm attribute for each densematrix. THIS IS BEING TESTED
    call vec%set_recv_comm(1,4)
    call vec%set_recv_comm(2,6)
    call vec%set_recv_comm(3,8)


    ! Test value
    @assertEqual(4,vec%get_recv_comm(1))
    @assertEqual(6,vec%get_recv_comm(2))
    @assertEqual(8,vec%get_recv_comm(3))


end subroutine







!>  Test set_recv_domain 
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__set_recv_domain()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat(3)
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_l, parent_proc, itime, nnodes_r
    integer(ik)                 :: eparent_g(3)
    integer(ik)                 :: i
    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1

    do i = 1,3
        eparent_g(i) = i
    end do


    ! Test initialization of densematrix to push
    do i = 1,3
        call inmat(i)%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g(i),eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    end do


    ! Store densematrix.
    do i = 1,3
        call vec%push_back(inmat(i))
    end do


    ! Set receiver domain attribute for each densematrix. THIS IS BEING TESTED
    call vec%set_recv_domain(1,4)
    call vec%set_recv_domain(2,6)
    call vec%set_recv_domain(3,8)


    ! Test value
    @assertEqual(4,vec%get_recv_domain(1))
    @assertEqual(6,vec%get_recv_domain(2))
    @assertEqual(8,vec%get_recv_domain(3))


end subroutine






!>  Test set_recv_element 
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__set_recv_element()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat(3)
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g, dparent_l, eparent_l, parent_proc, itime, nnodes_r
    integer(ik)                 :: eparent_g(3)
    integer(ik)                 :: i
    
    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g   = 23
    dparent_l   = 31
    eparent_l   = 33
    parent_proc = 2
    itime = 1

    do i = 1,3
        eparent_g(i) = i
    end do

    ! Test initialization of densematrix to push
    do i = 1,3 
        call inmat(i)%init(nterms_s,nfields,dparent_g,dparent_l,eparent_g(i),eparent_l,parent_proc,itime,nnodes_r,dQ_DIFF)
    end do

    ! Store densematrix.
    do i = 1,3
        call vec%push_back(inmat(i))
    end do


    ! Set receiver element attribute for each densematrix. THIS IS BEING TESTED
    call vec%set_recv_element(1,4)
    call vec%set_recv_element(2,6)
    call vec%set_recv_element(3,8)


    ! Test value
    @assertEqual(4,vec%get_recv_element(1))
    @assertEqual(6,vec%get_recv_element(2))
    @assertEqual(8,vec%get_recv_element(3))


end subroutine







!>  Test dparent, eparent and parent_proc
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__eparent_dparent_parent_proc()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat1, inmat2
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g_1, dparent_l_1, eparent_g_1,    &
                                   eparent_l_1,parent_proc_1, dparent_g_2, dparent_l_2,         &
                                   eparent_g_2, eparent_l_2, parent_proc_2, itime1, itime2, nnodes_r

    
    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g_1   = 23; dparent_g_2   = 11
    dparent_l_1   = 31; dparent_l_2   = 56
    eparent_g_1   = 19; eparent_g_2   = 98
    eparent_l_1   = 33; eparent_l_2   = 32
    parent_proc_1 = 2;  parent_proc_2 = 1
    itime1        = 1;  itime2 = 2

    ! Test initialization of densematrix to push
    call inmat1%init(nterms_s,nfields,dparent_g_1,dparent_l_1,eparent_g_1,eparent_l_1,parent_proc_1,itime1,nnodes_r,dQ_DIFF)
    call inmat2%init(nterms_S,nfields,dparent_g_2,dparent_l_2,eparent_g_2,eparent_l_2,parent_proc_2,itime2,nnodes_r,dQ_DIFF)
    
    !
    ! Store densematrix.
    !
    call vec%push_back(inmat1)
    call vec%push_back(inmat2)


    ! Test value
    @assertEqual(23,vec%dparent_g(1))
    @assertEqual(31,vec%dparent_l(1))
    @assertEqual(19,vec%eparent_g(1))
    @assertEqual(33,vec%eparent_l(1))
    @assertEqual(2,vec%parent_proc(1))
    @assertEqual(itime1,vec%tparent(1))
    @assertEqual(11,vec%dparent_g(2))
    @assertEqual(56,vec%dparent_l(2))
    @assertEqual(98,vec%eparent_g(2))
    @assertEqual(32,vec%eparent_l(2))
    @assertEqual(1,vec%parent_proc(2))
    @assertEqual(itime2,vec%tparent(2))


end subroutine







!>  Test get_diagonal
!!
!!
!!  @author Matteo Ugolotti
!!
!---------------------------------------------------------------------------------
@Test
subroutine test_densematrix_vector__get_diagonal()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: dQ_DIFF
    use type_densematrix_vector,    only: densematrix_vector_t
    use type_densematrix,           only: densematrix_t
    implicit none

    type(densematrix_t)         :: inmat1, inmat2
    type(densematrix_vector_t)  :: vec
    integer(ik)                 :: nterms_s, nfields, dparent_g_1, dparent_l_1, eparent_g_1,    &
                                   eparent_l_1,parent_proc_1, dparent_g_2, dparent_l_2,         &
                                   eparent_g_2, eparent_l_2, parent_proc_2, itime1, itime2, nnodes_r

    
    ! Test initialization procedure
    nterms_s = 1
    nfields  = 3
    nnodes_r = 8
    dparent_g_1   = 23; dparent_g_2   = 11
    dparent_l_1   = 31; dparent_l_2   = 56
    eparent_g_1   = 19; eparent_g_2   = 98
    eparent_l_1   = 33; eparent_l_2   = 32
    parent_proc_1 = 2;  parent_proc_2 = 1
    itime1        = 1;  itime2        = 2


    ! Test initialization of densematrix to push
    call inmat1%init(nterms_s,nfields,dparent_g_1,dparent_l_1,eparent_g_1,eparent_l_1,parent_proc_1,itime1,nnodes_r,dQ_DIFF)
    call inmat2%init(nterms_s,nfields,dparent_g_2,dparent_l_2,eparent_g_2,eparent_l_2,parent_proc_2,itime2,nnodes_r,dQ_DIFF)
    

    ! Store densematrix.
    call vec%push_back(inmat1)
    call vec%push_back(inmat2)
    

    ! Test value get_diagonal
    vec%idomain_g = 23
    vec%ielement_g = 19
    @assertEqual(1,vec%get_diagonal())

    vec%idomain_g = 11
    vec%ielement_g = 98
    @assertEqual(2,vec%get_diagonal())

    vec%idomain_g = 2
    vec%ielement_g = 19
    @assertEqual(0,vec%get_diagonal())


end subroutine
