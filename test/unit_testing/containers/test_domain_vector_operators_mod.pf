module test_domain_vector_operators_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, &
                                          EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, &
                                          ZETA_MAX, IO_DESTINATION
    use type_domain_vector
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_test_utilities,         only: create_mesh
    implicit none

    public  :: test_domain_vector_operators

    !>
    !!  
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_domain_vector_operators

        type(chidg_t)                        :: chidg
        type(domain_vector_t)                  :: bv_a, bv_b, bv_res

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_domain_vector_operators
    !******************************************************************************************


contains

    !>  NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !!  derived type procedure. The argument names have to match
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_domain_vector_operators),    intent(inout)   :: this

        integer(ik)                                 :: ivar, nelements_g, eqn_ID
        real(rk),       allocatable                 :: nodes(:,:), dnodes(:,:), vnodes(:,:)
        type(domain_connectivity_t)                 :: connectivity
        
        IO_DESTINATION = 'file'
        
        ! Initialize ChiDG environment
        call this%chidg%start_up('core')


        ! Read 2x2x1 element grid
        call create_mesh('221',nodes,connectivity)
        dnodes = nodes
        vnodes = nodes
        dnodes = ZERO
        vnodes = ZERO

        nelements_g = 4

        
        call this%chidg%data%add_equation_set('Scalar Advection')
        eqn_ID = this%chidg%data%get_equation_set_id('Scalar Advection')

        call this%chidg%data%mesh%add_domain('D_01',nodes,dnodes,vnodes,connectivity,nelements_g,'Cartesian',eqn_ID)

        call this%chidg%set('Solution Order', integer_input=2)
        call this%chidg%init('domains')


        ! Initialize domain_vectors
        call this%bv_a%init(this%chidg%data%mesh%domain(1),'primal')
        call this%bv_b%init(this%chidg%data%mesh%domain(1),'primal')
        call this%bv_res%init(this%chidg%data%mesh%domain(1),'primal')


        ! Initialize domain_vector data for operators
        this%bv_a%vecs(1)%vec = ONE
        this%bv_a%vecs(2)%vec = TWO
        this%bv_a%vecs(3)%vec = THREE
        this%bv_a%vecs(4)%vec = FOUR


        this%bv_b%vecs(1)%vec = TWO
        this%bv_b%vecs(2)%vec = THREE
        this%bv_b%vecs(3)%vec = FOUR
        this%bv_b%vecs(4)%vec = FIVE


    end subroutine setUp
    !******************************************************************************************
    
    !>
    !!
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_domain_vector_operators),    intent(inout)   :: this
        
        ! Close ChiDG interface
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !******************************************************************************************








    !>  Test:    real * domain_vector
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_vector_operators_mult_real_bv(self)
        class(test_domain_vector_operators),    intent(inout)   :: self
        
        integer(ik)                 :: nelem
        real(rk)                    :: val

        val = 0.1_rk

        !
        ! Multiply real * domain_vector. TESTING THIS
        !
        self%bv_res = val * self%bv_a


        !
        ! Test values. domain_vector%vecs%vec
        !
        @assertEqual(val*ONE,   self%bv_res%vecs(1)%vec)
        @assertEqual(val*TWO,   self%bv_res%vecs(2)%vec)
        @assertEqual(val*THREE, self%bv_res%vecs(3)%vec)
        @assertEqual(val*FOUR,  self%bv_res%vecs(4)%vec)


        !
        ! Test parent data
        !
        @assertEqual(1, self%bv_res%vecs(1)%eparent_g())
        @assertEqual(1, self%bv_res%vecs(1)%eparent_l())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_g())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_l())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_g())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_l())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_g())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_l())


    end subroutine test_domain_vector_operators_mult_real_bv
    !******************************************************************************************
    








    !>  Test:    domain_vector * real
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_vector_operators_mult_bv_real(self)
        class(test_domain_vector_operators),    intent(inout)   :: self
        
        integer(ik)                 :: nelem
        real(rk)                    :: val

        val = 0.1_rk

        !
        ! Multiply real * domain_vector. TESTING THIS
        !
        self%bv_res = self%bv_a * val


        !
        ! Test values. domain_vector%vecs%vec
        !
        @assertEqual(val*ONE,   self%bv_res%vecs(1)%vec)
        @assertEqual(val*TWO,   self%bv_res%vecs(2)%vec)
        @assertEqual(val*THREE, self%bv_res%vecs(3)%vec)
        @assertEqual(val*FOUR,  self%bv_res%vecs(4)%vec)


        !
        ! Test parent data
        !
        @assertEqual(1, self%bv_res%vecs(1)%eparent_g())
        @assertEqual(1, self%bv_res%vecs(1)%eparent_l())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_g())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_l())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_g())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_l())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_g())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_l())

    end subroutine test_domain_vector_operators_mult_bv_real
    !******************************************************************************************
    






    !>  Test:    real / domain_vector
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_vector_operators_div_real_bv(self)
        class(test_domain_vector_operators),    intent(inout)   :: self
        
        integer(ik)                 :: nelem
        real(rk)                    :: val

        val = 0.1_rk

        !
        ! Multiply real * domain_vector. TESTING THIS
        !
        self%bv_res = val / self%bv_a


        !
        ! Test values. domain_vector%vecs%vec
        !
        @assertEqual(val/ONE,   self%bv_res%vecs(1)%vec)
        @assertEqual(val/TWO,   self%bv_res%vecs(2)%vec)
        @assertEqual(val/THREE, self%bv_res%vecs(3)%vec)
        @assertEqual(val/FOUR,  self%bv_res%vecs(4)%vec)


        !
        ! Test parent data
        !
        @assertEqual(1, self%bv_res%vecs(1)%eparent_g())
        @assertEqual(1, self%bv_res%vecs(1)%eparent_l())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_g())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_l())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_g())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_l())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_g())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_l())

    end subroutine test_domain_vector_operators_div_real_bv
    !******************************************************************************************
    










    !>  Test:    domain_vector / real
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_vector_operators_div_bv_real(self)
        class(test_domain_vector_operators),    intent(inout)   :: self
        
        integer(ik)                 :: nelem
        real(rk)                    :: val

        val = 0.1_rk

        !
        ! Multiply real * domain_vector. TESTING THIS
        !
        self%bv_res = self%bv_a / val


        !
        ! Test values. domain_vector%vecs%vec
        !
        @assertEqual(ONE/val,   self%bv_res%vecs(1)%vec)
        @assertEqual(TWO/val,   self%bv_res%vecs(2)%vec)
        @assertEqual(THREE/val, self%bv_res%vecs(3)%vec)
        @assertEqual(FOUR/val,  self%bv_res%vecs(4)%vec)

        !
        ! Test parent data
        !
        @assertEqual(1, self%bv_res%vecs(1)%eparent_g())
        @assertEqual(1, self%bv_res%vecs(1)%eparent_l())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_g())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_l())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_g())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_l())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_g())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_l())


    end subroutine test_domain_vector_operators_div_bv_real
    !******************************************************************************************
    




    


    
    !>  Test:    domain_vector + domain_vector
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_vector_operators_add_bv_bv(self)
        class(test_domain_vector_operators),    intent(inout)   :: self
        
        integer(ik)                 :: nelem
        real(rk)                    :: val

        val = 0.1_rk

        !
        ! Multiply real * domain_vector. TESTING THIS
        !
        self%bv_res = self%bv_a + self%bv_b


        !
        ! Test values. domain_vector%vecs%vec
        !
        @assertEqual(THREE, self%bv_res%vecs(1)%vec)
        @assertEqual(FIVE,  self%bv_res%vecs(2)%vec)
        @assertEqual(SEVEN, self%bv_res%vecs(3)%vec)
        @assertEqual(NINE,  self%bv_res%vecs(4)%vec)

        !
        ! Test parent data
        !
        @assertEqual(1, self%bv_res%vecs(1)%eparent_g())
        @assertEqual(1, self%bv_res%vecs(1)%eparent_l())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_g())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_l())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_g())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_l())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_g())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_l())



    end subroutine test_domain_vector_operators_add_bv_bv
    !******************************************************************************************
    










    !>  Test:    domain_vector - domain_vector
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test_domain_vector_operators_sub_bv_bv(self)
        class(test_domain_vector_operators),    intent(inout)   :: self
        
        integer(ik)                 :: nelem
        real(rk)                    :: val

        val = 0.1_rk

        !
        ! Multiply real * domain_vector. TESTING THIS
        !
        self%bv_res = self%bv_a - self%bv_b


        !
        ! Test values. domain_vector%vecs%vec
        !
        @assertEqual(-ONE, self%bv_res%vecs(1)%vec)
        @assertEqual(-ONE, self%bv_res%vecs(2)%vec)
        @assertEqual(-ONE, self%bv_res%vecs(3)%vec)
        @assertEqual(-ONE, self%bv_res%vecs(4)%vec)

        !
        ! Test parent data
        !
        @assertEqual(1, self%bv_res%vecs(1)%eparent_g())
        @assertEqual(1, self%bv_res%vecs(1)%eparent_l())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_g())
        @assertEqual(2, self%bv_res%vecs(2)%eparent_l())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_g())
        @assertEqual(3, self%bv_res%vecs(3)%eparent_l())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_g())
        @assertEqual(4, self%bv_res%vecs(4)%eparent_l())


    end subroutine test_domain_vector_operators_sub_bv_bv
    !******************************************************************************************
    














end module test_domain_vector_operators_mod
