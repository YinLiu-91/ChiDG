@Test
subroutine test_domain_vector_distribute()
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ONE, TWO, THREE, FOUR, ZERO
    use type_domain_vector,         only: domain_vector_t
    use mod_test_utilities,         only: create_mesh
    use type_chidg,                 only: chidg_t
    use type_domain_connectivity,   only: domain_connectivity_t

    implicit none
    type(chidg_t)               :: chidg
    type(domain_vector_t)       :: bvec
    real(rk),       allocatable :: nodes(:,:), dnodes(:,:), vnodes(:,:)
    type(domain_connectivity_t) :: connectivity
    real(rk),       allocatable :: fullvec(:)
    integer(ik)                 :: idomain, nelements_g, eqn_ID



    !
    ! Initialize chidg environment
    !
    call chidg%start_up('core')



    !
    ! Generate points for a 2x2x1 mesh
    !
    call create_mesh('221',nodes,connectivity)
    dnodes = nodes
    vnodes = nodes
    dnodes = ZERO
    vnodes = ZERO



    !
    ! Call domain initialization
    !
    call chidg%data%add_equation_set('Scalar Advection')
    eqn_ID = chidg%data%get_equation_set_id('Scalar Advection')



    idomain     = 1
    nelements_g = 4
    call chidg%data%mesh%add_domain('D_01',nodes,dnodes,vnodes,connectivity,nelements_g,'Cartesian',eqn_ID)

    call chidg%set('Solution Order', integer_input=2)
    call chidg%init('domains')


    !
    ! Call initailization on domain_vector
    !
    call bvec%init(chidg%data%mesh%domain(1),'primal')



    allocate(fullvec(32))
    fullvec = 0._rk



    !
    ! Assign reference blocks to the domain_vector matrix
    !
    fullvec(1:8)   = ONE
    fullvec(9:16)  = TWO
    fullvec(17:24) = THREE
    fullvec(25:32) = FOUR



    !
    !   THIS IS WHAT WE ARE TESTING
    !
    ! Call routine to build full-vector representation
    call bvec%distribute(fullvec)




    !
    ! Test full-vector values against expected reference values
    !
    @assertEqual(ONE,bvec%vecs(1)%vec)
    @assertEqual(TWO,bvec%vecs(2)%vec)
    @assertEqual(THREE,bvec%vecs(3)%vec)
    @assertEqual(FOUR,bvec%vecs(4)%vec)




    !
    ! Close ChiDG interface
    !
    call chidg%shut_down('core')


end subroutine test_domain_vector_distribute
