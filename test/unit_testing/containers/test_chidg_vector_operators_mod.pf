module test_chidg_vector_operators_mod
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, HALF, ONE, TWO, THREE, FOUR, FIVE, SIX, &
                                          SEVEN, EIGHT, IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use mod_string,                 only: string_t
    use type_chidg_vector,          only: chidg_vector_t, mult_real_chidg_vector, &
                                          mult_chidg_vector_real, div_real_chidg_vector, &
                                          div_chidg_vector_real, sub_chidg_vector_chidg_vector, &
                                          add_chidg_vector_chidg_vector
    implicit none



    !
    ! Copying operator interfaces from type_chidg_vector since importing all of 
    ! chidg_vector also imports an mpi type that is also used in pfunit which uses a 
    ! different interface.
    !
    public operator (*)
    interface operator(*)
        module procedure mult_real_chidg_vector          ! real * chidgVector
        module procedure mult_chidg_vector_real          ! chidgVector * real
    end interface


    public operator (/)
    interface operator (/)
        module procedure div_real_chidg_vector           ! real / chidgVector
        module procedure div_chidg_vector_real           ! chidgVector / real
    end interface


    public operator (-)
    interface operator (-)
        module procedure sub_chidg_vector_chidg_vector    ! chidgVector - chidgVector
    end interface

    public operator (+)
    interface operator (+)
        module procedure add_chidg_vector_chidg_vector    ! chidgVector + chidgVector
    end interface
    !
    !
    !


    public :: test_chidg_vector


    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) :: test_chidg_vector

        type(chidg_t)               :: chidg

        integer(ik)                 :: solution_order = 2
        integer(ik)                 :: nterms_s = 8
        type(chidg_vector_t)        :: vec_a
        type(chidg_vector_t)        :: vec_b
        character(:),   allocatable :: file_name

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type test_chidg_vector
    !*******************************************************************


contains


    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_chidg_vector),    intent(inout)   :: this


        IO_DESTINATION = 'file'

        ! Initialize ChiDG environment
        call this%chidg%start_up('core')


        ! Set accuracy for the solution expansion
        call this%chidg%set('Solution Order', integer_input=this%solution_order)


        ! Create grid file
        this%file_name = 'file.h5'
        call create_mesh_file('D1 NxNxN', this%file_name, equation_sets=[string_t('Scalar Advection')], &
                                                     nelem_xi=2, nelem_eta=2, nelem_zeta=2)

        ! Read grid file
        call this%chidg%read_mesh(this%file_name)


        ! Initialize solution data containers
        call this%vec_a%init(this%chidg%data%mesh,this%chidg%data%mesh%domain(1)%ntime,'primal')
        call this%vec_b%init(this%chidg%data%mesh,this%chidg%data%mesh%domain(1)%ntime,'primal')


        ! Set vector values
        this%vec_a%dom(1)%vecs(1)%vec = ONE
        this%vec_a%dom(1)%vecs(2)%vec = TWO
        this%vec_a%dom(1)%vecs(3)%vec = THREE
        this%vec_a%dom(1)%vecs(4)%vec = FOUR
        this%vec_a%dom(1)%vecs(5)%vec = FIVE
        this%vec_a%dom(1)%vecs(6)%vec = SIX
        this%vec_a%dom(1)%vecs(7)%vec = SEVEN
        this%vec_a%dom(1)%vecs(8)%vec = EIGHT


        this%vec_b%dom(1)%vecs(1)%vec = ONE
        this%vec_b%dom(1)%vecs(2)%vec = TWO
        this%vec_b%dom(1)%vecs(3)%vec = THREE
        this%vec_b%dom(1)%vecs(4)%vec = FOUR
        this%vec_b%dom(1)%vecs(5)%vec = FIVE
        this%vec_b%dom(1)%vecs(6)%vec = SIX
        this%vec_b%dom(1)%vecs(7)%vec = SEVEN
        this%vec_b%dom(1)%vecs(8)%vec = EIGHT


    end subroutine setUp
    !*****************************************************************************************



    !>
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_chidg_vector),    intent(inout)   :: this

        ! Close ChiDG interface
        call this%chidg%shut_down('core')

        ! Clean up
        call delete_file(this%file_name)

    end subroutine
    !*****************************************************************************************




    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__add(self)
        class(test_chidg_vector),    intent(inout)   :: self

        type(chidg_vector_t) :: res
        

        res = self%vec_a + self%vec_b

        @assertEqual(TWO,    res%dom(1)%vecs(1)%vec)
        @assertEqual(FOUR,   res%dom(1)%vecs(2)%vec)
        @assertEqual(SIX,    res%dom(1)%vecs(3)%vec)
        @assertEqual(EIGHT,  res%dom(1)%vecs(4)%vec)
        @assertEqual(10._rk, res%dom(1)%vecs(5)%vec)
        @assertEqual(12._rk, res%dom(1)%vecs(6)%vec)
        @assertEqual(14._rk, res%dom(1)%vecs(7)%vec)
        @assertEqual(16._rk, res%dom(1)%vecs(8)%vec)

    end subroutine test_chidg_vector__add
    !***********************************************************************
    




    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__sub(self)
        class(test_chidg_vector),    intent(inout)   :: self

        type(chidg_vector_t) :: res
        

        res = self%vec_a - self%vec_b

        @assertEqual(ZERO, res%dom(1)%vecs(1)%vec)
        @assertEqual(ZERO, res%dom(1)%vecs(2)%vec)
        @assertEqual(ZERO, res%dom(1)%vecs(3)%vec)
        @assertEqual(ZERO, res%dom(1)%vecs(4)%vec)
        @assertEqual(ZERO, res%dom(1)%vecs(5)%vec)
        @assertEqual(ZERO, res%dom(1)%vecs(6)%vec)
        @assertEqual(ZERO, res%dom(1)%vecs(7)%vec)
        @assertEqual(ZERO, res%dom(1)%vecs(8)%vec)

    end subroutine test_chidg_vector__sub
    !***********************************************************************
    



    
    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__mult_rv(self)
        class(test_chidg_vector),    intent(inout)   :: self

        type(chidg_vector_t) :: res
        

        res = 2._rk * self%vec_b

        @assertEqual(TWO, res%dom(1)%vecs(1)%vec)
        @assertEqual(FOUR, res%dom(1)%vecs(2)%vec)
        @assertEqual(SIX, res%dom(1)%vecs(3)%vec)
        @assertEqual(EIGHT, res%dom(1)%vecs(4)%vec)
        @assertEqual(10._rk, res%dom(1)%vecs(5)%vec)
        @assertEqual(12._rk, res%dom(1)%vecs(6)%vec)
        @assertEqual(14._rk, res%dom(1)%vecs(7)%vec)
        @assertEqual(16._rk, res%dom(1)%vecs(8)%vec)

    end subroutine test_chidg_vector__mult_rv
    !***********************************************************************
    






    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__mult_vr(self)
        class(test_chidg_vector),    intent(inout)   :: self

        type(chidg_vector_t) :: res
        

        res = self%vec_b * 2._rk

        @assertEqual(TWO, res%dom(1)%vecs(1)%vec)
        @assertEqual(FOUR, res%dom(1)%vecs(2)%vec)
        @assertEqual(SIX, res%dom(1)%vecs(3)%vec)
        @assertEqual(EIGHT, res%dom(1)%vecs(4)%vec)
        @assertEqual(10._rk, res%dom(1)%vecs(5)%vec)
        @assertEqual(12._rk, res%dom(1)%vecs(6)%vec)
        @assertEqual(14._rk, res%dom(1)%vecs(7)%vec)
        @assertEqual(16._rk, res%dom(1)%vecs(8)%vec)

    end subroutine test_chidg_vector__mult_vr
    !**********************************************************************






    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__div_rv(self)
        class(test_chidg_vector),    intent(inout)   :: self

        type(chidg_vector_t) :: res
        

        res = 2._rk / self%vec_b

        @assertEqual(TWO, res%dom(1)%vecs(1)%vec)
        @assertEqual(ONE, res%dom(1)%vecs(2)%vec)
        @assertEqual(2._rk/3._rk, res%dom(1)%vecs(3)%vec)
        @assertEqual(2._rk/4._rk, res%dom(1)%vecs(4)%vec)
        @assertEqual(2._rk/5._rk, res%dom(1)%vecs(5)%vec)
        @assertEqual(2._rk/6._rk, res%dom(1)%vecs(6)%vec)
        @assertEqual(2._rk/7._rk, res%dom(1)%vecs(7)%vec)
        @assertEqual(2._rk/8._rk, res%dom(1)%vecs(8)%vec)

    end subroutine test_chidg_vector__div_rv
    !**********************************************************************





    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__div_vr(self)
        class(test_chidg_vector),    intent(inout)   :: self

        type(chidg_vector_t) :: res
        

        res = self%vec_b / 2._rk

        @assertEqual(HALF, res%dom(1)%vecs(1)%vec)
        @assertEqual(ONE, res%dom(1)%vecs(2)%vec)
        @assertEqual(1.5_rk, res%dom(1)%vecs(3)%vec)
        @assertEqual(TWO, res%dom(1)%vecs(4)%vec)
        @assertEqual(2.5_rk, res%dom(1)%vecs(5)%vec)
        @assertEqual(THREE, res%dom(1)%vecs(6)%vec)
        @assertEqual(3.5_rk, res%dom(1)%vecs(7)%vec)
        @assertEqual(FOUR, res%dom(1)%vecs(8)%vec)

    end subroutine test_chidg_vector__div_vr
    !**********************************************************************






    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__norm(self)
        class(test_chidg_vector),    intent(inout)   :: self

        real(rk)    :: computed_norm, expected_norm

        expected_norm = ONE**TWO   * self%nterms_s + &
                        TWO**TWO   * self%nterms_s + &
                        THREE**TWO * self%nterms_s + &
                        FOUR**TWO  * self%nterms_s + &
                        FIVE**TWO  * self%nterms_s + &
                        SIX**TWO   * self%nterms_s + &
                        SEVEN**TWO * self%nterms_s + &
                        EIGHT**TWO * self%nterms_s
        expected_norm = sqrt(expected_norm)

        computed_norm = self%vec_a%norm()

        @assertEqual(expected_norm,computed_norm)

    end subroutine test_chidg_vector__norm
    !**********************************************************************




    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !----------------------------------------------------------------------
    @Test
    subroutine test_chidg_vector__sumsqr(self)
        class(test_chidg_vector),    intent(inout)   :: self

        real(rk)    :: computed_sumsqr, expected_sumsqr

        expected_sumsqr = ONE**TWO   * self%nterms_s + &
                          TWO**TWO   * self%nterms_s + &
                          THREE**TWO * self%nterms_s + &
                          FOUR**TWO  * self%nterms_s + &
                          FIVE**TWO  * self%nterms_s + &
                          SIX**TWO   * self%nterms_s + &
                          SEVEN**TWO * self%nterms_s + &
                          EIGHT**TWO * self%nterms_s

        computed_sumsqr = self%vec_a%sumsqr()

        @assertEqual(expected_sumsqr,computed_sumsqr)

    end subroutine test_chidg_vector__sumsqr
    !**********************************************************************





















end module test_chidg_vector_operators_mod
