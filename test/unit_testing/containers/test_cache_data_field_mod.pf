!>  This suite tests the cache_data_field container.
!!
!!  This test creates an initialized chidg instance, complete with grid and solution storage. 
!!  A particular element is chosen and a cache_data_field instance is 'resized'. We want to 
!!  test that the cache_data_field was resized correctly for all the potential component 
!!  uses: 'face interior', 'face exterior', 'element'.
!!
!!  Routines tested:
!!      resize
!!
!!  Cases tested:
!!      'face interior'
!!      'face exterior'
!!      ' element'
!!
!!  @author Nathan A. Wukie
!!  @date   9/7/2016
!!
!----------------------------------------------------------------------------------------------
module test_cache_data_field_mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use type_chidg,                 only: chidg_t
    use type_cache_data_field,      only: cache_data_field_t
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    implicit none

    public  :: test_cache_data_field


    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !--------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_cache_data_field

        character(:),   allocatable :: filename
        type(chidg_t)               :: chidg
        integer(ik)                 :: solution_order = 2

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_cache_data_field
    !***************************************************************************


contains

    !>  NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !!  derived type procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_cache_data_field),    intent(inout)   :: this

        
        call this%chidg%start_up('core')
        
        !
        ! Create file
        !
        this%filename = "D1E27M1.h5"
        call create_mesh_file("D1 NxNxN",this%filename,nelem_xi=3,nelem_eta=3,nelem_zeta=3)

        !
        ! Set the accuracy for the solution expansion
        !
        call this%chidg%set('Solution Order', integer_input=this%solution_order)

        !
        ! Read grid + bcs
        !
        call this%chidg%read_mesh(this%filename)

    end subroutine setUp
    !******************************************************************************************
    

    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_cache_data_field),    intent(inout)   :: this

        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

        call delete_file(this%filename)

    end subroutine tearDown
    !******************************************************************************************





    !>  Test 'face interior' for allocated arrays.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !!-----------------------------------------------------------------------------------------
    @Test
    subroutine test_resize_face_interior__allocated(self)
        class(test_cache_data_field),    intent(inout)   :: self
        
        integer(ik)                 :: idomain, ielem, iface
        type(cache_data_field_t) :: cache_data_field

        idomain = 1
        ielem   = 14
        iface   = 1


        !
        ! Call resize routine. THIS IS BEING TESTED.
        !
        call cache_data_field%resize('Test Field','face interior',                  &
                                                   self%chidg%data%mesh,            &
                                                   self%chidg%data%eqnset(:)%prop,  &
                                                   idomain,                         &
                                                   ielem,                           &
                                                   iface,                           &
                                                   differentiate=.true.)


        !
        ! Test that the cache allocated the correct component
        !
        @assertEqual(cache_data_field%name,'Test Field')
        @assertTrue(allocated(cache_data_field%value))
        @assertTrue(allocated(cache_data_field%gradient))
        @assertTrue(allocated(cache_data_field%lift_face))
        @assertTrue(allocated(cache_data_field%lift_element))
        
    end subroutine test_resize_face_interior__allocated
    !******************************************************************************************





    !>  Test 'face interior' cache gets sized appropriately.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !!-----------------------------------------------------------------------------------------
    @Test
    subroutine test_resize_face_interior__size(self)
        class(test_cache_data_field),    intent(inout)   :: self
        
        integer(ik)              :: idomain, ielem, iface, nnodes_face, nnodes_vol
        type(cache_data_field_t) :: cache_data_field

        idomain = 1
        ielem   = 14
        iface   = 1



        !
        ! Call resize routine. THIS IS BEING TESTED.
        !
        call cache_data_field%resize('Test Field','face interior',                  &
                                                  self%chidg%data%mesh,             &
                                                  self%chidg%data%eqnset(:)%prop,   &
                                                  idomain,                          &
                                                  ielem,                            &
                                                  iface,                            &
                                                  differentiate=.true.)


        !
        ! Test that the cache allocated the correct component
        !
        nnodes_vol  = self%chidg%data%mesh%domain(idomain)%faces(ielem,iface)%basis_s%nnodes_elem()
        nnodes_face = self%chidg%data%mesh%domain(idomain)%faces(ielem,iface)%basis_s%nnodes_face()

        ! TEST 'value' ALLOCATION
        ! Number of nodes
        @assertEqual(size(cache_data_field%value,1), nnodes_face)
        ! Number of dependent elements. Should be 1 + nexterior neighbors
        @assertEqual(size(cache_data_field%value,2), 2)

        ! TEST 'gradient' ALLOCATION
        ! Number of nodes
        @assertEqual(size(cache_data_field%gradient,1), nnodes_face)
        ! Number of spatial dimentions
        @assertEqual(size(cache_data_field%gradient,2), 3)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%gradient,3), 2)

        ! TEST 'lift' ALLOCATION
        ! Number of nodes
        @assertEqual(size(cache_data_field%lift_face,1), nnodes_face)
        @assertEqual(size(cache_data_field%lift_element,1), nnodes_vol)
        ! Number of spatial dimentions
        @assertEqual(size(cache_data_field%lift_face,2), 3)
        @assertEqual(size(cache_data_field%lift_element,2), 3)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%lift_face,3), 2)
        @assertEqual(size(cache_data_field%lift_element,3), 2)
        
    end subroutine test_resize_face_interior__size
    !******************************************************************************************








    !>  Test 'face exterior' for allocated arrays.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !!-----------------------------------------------------------------------------------------
    @Test
    subroutine test_resize_face_exterior__allocated(self)
        class(test_cache_data_field),    intent(inout)   :: self
        
        integer(ik)                 :: idomain, ielem, iface
        type(cache_data_field_t) :: cache_data_field

        idomain = 1
        ielem   = 14
        iface   = 1


        !
        ! Call resize routine. THIS IS BEING TESTED.
        !
        call cache_data_field%resize('Test Field','face exterior',                  &
                                                  self%chidg%data%mesh,             &
                                                  self%chidg%data%eqnset(:)%prop,   &
                                                  idomain,                          &
                                                  ielem,                            &
                                                  iface,                            &
                                                  differentiate=.true.)


        !
        ! Test that the cache allocated the correct component
        !
        @assertEqual(cache_data_field%name, 'Test Field')
        @assertTrue(allocated(cache_data_field%value))
        @assertTrue(allocated(cache_data_field%gradient))
        @assertTrue(allocated(cache_data_field%lift_face))
        @assertTrue(allocated(cache_data_field%lift_element))
        
    end subroutine test_resize_face_exterior__allocated
    !******************************************************************************************





    !>  Test 'face exterior' case for expected sizes.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !!-----------------------------------------------------------------------------------------
    @Test
    subroutine test_resize_face_exterior__size(self)
        class(test_cache_data_field),    intent(inout)   :: self
        
        integer(ik)                 :: idomain, ielem, iface, nnodes_face, nnodes_vol
        type(cache_data_field_t) :: cache_data_field

        idomain = 1
        ielem   = 14
        iface   = 1



        !
        ! Call resize routine. THIS IS BEING TESTED.
        !
        call cache_data_field%resize('Test Field','face exterior',                      &
                                                  self%chidg%data%mesh,                 &
                                                  self%chidg%data%eqnset(:)%prop,       &
                                                  idomain,                              &
                                                  ielem,                                &
                                                  iface,                                &
                                                  differentiate=.true.)


        !
        ! Test that the cache allocated the correct component
        !
        nnodes_vol  = self%chidg%data%mesh%domain(idomain)%faces(ielem,iface)%basis_s%nnodes_elem()
        nnodes_face = self%chidg%data%mesh%domain(idomain)%faces(ielem,iface)%basis_s%nnodes_face()

        ! Number of nodes
        @assertEqual(size(cache_data_field%value,1), nnodes_face)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%value,2), 2)

        ! Number of nodes
        @assertEqual(size(cache_data_field%gradient,1), nnodes_face)
        ! Number of spatial dimentions
        @assertEqual(size(cache_data_field%gradient,2), 3)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%gradient,3), 2)

        ! Number of nodes
        @assertEqual(size(cache_data_field%lift_face,1), nnodes_face)
        @assertEqual(size(cache_data_field%lift_element,1), nnodes_vol)
        ! Number of spatial dimentions
        @assertEqual(size(cache_data_field%lift_face,2), 3)
        @assertEqual(size(cache_data_field%lift_element,2), 3)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%lift_face,3), 2)
        @assertEqual(size(cache_data_field%lift_element,3), 2)
        
    end subroutine test_resize_face_exterior__size
    !******************************************************************************************











    !>  Test 'element' case for allocated arrays.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !!-----------------------------------------------------------------------------------------
    @Test
    subroutine test_resize_element__allocated(self)
        class(test_cache_data_field),    intent(inout)   :: self
        
        integer(ik)                 :: idomain, ielem
        type(cache_data_field_t) :: cache_data_field

        idomain = 1
        ielem   = 14


        !
        ! Call resize routine. THIS IS BEING TESTED.
        !
        call cache_data_field%resize('Test Field','element',                        &
                                                  self%chidg%data%mesh,             &
                                                  self%chidg%data%eqnset(:)%prop,   &
                                                  idomain,                          &
                                                  ielem,                            &
                                                  differentiate=.true.)


        !
        ! Test that the cache allocated the correct component
        !
        @assertEqual(cache_data_field%name,'Test Field')
        @assertTrue(allocated(cache_data_field%value))
        @assertTrue(allocated(cache_data_field%gradient))
        @assertTrue(allocated(cache_data_field%lift_face))
        @assertTrue(allocated(cache_data_field%lift_element))
        
    end subroutine test_resize_element__allocated
    !******************************************************************************************





    !>  Test 'element' case for expected array sizes.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/7/2016
    !!
    !!-----------------------------------------------------------------------------------------
    @Test
    subroutine test_resize_element__size(self)
        class(test_cache_data_field),    intent(inout)   :: self
        
        integer(ik)                 :: idomain, ielem, nnodes_face, nnodes_vol
        type(cache_data_field_t) :: cache_data_field

        idomain = 1
        ielem   = 14


        !
        ! Call resize routine. THIS IS BEING TESTED.
        !
        call cache_data_field%resize('Test Field','element',                        &
                                                  self%chidg%data%mesh,             &
                                                  self%chidg%data%eqnset(:)%prop,   &
                                                  idomain,                          &
                                                  ielem,                            &
                                                  differentiate=.true.)


        !
        ! Test that the cache allocated the correct component
        !
        nnodes_vol  = self%chidg%data%mesh%domain(idomain)%elems(ielem)%basis_s%nnodes_elem()
        nnodes_face = self%chidg%data%mesh%domain(idomain)%elems(ielem)%basis_s%nnodes_face()

        ! Number of nodes
        @assertEqual(size(cache_data_field%value,1), nnodes_vol)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%value,2), 7)

        ! Number of nodes
        @assertEqual(size(cache_data_field%gradient,1), nnodes_vol)
        ! Number of spatial dimentions
        @assertEqual(size(cache_data_field%gradient,2), 3)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%gradient,3), 7)

        ! Number of nodes
        @assertEqual(size(cache_data_field%lift_face,1), nnodes_face)
        @assertEqual(size(cache_data_field%lift_element,1), nnodes_vol)
        ! Number of spatial dimentions
        @assertEqual(size(cache_data_field%lift_face,2), 3)
        @assertEqual(size(cache_data_field%lift_element,2), 3)
        ! Number of dependent elements
        @assertEqual(size(cache_data_field%lift_face,3), 7)
        @assertEqual(size(cache_data_field%lift_element,3), 7)
        
    end subroutine test_resize_element__size
    !******************************************************************************************





















end module test_cache_data_field_mod
