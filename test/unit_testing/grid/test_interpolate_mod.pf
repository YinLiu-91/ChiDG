module test_interpolate_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_element_info,          only: element_info_t, element_info
    use type_function_info,         only: function_info_t
    use type_function,              only: function_t
    use type_domain_connectivity,   only: domain_connectivity_t


    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                  ME, NEIGHBOR, IO_DESTINATION, VOLUME_ADVECTIVE_FLUX, NO_ID, CARTESIAN, dQ_DIFF
    use mod_function,       only: create_function
    use mod_interpolate,    only: interpolate_face_standard, interpolate_face_autodiff, &
                                  interpolate_element_standard, interpolate_element_autodiff
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file
    use mod_string,         only: string_t
    use mod_chidg_mpi,      only: IRANK
    use mod_DNAD_tools,     only: compute_neighbor_element_l, compute_neighbor_face
    use DNAD_D
    implicit none

    public  :: test_interpolate





    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_interpolate

        type(chidg_t)                   :: chidg
        character(:),       allocatable :: file_name
        class(function_t),  allocatable :: fcn

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_interpolate
    !*****************************************************************************************






contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !---------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_interpolate),    intent(inout)   :: this

        integer(ik)                                 :: ifield
        type(point_t),  allocatable                 :: nodes(:)
        type(domain_connectivity_t)                 :: connectivity
        
        ! Send log to file
        IO_DESTINATION = 'file'
    

        ! Initialize ChiDG environment
        call this%chidg%start_up('core')


        ! Read 3x3x3 element grid
        this%file_name = "D1_3x3x3.h5"
        call create_mesh_file("D1 NxNxN",this%file_name, equation_sets=[string_t('Scalar Advection')], &
                                                         nelem_xi=3, nelem_eta=3, nelem_zeta=3)


        ! Initialize chidg solution data storage
        call this%chidg%set('Solution Order', integer_input=2)


        ! Read grid
        call this%chidg%read_mesh(this%file_name)


        ! Initialized solution to constant values
        ifield = this%chidg%data%eqnset(1)%prop%get_primary_field_index('u')


        ! Initialize variable
        call create_function(this%fcn,'constant')
        call this%fcn%set_option('val',5._rk)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,this%fcn,ifield)

    
    end subroutine setUp
    !*******************************************************************************************
    
    !>
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_interpolate),    intent(inout)   :: this
        

        ! Close ChiDG interface
        call this%chidg%shut_down('core')

        ! Clean-up test file
        call delete_file(this%file_name)

        
    end subroutine tearDown
    !*******************************************************************************************




    !> Test interpolation of modes to volume quadrature nodes. No AD variables
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test
    subroutine test_interpolate_element_standard(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ifield, ngq, idomain, itime
        real(rk), allocatable       :: u_gq(:), u_ref(:)
        real(rk)                    :: tol, val
        

        tol     = 1.e-13_rk
        idomain = 1
        ielem   = 14
        ifield  = 1
        itime   = 1


        ngq = self%chidg%data%mesh%domain(1)%elems(ielem)%basis_s%nnodes_elem()


        allocate(u_gq(ngq), &
                 u_ref(ngq))


        !
        ! PROCEDURE BEING TESTED
        !
        u_gq = interpolate_element_standard(self%chidg%data%mesh, self%chidg%data%sdata%q, idomain, ielem, ifield, itime, 'value')



        ! Initialize reference
        val   = self%fcn%get_option_value('val')
        u_ref = val


        ! Test that standard interpolation to quadrature 
        ! on an element volume is producing expected results
        @assertEqual(u_ref,u_gq,tol)

    end subroutine test_interpolate_element_standard
    !*******************************************************************************************
    
    
    
    
    
    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test
    subroutine test_interpolate_face_standard(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, idomain, itime
        real(rk), allocatable       :: u_gq(:), u_ref(:)
        real(rk)                    :: tol, val
        
        
        
        tol   = 1.e-13_rk
        idomain = 1
        ielem   = 14
        iface   = 1
        ifield  = 1
        itime   = 1

        ngq = self%chidg%data%mesh%domain(1)%faces(ielem,iface)%basis_s%nnodes_face()

        allocate(u_gq(ngq))
        allocate(u_ref(ngq))
        
        !
        ! PROCEDURE BEING TESTED
        !
        u_gq = interpolate_face_standard(self%chidg%data%mesh,self%chidg%data%sdata%q,idomain,ielem,iface,ifield,itime)
        
        
        ! Initialize reference
        val = self%fcn%get_option_value('val')
        u_ref = val
        
        ! Test that standard interpolation to quadrature 
        ! on an element volume is producing expected results
        @assertEqual(u_ref,u_gq,tol)
        
        
    end subroutine test_interpolate_face_standard
    !******************************************************************************************





    !------------------------------------------------------------------------------------------
    !                               ELEMENT - volume interpolation - Autodiff
    !------------------------------------------------------------------------------------------


    !> Interpolation of modes to volume quadrature nodes. Seeding neighbor element. Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__values__neighbor(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ielem_s, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, q => self%chidg%data%sdata%q, rhs => self%chidg%data%sdata%rhs )

            idomain = 1
            ielem   = 14    ! given element
            itime   = 1

            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            function_info%dtype   = dQ_DIFF

            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 15,    &
                                         ielement_l   = 15,    &
                                         nfields      = 1,     &
                                         nterms_s     = 8,     &
                                         nnodes_r     = 8,     &
                                         iproc        = IRANK, &
                                         itime        = itime, &
                                         dof_start    = 112,   &
                                         xdof_start   = 337,   &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)

            tol   = 1.e-13_rk
            ifield  = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq   = elems(ielem)%basis_s%nnodes_elem()

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            elem_info = self%chidg%data%mesh%get_element_info(idomain,ielem)

            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ifield, itime, 'value')
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val

            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__values__neighbor
    !*****************************************************************************************



    !>  Interpolation of modes to volume quadrature nodes. Seeding neighbor element. Testing 
    !!  derivative values.
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__derivs__neighbor(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ifield, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, q => self%chidg%data%sdata%q, &
                    rhs => self%chidg%data%sdata%rhs )

            idomain = 1     ! domain index
            ielem   = 14    ! given element index
            itime   = 1

            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            function_info%dtype   = dQ_DIFF
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 15,    &
                                         ielement_l   = 15,    &
                                         nfields      = 1,     &
                                         nterms_s     = 8,     &
                                         nnodes_r     = 8,     &
                                         iproc        = IRANK, &
                                         itime        = itime, &
                                         dof_start    = 112,   &
                                         xdof_start   = 337,   &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)


            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = elems(ielem)%basis_s%nnodes_elem()
            nderiv = elems(ielem)%nfields * elems(ielem)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            elem_info = self%chidg%data%mesh%get_element_info(idomain,ielem)

            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ifield, itime, 'value')
            
            
            ! Initialize reference
            deriv_ref = ZERO    !> all derivatives should be zero, since the neightboring element is being seeded 
            
            
            ! Test that the derivatives for each gq variable are zero
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(ngq)%xp_ad_,tol)
            end do
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__derivs__neighbor
    !*****************************************************************************************
    
    
    
    
    
    
    !>  Interpolation of modes to volume quadrature nodes. Seeding neighbor current. 
    !!  Testing function values.    
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__values__current(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, q => self%chidg%data%sdata%q, &
                    rhs => self%chidg%data%sdata%rhs )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            itime   = 1


            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            function_info%dtype   = dQ_DIFF
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 14,    &
                                         ielement_l   = 14,    &
                                         nfields      = 1,     &
                                         nterms_s     = 8,     &
                                         nnodes_r     = 8,     &
                                         iproc        = IRANK, &
                                         itime        = itime, &
                                         dof_start    = 104,   &
                                         xdof_start   = 337,   &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)


            tol  = 1.e-13_rk
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = elems(ielem)%basis_s%nnodes_elem()        ! Number of quadrature nodes
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            elem_info = self%chidg%data%mesh%get_element_info(idomain,ielem)

            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ifield,itime,'value')
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__values__current
    !******************************************************************************************








    !>  Interpolation of modes to volume quadrature nodes. Seeding neighbor current. Testing 
    !!  derivative values.
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__derivs__current(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ifield, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:), val(:,:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, q => self%chidg%data%sdata%q, &
                    rhs => self%chidg%data%sdata%rhs )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            itime   = 1


            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            function_info%dtype   = dQ_DIFF
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 14,    &
                                         ielement_l   = 14,    &
                                         nfields      = 1,     &
                                         nterms_s     = 8,     &
                                         nnodes_r     = 8,     &
                                         iproc        = IRANK, &
                                         itime        = itime, &
                                         dof_start    = 104,   &
                                         xdof_start   = 337,   &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)


            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = elems(ielem)%basis_s%nnodes_elem()          ! Number of quadrature nodes
            nderiv = elems(ielem)%nfields * elems(ielem)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            elem_info = self%chidg%data%mesh%get_element_info(idomain,ielem)

            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ifield,itime,'value')
            
            
            ! Initialize reference
            deriv_ref    = ZERO         ! all derivatives should be zero, since the neighboring element is being seeded 
            
            
            ! Test that the derivatives for each gq variable are zero
            val = elems(ielem)%basis_s%interpolator_element('Value')
            do igq = 1,ngq
                !deriv_ref = elems(ielem)%gq%vol%val(igq,:)      ! Set expected derivatives. Here it turns out to be the igq row of the quadrature matrix
                deriv_ref = val(igq,:)                      ! Set expected derivatives. Here it turns out to be the igq row of the quadrature matrix
                                                            ! This is because the seeded derivatives are one, so the values are not amplified.
                
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                deriv_ref = ZERO                                ! Reset to zero
            end do
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__derivs__current
    !******************************************************************************************
    
    
    
    
    
    
    
    
    !-----------------------------------------------------------------------------------------
    !                               Face - surface interpolation - Autodiff
    !-----------------------------------------------------------------------------------------
        
        
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idA(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, &
                    faces => self%chidg%data%mesh%domain(1)%faces, &
                    q     => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, this is a neighbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 15,    &
                                    ielement_l   = 15,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 112,   &
                                    xdof_start   = 337,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof    = NO_ID)



            tol  = 1.e-13_rk
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%basis_s%nnodes_face()

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',ME)
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val

            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idA
    !******************************************************************************************
    
    
    
    
    
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idB(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1


            !
            ! A seed element, this is a neihgbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 15,    &
                                    ielement_l   = 15,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 112,   &
                                    xdof_start   = 337,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)



            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof    = NO_ID)


            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%basis_s%nnodes_face()
            nderiv = faces(ielem,iface)%nfields * faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',ME)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded 
            ! with a neighbor element.
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idB
    !******************************************************************************************
    






    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idC(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 14,    &
                                    ielement_l   = 14,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 104,   &
                                    xdof_start   = 313,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof    = NO_ID)




            tol  = 1.e-13_rk
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%basis_s%nnodes_face()
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',ME)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idC
    !*******************************************************************************************
    
    
    
    
    


    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idD(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, igq, ngq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:), val(:,:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 14,    &
                                    ielement_l   = 14,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 104,   &
                                    xdof_start   = 313,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof    = NO_ID)

            
            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%basis_s%nnodes_face()
            nderiv = faces(ielem,iface)%nfields * faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',ME)
              
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            val = faces(ielem,iface)%basis_s%interpolator_face('Value',iface)
            do igq = 1,ngq
                ! Set expected derivatives
                !deriv_ref = faces(ielem,iface)%gq%face%val(igq,:,iface)
                deriv_ref = val(igq,:)
                
                ! Test derivatives
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                ! Reset to zero
                deriv_ref = ZERO
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idD
    !******************************************************************************************








    
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idE(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, this is a neighbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 15,    &
                                    ielement_l   = 15,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 112,   &
                                    xdof_start   = 337,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof     = NO_ID)


            tol  = 1.e-13_rk
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%basis_s%nnodes_face()

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
            
            
            ! Initialize reference
            val   = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idE
    !*****************************************************************************************
    
    
    
    
    
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idF(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, &
                    faces => self%chidg%data%mesh%domain(1)%faces, &
                    q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1


            !
            ! A seed element, this is a neihgbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 15,    &
                                    ielement_l   = 15,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 112,   &
                                    xdof_start   = 337,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)

            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof    = NO_ID)



            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%basis_s%nnodes_face()
            nderiv = faces(ielem,iface)%nfields * faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded 
            ! with a neighbor element.
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idF
    !******************************************************************************************
    






    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idG(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, &
                    faces => self%chidg%data%mesh%domain(1)%faces, &
                    q => self%chidg%data%sdata%q )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 13,    &
                                    ielement_l   = 13,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 96,    &
                                    xdof_start   = 289,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof     = NO_ID)


            tol  = 1.e-13_rk
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%basis_s%nnodes_face()
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idG
    !******************************************************************************************
    
    
    
    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction derivatives. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idH(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, igq, ngq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:), val(:,:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info

        integer(ik)                 :: ielem_n, iface_n, idonor
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1
            idonor  = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            fcn_info%dtype   = dQ_DIFF
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 13,    &
                                    ielement_l   = 13,    &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 96,    &
                                    xdof_start   = 289,   &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g  = idomain,  &
                                     idomain_l  = idomain,  &
                                     ielement_g = ielem,    &
                                     ielement_l = ielem,    &
                                     iproc      = 0,        &
                                     pelem_ID   = NO_ID,    &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID     = 1,        &
                                     nfields    = 1,        &
                                     ntime      = 1,        &
                                     nterms_s   = 8,        &
                                     nterms_c   = 8,        &
                                     dof_start  = 104,      &
                                     dof_local_start = 104, &
                                     xdof_start  = 104,      &
                                     xdof_local_start = 104, &
                                     recv_comm    = NO_ID,  &
                                     recv_domain  = NO_ID,  &
                                     recv_element = NO_ID,  &
                                     recv_dof     = NO_ID,  &
                                     recv_xdof     = NO_ID)

            
            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%basis_s%nnodes_face()
            nderiv = faces(ielem,iface)%nfields * faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
              
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            ielem_n = compute_neighbor_element_l(self%chidg%data%mesh,idomain,ielem,iface,idonor)
            iface_n = compute_neighbor_face(     self%chidg%data%mesh,idomain,ielem,iface,idonor)


            val = faces(ielem_n,iface_n)%basis_s%interpolator_face('Value',iface_n)
            do igq = 1,ngq
                ! Set expected derivatives
                !deriv_ref = faces(ielem_n,iface_n)%gq%face%val(igq,:,iface_n)
                deriv_ref = val(igq,:)
                
                ! Test derivatives
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                ! Reset to zero
                deriv_ref = ZERO
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idH
    !******************************************************************************************












end module test_interpolate_mod
