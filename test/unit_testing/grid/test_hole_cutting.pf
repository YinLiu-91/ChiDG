@Test
subroutine test_hole_cutting_cylinder_single_grid()
#include <messenger.h>
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use mod_constants,              only: ZERO, ONE, TWO, PI
    use mod_kinds,                  only: rk, ik
    use mod_chidg_mpi,              only: ChiDG_COMM
    use mod_tioga_interfaces,       only: tioga_init_f90, tioga_registergrid_data_mb, tioga_preprocess_grids, &
                                          tioga_performconnectivity, tioga_reduce_fringes
    use mod_gridspace,              only: linspace
    use iso_c_binding,              only: c_int, c_double, c_ptr, c_null_ptr, c_loc
    use hole_cutting_test_grids,    only: create_cylinder_single_grid
    implicit none

    integer(c_int), target :: bid1, btag1, nnodes1, nwall_nodes1, noverset_nodes1, nelement_types1, nvertices_per_element1, nelements1
    integer(c_int), target :: bid2, btag2, nnodes2, nwall_nodes2, noverset_nodes2, nelement_types2, nvertices_per_element2, nelements2

    real(c_double), allocatable, dimension(:),      target  :: xyz1, xyz2, radii, thetas, zs, xs, ys
    integer(c_int), allocatable, dimension(:,:),    target  :: connectivity1, connectivity2
    integer(c_int), allocatable, dimension(:),      target  :: iblank1, iblank2, wall_nodes1, wall_nodes2, overset_nodes1, overset_nodes2

    integer(c_int)  :: nnodes_xi, nnodes_eta, nnodes_zeta, inode, inode_xi, inode_eta, inode_zeta, iwall_node, ioverset_node, &
                       nelem_xi, nelem_eta, nelem_zeta, ielem, ielem_xi, ielem_eta, ielem_zeta, node_start, ierr

    type(c_ptr) :: connectivity1_p, xyz1_p, iblank1_p, wall_nodes1_p, overset_nodes1_p
    type(c_ptr) :: connectivity2_p, xyz2_p, iblank2_p, wall_nodes2_p, overset_nodes2_p

    real(c_double) :: r_in, r_out, r, theta, z, x, y, x_max, x_min, y_max, y_min, z_max, z_min, tol
    
    type(chidg_t)   :: chidg
    logical :: passing


    call chidg%start_up('mpi')
    call chidg%start_up('core')


    ! Initialize tioga library
    call tioga_init_f90(ChiDG_COMM)


    ! Cartesian background grid
    !
    !           Grid 1
    !
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  | 
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !
    !------------------------------
    ! Block 1
    bid1  = 1
    btag1 = 1
    nnodes_xi   = 50
    nnodes_eta  = 50
    nnodes_zeta = 3
    nelem_xi   = nnodes_xi-1
    nelem_eta  = nnodes_eta-1
    nelem_zeta = nnodes_zeta-1
    nnodes1    = nnodes_xi * nnodes_eta * nnodes_zeta
    nelements1 = nelem_xi  * nelem_eta  * nelem_zeta
    nwall_nodes1    = 0
    noverset_nodes1 = 0
    nelement_types1 = 1
    nvertices_per_element1 = 8

    allocate(xyz1(3*nnodes1), iblank1(nnodes1), wall_nodes1(nwall_nodes1), overset_nodes1(noverset_nodes1), connectivity1(nvertices_per_element1,nelements1), stat=ierr)
    if (ierr /= 0) call AllocationError

    x_min  = -2._rk
    x_max  =  2._rk
    y_min  = -2._rk
    y_max  =  2._rk
    z_min  =  0._rk
    z_max  =  1._rk

    xs = real(linspace(real(x_min,rk),real(x_max,rk),int(nnodes_xi,  ik)), c_double)
    ys = real(linspace(real(y_min,rk),real(y_max,rk),int(nnodes_eta, ik)), c_double)
    zs = real(linspace(real(z_min,rk),real(z_max,rk),int(nnodes_zeta,ik)), c_double)


    inode = 1
    do inode_zeta = 1,nnodes_zeta
        do inode_eta = 1,nnodes_eta
            do inode_xi = 1,nnodes_xi

                x = xs(inode_xi)
                y = ys(inode_eta)
                z = zs(inode_zeta)
                xyz1(3*inode-2) = xs(inode_xi)
                xyz1(3*inode-1) = ys(inode_eta)
                xyz1(3*inode-0) = zs(inode_zeta)

                ! Next
                inode = inode + 1

            end do
        end do
    end do


    ! Assemble element connectivities
    do ielem_zeta = 1,nelem_zeta
        do ielem_eta = 1,nelem_eta
            do ielem_xi = 1,nelem_xi
                ielem = (nelem_xi*nelem_eta)*(ielem_zeta-1) + (nelem_xi)*(ielem_eta-1) + ielem_xi
                node_start = (nnodes_xi*nnodes_eta)*(ielem_zeta-1) + (nnodes_xi)*(ielem_eta-1) + ielem_xi
                connectivity1(1,ielem) = node_start
                connectivity1(2,ielem) = node_start + 1
                connectivity1(3,ielem) = node_start + nnodes_xi + 1
                connectivity1(4,ielem) = node_start + nnodes_xi
                connectivity1(5,ielem) = node_start + (nnodes_xi*nnodes_eta)
                connectivity1(6,ielem) = node_start + (nnodes_xi*nnodes_eta) + 1
                connectivity1(7,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi + 1
                connectivity1(8,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi
            end do
        end do
    end do

    ! Body-fitted cylinder-grid
    !
    !           Grid 2
    !
    !          .------.
    !         /        \
    !        .   .--.   .
    !        |   |  |   |
    !        .   .--.   .
    !         \        /
    !          .------.
    !
    !------------------------------
    ! Block 2
    bid2  = 2
    btag2 = 2
    nnodes_xi   = 500
    nnodes_eta  = 500
    nnodes_zeta = 3
    nelem_xi   = nnodes_xi-1
    nelem_eta  = nnodes_eta-1
    nelem_zeta = nnodes_zeta-1
    nnodes2    = nnodes_xi * nnodes_eta * nnodes_zeta
    nelements2 = nelem_xi  * nelem_eta  * nelem_zeta
    nwall_nodes2    = nnodes_eta*nnodes_zeta
    noverset_nodes2 = nnodes_eta*nnodes_zeta
    nelement_types2 = 1
    nvertices_per_element2 = 8


    allocate(xyz2(3*nnodes2), iblank2(nnodes2), wall_nodes2(nwall_nodes2), overset_nodes2(noverset_nodes2), connectivity2(nvertices_per_element2,nelements2),stat=ierr)
    if (ierr /= 0) call AllocationError


    r_in   = 0.5
    r_out  = 1.5
    radii  = real(linspace(real(r_in,rk),real(r_out,rk),int(nnodes_xi,  ik)), c_double)
    thetas = real(linspace(ZERO,         TWO*PI,        int(nnodes_eta, ik)), c_double)
    zs     = real(linspace(ZERO,         ONE,           int(nnodes_zeta,ik)), c_double)


    ! Assemble nodes
    inode         = 1
    iwall_node    = 1
    ioverset_node = 1
    do inode_zeta = 1,nnodes_zeta
        do inode_eta = 1,nnodes_eta
            do inode_xi = 1,nnodes_xi

                ! Store coordinates
                r     = radii(inode_xi)
                theta = thetas(inode_eta)
                z     = zs(inode_zeta)
                xyz2(3*inode-2) = r*cos(theta)
                xyz2(3*inode-1) = r*sin(theta)
                xyz2(3*inode-0) = z

                ! Store wall, overset node lists
                if (inode_xi == 1) then
                    wall_nodes2(iwall_node) = inode
                    iwall_node = iwall_node + 1
                end if
                if (inode_xi == nnodes_xi) then
                    overset_nodes2(ioverset_node) = inode
                    ioverset_node = ioverset_node + 1
                end if

                ! Next
                inode = inode + 1
            end do
        end do
    end do

    ! Assemble element connectivities
    do ielem_zeta = 1,nelem_zeta
        do ielem_eta = 1,nelem_eta
            do ielem_xi = 1,nelem_xi
                ielem = (nelem_xi*nelem_eta)*(ielem_zeta-1) + (nelem_xi)*(ielem_eta-1) + ielem_xi
                node_start = (nnodes_xi*nnodes_eta)*(ielem_zeta-1) + (nnodes_xi)*(ielem_eta-1) + ielem_xi
                connectivity2(1,ielem) = node_start
                connectivity2(2,ielem) = node_start + 1
                connectivity2(3,ielem) = node_start + nnodes_xi + 1
                connectivity2(4,ielem) = node_start + nnodes_xi
                connectivity2(5,ielem) = node_start + (nnodes_xi*nnodes_eta)
                connectivity2(6,ielem) = node_start + (nnodes_xi*nnodes_eta) + 1
                connectivity2(7,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi + 1
                connectivity2(8,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi
            end do
        end do
    end do





    connectivity1_p  = c_loc(connectivity1(1,1))
    xyz1_p           = c_loc(xyz1(1))
    iblank1_p        = c_loc(iblank1(1))
    wall_nodes1_p    = c_loc(wall_nodes1(1))
    overset_nodes1_p = c_loc(overset_nodes1(1))

    connectivity2_p  = c_loc(connectivity2(1,1))
    xyz2_p           = c_loc(xyz2(1))
    iblank2_p        = c_loc(iblank2(1))
    wall_nodes2_p    = c_loc(wall_nodes2(1))
    overset_nodes2_p = c_loc(overset_nodes2(1))

    ! Register blocks
    call tioga_registergrid_data_mb(bid1, btag1, nnodes1, xyz1_p, iblank1_p, nwall_nodes1, noverset_nodes1, wall_nodes1_p, overset_nodes1_p, nelement_types1, nvertices_per_element1, nelements1, connectivity1_p)
    call tioga_registergrid_data_mb(bid2, btag2, nnodes2, xyz2_p, iblank2_p, nwall_nodes2, noverset_nodes2, wall_nodes2_p, overset_nodes2_p, nelement_types2, nvertices_per_element2, nelements2, connectivity2_p)



    !
    ! Run tioga: direct cut
    !
    call tioga_preprocess_grids()
    call tioga_performconnectivity()


    ! Check that all nodes outside the cylinder are valid and all nodes inside the cylinder are cut
    tol = 1.e-16_rk
    do inode = 1,nnodes1
        x = xyz1(3*inode-2)
        y = xyz1(3*inode-1)
        r = sqrt(x*x + y*y)

        if (r < (0.5_rk-tol) ) then
            passing = (iblank1(inode) == 0)
            if (.not. passing) print*, x,y,r, iblank1(inode)
            call assertTrue(passing)
        else if (r >= (0.5_rk-tol) ) then
            passing = ( (iblank1(inode) == 1) .or. (iblank1(inode) == -1))
            if (.not. passing) print*, x,y,r, iblank1(inode)
            call assertTrue(passing)
        end if

    end do

    ! All nodes should be field nodes. None should be cut.
    do inode = 1,nnodes2
        x = xyz2(3*inode-2)
        y = xyz2(3*inode-1)
        r = sqrt(x*x + y*y)

        passing = (iblank2(inode) == 1) .or. (iblank2(inode) == -1)
        if (.not. passing) print*, x,y,r, iblank2(inode)
        call assertTrue(passing)

    end do



    !
    ! Reduce fringes: implicit cut
    !
    call tioga_reduce_fringes()


    ! Check that all nodes outside the cylinder are valid. Cannot really say more than
    ! this, since fringe nodes have been retagged as holes.
    tol = 1.e-16_rk
    do inode = 1,nnodes1
        x = xyz1(3*inode-2)
        y = xyz1(3*inode-1)
        r = sqrt(x*x + y*y)

        if (r > (1.5_rk-tol) ) then
            passing = (iblank1(inode) == 1)
            if (.not. passing) print*, x,y,r, iblank1(inode)
            call assertTrue(passing)
        end if

    end do

    ! All nodes should be field or fringe nodes. None should have been cut in the fringe
    ! reduction, since they are smaller volume elements.
    do inode = 1,nnodes2
        x = xyz2(3*inode-2)
        y = xyz2(3*inode-1)
        r = sqrt(x*x + y*y)

        passing = (iblank2(inode) == 1) .or. (iblank2(inode) == -1)
        if (.not. passing) print*, x,y,r, iblank2(inode)
        call assertTrue(passing)

    end do

end subroutine test_hole_cutting_cylinder_single_grid



@Test
subroutine test_hole_cutting_cylinder_overlap_grid()
#include <messenger.h>
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use mod_constants,              only: ZERO, ONE, TWO, PI
    use mod_kinds,                  only: rk, ik
    use mod_chidg_mpi,              only: ChiDG_COMM
    use mod_tioga_interfaces,       only: tioga_init_f90, tioga_registergrid_data_mb, tioga_preprocess_grids, &
                                          tioga_performconnectivity, tioga_reduce_fringes
    use mod_gridspace,              only: linspace
    use iso_c_binding,              only: c_int, c_double, c_ptr, c_null_ptr, c_loc
    use hole_cutting_test_grids,    only: create_cylinder_single_grid
    implicit none

    integer(c_int), target :: bid1, btag1, nnodes1, nwall_nodes1, noverset_nodes1, nelement_types1, nvertices_per_element1, nelements1
    integer(c_int), target :: bid2, btag2, nnodes2, nwall_nodes2, noverset_nodes2, nelement_types2, nvertices_per_element2, nelements2
    integer(c_int), target :: bid3, btag3, nnodes3, nwall_nodes3, noverset_nodes3, nelement_types3, nvertices_per_element3, nelements3
    integer(c_int), target :: bidc, btagc, nnodesc, nwall_nodesc, noverset_nodesc, nelement_typesc, nvertices_per_elementc, nelementsc

    real(c_double), allocatable, dimension(:),      target  :: xyz1, xyz2, xyz3, xyzc, radii, thetas, zs, xs, ys
    integer(c_int), allocatable, dimension(:,:),    target  :: connectivity1, connectivity2, connectivity3, connectivityc
    integer(c_int), allocatable, dimension(:),      target  :: iblank1, iblank2, iblank3, iblankc, &
                                                               wall_nodes1, wall_nodes2, wall_nodes3, wall_nodesc, &
                                                               overset_nodes1, overset_nodes2, overset_nodes3, overset_nodesc

    integer(c_int)  :: nnodes_xi, nnodes_eta, nnodes_zeta, inode, inode_xi, inode_eta, inode_zeta, iwall_node, ioverset_node, &
                       nelem_xi, nelem_eta, nelem_zeta, ielem, ielem_xi, ielem_eta, ielem_zeta, node_start, ierr

    type(c_ptr) :: connectivity1_p, xyz1_p, iblank1_p, wall_nodes1_p, overset_nodes1_p
    type(c_ptr) :: connectivity2_p, xyz2_p, iblank2_p, wall_nodes2_p, overset_nodes2_p
    type(c_ptr) :: connectivity3_p, xyz3_p, iblank3_p, wall_nodes3_p, overset_nodes3_p
    type(c_ptr) :: connectivityc_p, xyzc_p, iblankc_p, wall_nodesc_p, overset_nodesc_p

    real(c_double) :: r_in, r_out, r, theta, z, x, y, x_max, x_min, y_max, y_min, z_max, z_min, tol
    
    type(chidg_t)   :: chidg
    logical :: passing


    call chidg%start_up('mpi')
    call chidg%start_up('core')


    ! Initialize tioga library
    call tioga_init_f90(ChiDG_COMM)


    ! Cartesian background grid
    !
    !           Grid 1
    !
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  | 
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !
    !------------------------------
    bid1  = 1
    btag1 = 1
    nnodes_xi   = 200
    nnodes_eta  = 200
    nnodes_zeta = 3
    nelem_xi   = nnodes_xi-1
    nelem_eta  = nnodes_eta-1
    nelem_zeta = nnodes_zeta-1
    nnodes1    = nnodes_xi * nnodes_eta * nnodes_zeta
    nelements1 = nelem_xi  * nelem_eta  * nelem_zeta
    nwall_nodes1    = 0
    noverset_nodes1 = 0
    nelement_types1 = 1
    nvertices_per_element1 = 8

    allocate(xyz1(3*nnodes1), iblank1(nnodes1), wall_nodes1(nwall_nodes1), overset_nodes1(noverset_nodes1), connectivity1(nvertices_per_element1,nelements1))


    x_min  = -2._rk
    x_max  =  2._rk
    y_min  = -2._rk
    y_max  =  2._rk
    z_min  =  0._rk
    z_max  =  1._rk

    xs = real(linspace(real(x_min,rk),real(x_max,rk),int(nnodes_xi,  ik)), c_double)
    ys = real(linspace(real(y_min,rk),real(y_max,rk),int(nnodes_eta, ik)), c_double)
    zs = real(linspace(real(z_min,rk),real(z_max,rk),int(nnodes_zeta,ik)), c_double)


    inode = 1
    do inode_zeta = 1,nnodes_zeta
        do inode_eta = 1,nnodes_eta
            do inode_xi = 1,nnodes_xi

                x = xs(inode_xi)
                y = ys(inode_eta)
                z = zs(inode_zeta)
                xyz1(3*inode-2) = xs(inode_xi)
                xyz1(3*inode-1) = ys(inode_eta)
                xyz1(3*inode-0) = zs(inode_zeta)

                ! Next
                inode = inode + 1

            end do
        end do
    end do


    ! Assemble element connectivities
    do ielem_zeta = 1,nelem_zeta
        do ielem_eta = 1,nelem_eta
            do ielem_xi = 1,nelem_xi
                ielem = (nelem_xi*nelem_eta)*(ielem_zeta-1) + (nelem_xi)*(ielem_eta-1) + ielem_xi
                node_start = (nnodes_xi*nnodes_eta)*(ielem_zeta-1) + (nnodes_xi)*(ielem_eta-1) + ielem_xi
                connectivity1(1,ielem) = node_start
                connectivity1(2,ielem) = node_start + 1
                connectivity1(3,ielem) = node_start + nnodes_xi + 1
                connectivity1(4,ielem) = node_start + nnodes_xi
                connectivity1(5,ielem) = node_start + (nnodes_xi*nnodes_eta)
                connectivity1(6,ielem) = node_start + (nnodes_xi*nnodes_eta) + 1
                connectivity1(7,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi + 1
                connectivity1(8,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi
            end do
        end do
    end do

    ! Block 2
    bid2  = 2
    btag2 = 2
    nnodes_xi   = 200
    nnodes_eta  = 100
    nnodes_zeta = 3
    nelem_xi   = nnodes_xi-1
    nelem_eta  = nnodes_eta-1
    nelem_zeta = nnodes_zeta-1
    nnodes2    = nnodes_xi * nnodes_eta * nnodes_zeta
    nelements2 = nelem_xi  * nelem_eta  * nelem_zeta
    nwall_nodes2    = nnodes_eta*nnodes_zeta
    noverset_nodes2 = nnodes_eta*nnodes_zeta
    nelement_types2 = 1
    nvertices_per_element2 = 8


    allocate(xyz2(3*nnodes2), iblank2(nnodes2), wall_nodes2(nwall_nodes2), overset_nodes2(noverset_nodes2), connectivity2(nvertices_per_element2,nelements2),stat=ierr)
    if (ierr /= 0) call AllocationError


    r_in   = 0.5
    r_out  = 1.5
    radii  = real(linspace(real(r_in,rk),real(r_out,rk),int(nnodes_xi,  ik)), c_double)
    thetas = real(linspace(ZERO,         PI,            int(nnodes_eta, ik)), c_double)
    zs     = real(linspace(ZERO,         ONE,           int(nnodes_zeta,ik)), c_double)


    ! Assemble nodes
    inode         = 1
    iwall_node    = 1
    ioverset_node = 1
    do inode_zeta = 1,nnodes_zeta
        do inode_eta = 1,nnodes_eta
            do inode_xi = 1,nnodes_xi
                r     = radii(inode_xi)
                theta = thetas(inode_eta)
                z     = zs(inode_zeta)
                xyz2(3*inode-2) = r*cos(theta)
                xyz2(3*inode-1) = r*sin(theta)
                xyz2(3*inode-0) = z

                ! Store wall, overset node lists
                if (inode_xi == 1) then
                    wall_nodes2(iwall_node) = inode
                    iwall_node = iwall_node + 1
                end if
                if (inode_xi == nnodes_xi) then
                    overset_nodes2(ioverset_node) = inode
                    ioverset_node = ioverset_node + 1
                end if

                ! Next
                inode = inode + 1
            end do
        end do
    end do

    ! Assemble element connectivities
    do ielem_zeta = 1,nelem_zeta
        do ielem_eta = 1,nelem_eta
            do ielem_xi = 1,nelem_xi
                ielem = (nelem_xi*nelem_eta)*(ielem_zeta-1) + (nelem_xi)*(ielem_eta-1) + ielem_xi
                node_start = (nnodes_xi*nnodes_eta)*(ielem_zeta-1) + (nnodes_xi)*(ielem_eta-1) + ielem_xi
                connectivity2(1,ielem) = node_start
                connectivity2(2,ielem) = node_start + 1
                connectivity2(3,ielem) = node_start + nnodes_xi + 1
                connectivity2(4,ielem) = node_start + nnodes_xi
                connectivity2(5,ielem) = node_start + (nnodes_xi*nnodes_eta)
                connectivity2(6,ielem) = node_start + (nnodes_xi*nnodes_eta) + 1
                connectivity2(7,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi + 1
                connectivity2(8,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi
            end do
        end do
    end do

    ! Block 3
    bid3  = 3
    btag3 = 3
    nnodes_xi   = 200
    nnodes_eta  = 100
    nnodes_zeta = 3
    nelem_xi   = nnodes_xi-1
    nelem_eta  = nnodes_eta-1
    nelem_zeta = nnodes_zeta-1
    nnodes3    = nnodes_xi * nnodes_eta * nnodes_zeta
    nelements3 = nelem_xi  * nelem_eta  * nelem_zeta
    nwall_nodes3    = nnodes_eta*nnodes_zeta
    noverset_nodes3 = nnodes_eta*nnodes_zeta
    nelement_types3 = 1
    nvertices_per_element3 = 8


    allocate(xyz3(3*nnodes3), iblank3(nnodes3), wall_nodes3(nwall_nodes3), overset_nodes3(noverset_nodes3), connectivity3(nvertices_per_element3,nelements3),stat=ierr)
    if (ierr /= 0) call AllocationError


    r_in   = 0.5
    r_out  = 1.5
    radii  = real(linspace(real(r_in,rk),real(r_out,rk),int(nnodes_xi,  ik)), c_double)
    thetas = real(linspace(PI-0.1,       TWO*PI+0.1,    int(nnodes_eta, ik)), c_double)
    zs     = real(linspace(ZERO,         ONE,           int(nnodes_zeta,ik)), c_double)


    ! Assemble nodes
    inode         = 1
    iwall_node    = 1
    ioverset_node = 1
    do inode_zeta = 1,nnodes_zeta
        do inode_eta = 1,nnodes_eta
            do inode_xi = 1,nnodes_xi
                r     = radii(inode_xi)
                theta = thetas(inode_eta)
                z     = zs(inode_zeta)
                xyz3(3*inode-2) = r*cos(theta)
                xyz3(3*inode-1) = r*sin(theta)
                xyz3(3*inode-0) = z

                ! Store wall, overset node lists
                if (inode_xi == 1) then
                    wall_nodes3(iwall_node) = inode
                    iwall_node = iwall_node + 1
                end if
                if (inode_xi == nnodes_xi) then
                    overset_nodes3(ioverset_node) = inode
                    ioverset_node = ioverset_node + 1
                end if

                ! Next
                inode = inode + 1
            end do
        end do
    end do

    ! Assemble element connectivities
    do ielem_zeta = 1,nelem_zeta
        do ielem_eta = 1,nelem_eta
            do ielem_xi = 1,nelem_xi
                ielem = (nelem_xi*nelem_eta)*(ielem_zeta-1) + (nelem_xi)*(ielem_eta-1) + ielem_xi
                node_start = (nnodes_xi*nnodes_eta)*(ielem_zeta-1) + (nnodes_xi)*(ielem_eta-1) + ielem_xi
                connectivity3(1,ielem) = node_start
                connectivity3(2,ielem) = node_start + 1
                connectivity3(3,ielem) = node_start + nnodes_xi + 1
                connectivity3(4,ielem) = node_start + nnodes_xi
                connectivity3(5,ielem) = node_start + (nnodes_xi*nnodes_eta)
                connectivity3(6,ielem) = node_start + (nnodes_xi*nnodes_eta) + 1
                connectivity3(7,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi + 1
                connectivity3(8,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi
            end do
        end do
    end do



    ! Agglomerate component grids:   gridc = [grid2, grid3]
    !
    ! NOTE: Need to offset connectivity indices
    !
    !   Grid 2 | Grid 2            Grid C (omponent)
    !
    !     /---. .---\                 /---. .---\      
    !    /    | |    \               /    | |    \
    !   /   --. .--   \             /   --. .--   \
    !   |   |     |   |     --->    |   |     |   |
    !   \   --. .--   /             \   --. .--   /
    !    \    | |    /               \    | |    /
    !     \---. .---/                 \---. .---/
    !
    !-------------------------------------------------------------
    xyzc           = [xyz2, xyz3]
    wall_nodesc    = [wall_nodes2,    nnodes2 + wall_nodes3]
    overset_nodesc = [overset_nodes2, nnodes2 + overset_nodes3]
    iblankc        = [iblank2, iblank3]

    nnodesc         = nnodes2         + nnodes3
    nwall_nodesc    = nwall_nodes2    + nwall_nodes3
    noverset_nodesc = noverset_nodes2 + noverset_nodes3
    nelementsc      = nelements2      + nelements3
    nvertices_per_elementc = nvertices_per_element2

    allocate(connectivityc(nvertices_per_elementc,nelementsc), stat=ierr)
    if (ierr /= 0) call AllocationError
    connectivityc(:,1:nelements2)  = connectivity2
    connectivityc(:,nelements2+1:) = nnodes2 + connectivity3


    connectivity1_p  = c_loc(connectivity1(1,1))
    xyz1_p           = c_loc(xyz1(1))
    iblank1_p        = c_loc(iblank1(1))
    wall_nodes1_p    = c_loc(wall_nodes1(1))
    overset_nodes1_p = c_loc(overset_nodes1(1))

    connectivity2_p  = c_loc(connectivity2(1,1))
    xyz2_p           = c_loc(xyz2(1))
    iblank2_p        = c_loc(iblank2(1))
    wall_nodes2_p    = c_loc(wall_nodes2(1))
    overset_nodes2_p = c_loc(overset_nodes2(1))

    connectivity3_p  = c_loc(connectivity3(1,1))
    xyz3_p           = c_loc(xyz3(1))
    iblank3_p        = c_loc(iblank3(1))
    wall_nodes3_p    = c_loc(wall_nodes3(1))
    overset_nodes3_p = c_loc(overset_nodes3(1))

    connectivityc_p  = c_loc(connectivityc(1,1))
    xyzc_p           = c_loc(xyzc(1))
    iblankc_p        = c_loc(iblankc(1))
    wall_nodesc_p    = c_loc(wall_nodesc(1))
    overset_nodesc_p = c_loc(overset_nodesc(1))

    ! Register background grid and agglomerated component grid
    call tioga_registergrid_data_mb(bid1, btag1, nnodes1, xyz1_p, iblank1_p, nwall_nodes1, noverset_nodes1, wall_nodes1_p, overset_nodes1_p, nelement_types1, nvertices_per_element1, nelements1, connectivity1_p)
    call tioga_registergrid_data_mb(bidc, btagc, nnodesc, xyzc_p, iblankc_p, nwall_nodesc, noverset_nodesc, wall_nodesc_p, overset_nodesc_p, nelement_typesc, nvertices_per_elementc, nelementsc, connectivityc_p)


    ! Run tioga
    call tioga_preprocess_grids()
    call tioga_performconnectivity()



    ! Check that all nodes outside the cylinder are valid and all nodes inside the cylinder are cut
    tol = 1.e-16_rk
    do inode = 1,nnodes1
        x = xyz1(3*inode-2)
        y = xyz1(3*inode-1)
        r = sqrt(x*x + y*y)

        if (r < (0.5_rk-tol) ) then
            passing = (iblank1(inode) == 0)
            if (.not. passing) print*, x,y,r, iblank1(inode)
            call assertTrue(passing)
        else if (r >= (0.5_rk-tol) ) then
            passing = ( (iblank1(inode) == 1) .or. (iblank1(inode) == -1))
            if (.not. passing) print*, x,y,r, iblank1(inode)
            call assertTrue(passing)
        end if

    end do

    ! All nodes should be field nodes. None should be cut.
    do inode = 1,nnodesc
        x = xyzc(3*inode-2)
        y = xyzc(3*inode-1)
        r = sqrt(x*x + y*y)

        passing = (iblankc(inode) == 1) .or. (iblankc(inode) == -1)
        if (.not. passing) print*, x,y,r, iblankc(inode)
        call assertTrue(passing)

    end do



    !
    ! Reduce fringes: implicit cut
    !
    call tioga_reduce_fringes()


    ! Check that all nodes outside the cylinder are valid. Cannot really say more than
    ! this, since fringe nodes have been retagged as holes.
    tol = 1.e-16_rk
    do inode = 1,nnodes1
        x = xyz1(3*inode-2)
        y = xyz1(3*inode-1)
        r = sqrt(x*x + y*y)

        if (r > (1.5_rk-tol) ) then
            passing = (iblank1(inode) == 1)
            if (.not. passing) print*, x,y,r, iblank1(inode)
            call assertTrue(passing)
        end if

    end do

    ! All nodes should be field or fringe nodes. None should have been cut in the fringe
    ! reduction, since they are smaller volume elements.
    do inode = 1,nnodesc
        x = xyzc(3*inode-2)
        y = xyzc(3*inode-1)
        r = sqrt(x*x + y*y)

        passing = (iblankc(inode) == 1) .or. (iblankc(inode) == -1)
        if (.not. passing) print*, x,y,r, iblankc(inode)
        call assertTrue(passing)

    end do





end subroutine test_hole_cutting_cylinder_overlap_grid







! Test hole-cutting of finer grid set in background coarser grid.
!
!
!   .--.--.--.--.--.--.--.--.
!   |  |  |  |  |  |  |  |  |
!   .--.--.--.--.--.--.--.--.
!   |  |  |  .......  |  |  |
!   .--.--.--.......--.--.--.
!   |  |  |  .......  |  |  |
!   .--.--.--.......--.--.--.
!   |  |  |  |  |  |  |  |  |
!   .--.--.--.--.--.--.--.--.
!   |  |  |  |  |  |  |  |  |
!   .--.--.--.--.--.--.--.--.
!-------------------------------------------------------------------------
@Test
subroutine test_hole_cutting_overlapping_interior_grids()
#include <messenger.h>
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use mod_constants,              only: ZERO, ONE, TWO, PI
    use mod_kinds,                  only: rk, ik
    use mod_chidg_mpi,              only: ChiDG_COMM
    use mod_tioga_interfaces,       only: tioga_init_f90, tioga_registergrid_data_mb, tioga_preprocess_grids, &
                                          tioga_performconnectivity, tioga_reduce_fringes
    use mod_gridspace,              only: linspace
    use iso_c_binding,              only: c_int, c_double, c_ptr, c_null_ptr, c_loc
    use hole_cutting_test_grids,    only: create_cylinder_single_grid
    implicit none

    integer(c_int), target :: bid1, btag1, nnodes1, nwall_nodes1, noverset_nodes1, nelement_types1, nvertices_per_element1, nelements1
    integer(c_int), target :: bid2, btag2, nnodes2, nwall_nodes2, noverset_nodes2, nelement_types2, nvertices_per_element2, nelements2

    real(c_double), allocatable, dimension(:),      target  :: xyz1, xyz2, radii, thetas, zs, xs, ys
    integer(c_int), allocatable, dimension(:,:),    target  :: connectivity1, connectivity2
    integer(c_int), allocatable, dimension(:),      target  :: iblank1, iblank2, wall_nodes1, wall_nodes2, overset_nodes1, overset_nodes2

    integer(c_int)  :: nnodes_xi, nnodes_eta, nnodes_zeta, inode, inode_xi, inode_eta, inode_zeta, iwall_node, ioverset_node, &
                       nelem_xi, nelem_eta, nelem_zeta, ielem, ielem_xi, ielem_eta, ielem_zeta, node_start, ierr

    type(c_ptr) :: connectivity1_p, xyz1_p, iblank1_p, wall_nodes1_p, overset_nodes1_p
    type(c_ptr) :: connectivity2_p, xyz2_p, iblank2_p, wall_nodes2_p, overset_nodes2_p

    real(c_double) :: r_in, r_out, r, theta, z, x, y, x_max, x_min, y_max, y_min, z_max, z_min, tol
    
    type(chidg_t)   :: chidg
    logical :: passing


    call chidg%start_up('mpi')
    call chidg%start_up('core')


    ! Initialize tioga library
    call tioga_init_f90(ChiDG_COMM)


    ! Cartesian background grid
    !
    !           Grid 1
    !
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  | 
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !   |  |  |  |  |  |  |  |  |
    !   .--.--.--.--.--.--.--.--.
    !
    !------------------------------
    ! Block 1
    bid1  = 1
    btag1 = 1
    nnodes_xi   = 50
    nnodes_eta  = 50
    nnodes_zeta = 3
    nelem_xi   = nnodes_xi-1
    nelem_eta  = nnodes_eta-1
    nelem_zeta = nnodes_zeta-1
    nnodes1    = nnodes_xi * nnodes_eta * nnodes_zeta
    nelements1 = nelem_xi  * nelem_eta  * nelem_zeta
    nwall_nodes1    = 0
    noverset_nodes1 = 0
    nelement_types1 = 1
    nvertices_per_element1 = 8

    allocate(xyz1(3*nnodes1), iblank1(nnodes1), wall_nodes1(nwall_nodes1), overset_nodes1(noverset_nodes1), connectivity1(nvertices_per_element1,nelements1), stat=ierr)
    if (ierr /= 0) call AllocationError

    x_min  = -2._rk
    x_max  =  2._rk
    y_min  = -2._rk
    y_max  =  2._rk
    z_min  =  0._rk
    z_max  =  1._rk

    xs = real(linspace(real(x_min,rk),real(x_max,rk),int(nnodes_xi,  ik)), c_double)
    ys = real(linspace(real(y_min,rk),real(y_max,rk),int(nnodes_eta, ik)), c_double)
    zs = real(linspace(real(z_min,rk),real(z_max,rk),int(nnodes_zeta,ik)), c_double)


    inode = 1
    do inode_zeta = 1,nnodes_zeta
        do inode_eta = 1,nnodes_eta
            do inode_xi = 1,nnodes_xi

                x = xs(inode_xi)
                y = ys(inode_eta)
                z = zs(inode_zeta)
                xyz1(3*inode-2) = xs(inode_xi)
                xyz1(3*inode-1) = ys(inode_eta)
                xyz1(3*inode-0) = zs(inode_zeta)

                ! Next
                inode = inode + 1

            end do
        end do
    end do


    ! Assemble element connectivities
    do ielem_zeta = 1,nelem_zeta
        do ielem_eta = 1,nelem_eta
            do ielem_xi = 1,nelem_xi
                ielem = (nelem_xi*nelem_eta)*(ielem_zeta-1) + (nelem_xi)*(ielem_eta-1) + ielem_xi
                node_start = (nnodes_xi*nnodes_eta)*(ielem_zeta-1) + (nnodes_xi)*(ielem_eta-1) + ielem_xi
                connectivity1(1,ielem) = node_start
                connectivity1(2,ielem) = node_start + 1
                connectivity1(3,ielem) = node_start + nnodes_xi + 1
                connectivity1(4,ielem) = node_start + nnodes_xi
                connectivity1(5,ielem) = node_start + (nnodes_xi*nnodes_eta)
                connectivity1(6,ielem) = node_start + (nnodes_xi*nnodes_eta) + 1
                connectivity1(7,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi + 1
                connectivity1(8,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi
            end do
        end do
    end do



    ! Cartesian background grid
    !
    !           Grid 2
    !
    !                            
    !                            
    !                            
    !            .......         
    !            .......         
    !            .......          
    !            .......         
    !                            
    !                            
    !                            
    !                            
    !
    !------------------------------
    ! Block 2
    bid2  = 2
    btag2 = 2
    nnodes_xi   = 50
    nnodes_eta  = 50
    nnodes_zeta = 3
    nelem_xi   = nnodes_xi-1
    nelem_eta  = nnodes_eta-1
    nelem_zeta = nnodes_zeta-1
    nnodes2    = nnodes_xi * nnodes_eta * nnodes_zeta
    nelements2 = nelem_xi  * nelem_eta  * nelem_zeta
    nwall_nodes2    = 0
    noverset_nodes2 = nnodes_xi*2*nnodes_zeta + (nnodes_eta-2)*2*nnodes_zeta
    nelement_types2 = 1
    nvertices_per_element2 = 8

    allocate(xyz2(3*nnodes2), iblank2(nnodes2), wall_nodes2(nwall_nodes2), overset_nodes2(noverset_nodes2), connectivity2(nvertices_per_element2,nelements2), stat=ierr)
    if (ierr /= 0) call AllocationError

    x_min  = -1._rk
    x_max  =  1._rk
    y_min  = -1._rk
    y_max  =  1._rk
    z_min  =  0._rk
    z_max  =  1._rk

    xs = real(linspace(real(x_min,rk),real(x_max,rk),int(nnodes_xi,  ik)), c_double)
    ys = real(linspace(real(y_min,rk),real(y_max,rk),int(nnodes_eta, ik)), c_double)
    zs = real(linspace(real(z_min,rk),real(z_max,rk),int(nnodes_zeta,ik)), c_double)


    inode = 1
    ioverset_node = 1
    do inode_zeta = 1,nnodes_zeta
        do inode_eta = 1,nnodes_eta
            do inode_xi = 1,nnodes_xi

                x = xs(inode_xi)
                y = ys(inode_eta)
                z = zs(inode_zeta)
                xyz2(3*inode-2) = xs(inode_xi)
                xyz2(3*inode-1) = ys(inode_eta)
                xyz2(3*inode-0) = zs(inode_zeta)

                if ( (inode_xi == 1) .or. (inode_xi == nnodes_xi) .or. &
                     (inode_eta == 1) .or. (inode_eta == nnodes_eta) ) then
                     overset_nodes2(ioverset_node) = inode
                     ioverset_node = ioverset_node + 1
                end if

                ! Next
                inode = inode + 1

            end do
        end do
    end do


    ! Assemble element connectivities
    do ielem_zeta = 1,nelem_zeta
        do ielem_eta = 1,nelem_eta
            do ielem_xi = 1,nelem_xi
                ielem = (nelem_xi*nelem_eta)*(ielem_zeta-1) + (nelem_xi)*(ielem_eta-1) + ielem_xi
                node_start = (nnodes_xi*nnodes_eta)*(ielem_zeta-1) + (nnodes_xi)*(ielem_eta-1) + ielem_xi
                connectivity2(1,ielem) = node_start
                connectivity2(2,ielem) = node_start + 1
                connectivity2(3,ielem) = node_start + nnodes_xi + 1
                connectivity2(4,ielem) = node_start + nnodes_xi
                connectivity2(5,ielem) = node_start + (nnodes_xi*nnodes_eta)
                connectivity2(6,ielem) = node_start + (nnodes_xi*nnodes_eta) + 1
                connectivity2(7,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi + 1
                connectivity2(8,ielem) = node_start + (nnodes_xi*nnodes_eta) + nnodes_xi
            end do
        end do
    end do




    connectivity1_p  = c_loc(connectivity1(1,1))
    xyz1_p           = c_loc(xyz1(1))
    iblank1_p        = c_loc(iblank1(1))
    wall_nodes1_p    = c_loc(wall_nodes1(1))
    overset_nodes1_p = c_loc(overset_nodes1(1))

    connectivity2_p  = c_loc(connectivity2(1,1))
    xyz2_p           = c_loc(xyz2(1))
    iblank2_p        = c_loc(iblank2(1))
    wall_nodes2_p    = c_loc(wall_nodes2(1))
    overset_nodes2_p = c_loc(overset_nodes2(1))

    ! Register blocks
    call tioga_registergrid_data_mb(bid1, btag1, nnodes1, xyz1_p, iblank1_p, nwall_nodes1, noverset_nodes1, wall_nodes1_p, overset_nodes1_p, nelement_types1, nvertices_per_element1, nelements1, connectivity1_p)
    call tioga_registergrid_data_mb(bid2, btag2, nnodes2, xyz2_p, iblank2_p, nwall_nodes2, noverset_nodes2, wall_nodes2_p, overset_nodes2_p, nelement_types2, nvertices_per_element2, nelements2, connectivity2_p)



    ! Run tioga
    call tioga_preprocess_grids()
    call tioga_performconnectivity()
    call tioga_reduce_fringes()


    ! Check that all nodes outside the inner-resolved-block are valid
    tol = 1.e-16_rk
    do inode = 1,nnodes1
        x = xyz1(3*inode-2)
        y = xyz1(3*inode-1)
        r = sqrt(x*x + y*y)

        if ( ((x > TWO) .or. (x < -TWO)) .and. ((y > TWO) .or. (y < -TWO)) ) then
            passing = (iblank1(inode) == 1) 
            if (.not. passing) print*, x,y,r, iblank1(inode)
            call assertTrue(passing)
        end if

    end do

    ! Check that all elements on the refined grid are either field or fringe elements.
    do inode = 1,nnodes2
        x = xyz2(3*inode-2)
        y = xyz2(3*inode-1)
        r = sqrt(x*x + y*y)

        passing = (iblank2(inode) == 1) .or. (iblank2(inode) == -1)
        if (.not. passing) print*, x,y,r, iblank2(inode)
        call assertTrue(passing)

    end do
    
end subroutine test_hole_cutting_overlapping_interior_grids











