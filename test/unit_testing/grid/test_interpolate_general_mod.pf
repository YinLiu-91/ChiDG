module test_interpolate_general_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_function_info,         only: function_info_t
    use type_function,              only: function_t

    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                  ME, NEIGHBOR, IO_DESTINATION, VOLUME_ADVECTIVE_FLUX, CARTESIAN
    use mod_function,       only: create_function
    use mod_interpolate,    only: interpolate_general_autodiff
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file
    use mod_string,         only: string_t
    use mod_chidg_mpi,      only: IRANK, NRANK
    use mpi_f08,            only: MPI_COMM
    use mod_io,             only: gq_rule
    use DNAD_D
    implicit none

    public  :: test_interpolate_general



    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @date   2/25/2018
    !!
    !-------------------------------------------------------------------------------
    @TestCase
    type, extends(MpiTestCase) :: test_interpolate_general

        type(chidg_t)                   :: chidg
        character(:),       allocatable :: file_name
        class(function_t),  allocatable :: fcn
        type(mpi_comm)                  :: ChiDG_COMM
        integer(ik)                     :: gq_rule_original

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type test_interpolate_general
    !*******************************************************************************








contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !---------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_interpolate_general),    intent(inout)   :: this

        integer(ik) :: ifield

        this%gq_rule_original = gq_rule
        gq_rule = 3

        !
        ! Get MPI communicator information from pFUnit
        !
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        !
        ! Initialize ChiDG environment
        !
        call this%chidg%start_up('mpi',this%ChiDG_COMM)
        call this%chidg%start_up('core')


        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'


        !
        ! Read 3x3x3 element grid.
        !
        ! NOTE: offseting the grid here to start at (5,5,5) because starting at
        ! (0,0,0) gives a big variation in the solution since it is the radius
        ! function. So, we would have needed higher-order accuracy to capture this.
        ! Offsetting to (5,5,5) reduces the variations to be more benign so we
        ! can run at lower order for the test.
        !
        this%file_name = "D1_3x3x3.h5"
        call create_mesh_file("D1 NxNxN",                                   &
                              this%file_name,                               &
                              equation_sets=[string_t('Scalar Advection')], &
                              nelem_xi=3,                                   &
                              nelem_eta=3,                                  &
                              nelem_zeta=3,                                 &
                              x_min_in = 2000._rk, x_max_in = 3000._rk, y_min_in=2000._rk, y_max_in=3000._rk, z_min_in=2000._rk, z_max_in=3000._rk)


        !
        ! Initialize chidg solution data storage
        !
        call this%chidg%set('Solution Order', integer_input=5)


        !
        ! Read grid
        !
        call this%chidg%read_mesh(this%file_name)



        !
        ! Initialized solution to constant values
        !
        ifield = this%chidg%data%eqnset(1)%prop%get_primary_field_index('u')


        !
        ! Initialize variable
        !
        call create_function(this%fcn,'radius')
        !call this%fcn%set_option('val',5._rk)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,this%fcn,ifield)

    
    end subroutine setUp
    !*******************************************************************************************
    

    !>
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_interpolate_general),    intent(inout)   :: this
        

        ! Close ChiDG interface
        call this%chidg%shut_down('core')

        ! Clean-up test file
        call delete_file(this%file_name)

        ! Reset gq_rule
        gq_rule = this%gq_rule_original

    end subroutine tearDown
    !*******************************************************************************************





    !------------------------------------------------------------------------------------------
    !                               ELEMENT - volume interpolation - Autodiff
    !------------------------------------------------------------------------------------------


    !> Interpolation of modes to volume quadrature nodes. Seeding neighbor element. Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    !@Test(npes=[1,4,7])
    @Test(npes=[1])
    subroutine test__interpolate_general_autodiff(self)
        class(test_interpolate_general),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ielem_s, ifield, idomain, itime, nnodes
        type(AD_D), allocatable     :: u(:)
        real(rk),   allocatable     :: u_ref(:), physical_nodes(:,:)
        real(rk)                    :: tol, val
        type(function_info_t)       :: function_info
        
        
        associate ( q => self%chidg%data%sdata%q )

            tol     = 1.e-9_rk
            idomain = 1
            ielem   = 14
            itime   = 1

            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 15,    &
                                         ielement_l   = 15,    &
                                         nfields      = 1,     &
                                         nterms_s     = 8,     &
                                         nnodes_r     = 8,     &
                                         iproc        = IRANK, &
                                         itime        = itime, &
                                         dof_start    = 112,   & 
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)


            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            nnodes = 4
            allocate(u(nnodes), u_ref(nnodes), physical_nodes(nnodes,3))
            physical_nodes(1,:) = [2500._rk,   2500._rk,   2500._rk  ]
            physical_nodes(2,:) = [2600.25_rk, 2600.35_rk, 2600.75_rk]
            physical_nodes(3,:) = [2700.55_rk, 2700.55_rk, 2700.95_rk]
            physical_nodes(4,:) = [2800.05_rk, 2800.65_rk, 2800.85_rk]
            

            !
            ! PROCEDURE BEING TESTED
            !
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            u = interpolate_general_autodiff(self%chidg%data%mesh,self%chidg%data%sdata%q,function_info,ifield,itime,'value',physical_nodes)
            

            !
            ! Compute reference values
            !
            u_ref(1) = sqrt(physical_nodes(1,1)*physical_nodes(1,1) + physical_nodes(1,2)*physical_nodes(1,2) + physical_nodes(1,3)*physical_nodes(1,3))
            u_ref(2) = sqrt(physical_nodes(2,1)*physical_nodes(2,1) + physical_nodes(2,2)*physical_nodes(2,2) + physical_nodes(2,3)*physical_nodes(2,3))
            u_ref(3) = sqrt(physical_nodes(3,1)*physical_nodes(3,1) + physical_nodes(3,2)*physical_nodes(3,2) + physical_nodes(3,3)*physical_nodes(3,3))
            u_ref(4) = sqrt(physical_nodes(4,1)*physical_nodes(4,1) + physical_nodes(4,2)*physical_nodes(4,2) + physical_nodes(4,3)*physical_nodes(4,3))


            u_ref = u_ref/1000._rk
            u     = u/1000._rk
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u(:)%x_ad_,tol)
            
        end associate
        

    end subroutine test__interpolate_general_autodiff
    !*****************************************************************************************


    
    
    
    

end module test_interpolate_general_mod
