module test_interpolate_chimera_multipledonor_mod
    use pfunit_mod
    use type_chidg,         only: chidg_t
    use type_point,         only: point_t
    use type_meshdata,      only: meshdata_t
    use type_element_info,  only: element_info_t, element_info
    use type_function_info, only: function_info_t
    use mod_bc,             only: create_bc


    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                  NEIGHBOR, IO_DESTINATION, NO_ID, CARTESIAN
    use mod_chidg_mpi,      only: IRANK
    use mod_interpolate,    only: interpolate_face_autodiff, interpolate_face_standard
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file

    use DNAD_D

    use type_function,      only: function_t
    use mod_function,       only: create_function
    implicit none

    public  :: test_interpolate_chimera_multipledonor

    
    !>
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !-----------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_interpolate_chimera_multipledonor

        character(:),       allocatable :: filename
        type(chidg_t)                   :: chidg
        class(function_t),  allocatable :: fcn_info

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_interpolate_chimera_multipledonor
    !******************************************************************************


contains

    !>  NOTE: make sure to use 'this' instead of 'self' since these are over-writting 
    !!  a derived type procedure. The argument names have to match
    !!
    !!
    !------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: this

        integer(ik)                     :: ifield, idom
        type(meshdata_t),   allocatable :: meshdata(:) 
        
        ! Send log to file
        IO_DESTINATION = 'file'
    
        ! Initialize ChiDG environment
        call this%chidg%start_up('core')


        ! Create mesh file
        this%filename = "D2E8M1_overlapping_multipledonor.h5"
        call create_mesh_file("D2 E8 M1 : Overlapping : NonMatching",this%filename)


        ! Set the order of accuracy for the solution
        call this%chidg%set('Solution Order', integer_input=2)


        ! Read D2_E8_M1. Two domains, 2x2x2 elements in each domain, linear mapping
        call this%chidg%read_mesh(this%filename)


        ! Initialized solution to constant values
        ifield = this%chidg%data%eqnset(1)%prop%get_primary_field_index('u')   ! Get variable index


        ! Initialize variable
        call create_function(this%fcn_info,'constant')                  ! Allocate constant function
        call this%fcn_info%set_option('val',5._rk)                      ! Set constant function value
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,this%fcn_info,ifield)

    
    end subroutine setUp
    !*******************************************************************************************
    


    !>
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: this
        
        ! Close ChiDG interface
        call this%chidg%shut_down('core')

        ! Clear up file
        call delete_file(this%filename)

    end subroutine tearDown
    !********************************************************************************************



    
    
        
    !-------------------------------------------------------------------------------------------
    !                               Face - surface interpolation - Autodiff
    !-------------------------------------------------------------------------------------------
        
    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__values__idE(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face
            itime   = 1


            !
            ! A seed element, this is a neighbor for this test - so all derivative arrays 
            ! should be seeded to zero
            !
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 2,     &
                                    ielement_l   = 2,     &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 8,     &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)



            !
            ! Set face
            !
            elem_info = element_info(idomain_g       = idomain, &
                                     idomain_l       = idomain, &
                                     ielement_g      = ielem,   &
                                     ielement_l      = ielem,   &
                                     iproc           = 0,       &
                                     pelem_ID        = NO_ID,   &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID          = 1,       &
                                     nfields         = 1,       &
                                     ntime           = 1,       &
                                     nterms_s        = 8,       &
                                     nterms_c        = 8,       &
                                     dof_start       = 1,       &
                                     dof_local_start = 1,       &
                                     recv_comm       = NO_ID,   &
                                     recv_domain     = NO_ID,   &
                                     recv_element    = NO_ID,   &
                                     recv_dof        = NO_ID)



            tol  = 1.e-13_rk
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%basis_s%nnodes_face()


            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            

            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
            
            
            ! Initialize reference
            val = self%fcn_info%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__values__idE
    !******************************************************************************************
    
    
    
    
    
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__derivatives__idF(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face
            itime   = 1


            !
            ! A seed element, this is the current element. Since we are performing a 
            ! NEIGHBOR interpolation, derivatives should be zero.
            !
            call fcn_info%seed%init(idomain_g    = 1,     &
                                    idomain_l    = 1,     &
                                    ielement_g   = 2,     &
                                    ielement_l   = 2,     &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 8,     &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)

            !
            ! Set face
            !
            elem_info = element_info(idomain_g       = idomain, &
                                     idomain_l       = idomain, &
                                     ielement_g      = ielem,   &
                                     ielement_l      = ielem,   &
                                     iproc           = 0,       &
                                     pelem_ID        = NO_ID,   &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID          = 1,       &
                                     nfields         = 1,       &
                                     ntime           = 1,       &
                                     nterms_s        = 8,       &
                                     nterms_c        = 8,       &
                                     dof_start       = 1,       &
                                     dof_local_start = 1,       &
                                     recv_comm       = NO_ID,   &
                                     recv_domain     = NO_ID,   &
                                     recv_element    = NO_ID,   &
                                     recv_dof        = NO_ID)


            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%basis_s%nnodes_face()
            nderiv = faces(ielem,iface)%nfields * faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded 
            ! with a neighbor element.
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__derivatives__idF
    !******************************************************************************************








    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__values__idG(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q )
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face
            itime   = 1

            !
            ! A seed element, neighbor to ielem/iface. Performing NEIGHBOR interpolation so 
            ! all dervative arrays should be nonzero.
            !
            call fcn_info%seed%init(idomain_g    = 2,     &
                                    idomain_l    = 2,     &
                                    ielement_g   = 1,     &
                                    ielement_l   = 1,     &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 40,    &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g       = idomain, &
                                     idomain_l       = idomain, &
                                     ielement_g      = ielem,   &
                                     ielement_l      = ielem,   &
                                     iproc           = 0,       &
                                     pelem_ID        = NO_ID,   &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID          = 1,       &
                                     nfields         = 1,       &
                                     ntime           = 1,       &
                                     nterms_s        = 8,       &
                                     nterms_c        = 8,       &
                                     dof_start       = 1,       &
                                     dof_local_start = 1,       &
                                     recv_comm    = NO_ID,      &
                                     recv_domain  = NO_ID,      &
                                     recv_element = NO_ID,      &
                                     recv_dof     = NO_ID)


            tol  = 1.e-13_rk
            ifield = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%basis_s%nnodes_face()
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn_info%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__values__idG
    !******************************************************************************************
    
    
    
    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction derivatives. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__derivatives__idH(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ifield, igq, ngq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        real(rk),   allocatable     :: mat(:,:)
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: fcn_info

        integer(ik)                 :: idonor, ChiID, ndonor_nodes, node_index
        
        
        associate ( elems => self%chidg%data%mesh%domain(1)%elems, faces => self%chidg%data%mesh%domain(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face
            itime   = 1
            idonor  = 1

            ChiID = self%chidg%data%mesh%domain(idomain)%faces(ielem,iface)%ChiID

            !
            ! A seed element, neighbor to ielem/iface. Performing NEIGHBOR interpolation so all 
            ! dervative arrays should be nonzero.
            !
            call fcn_info%seed%init(idomain_g    = 2,     &
                                    idomain_l    = 2,     &
                                    ielement_g   = 1,     &
                                    ielement_l   = 1,     &
                                    nfields      = 1,     &
                                    nterms_s     = 8,     &
                                    nnodes_r     = 8,     &
                                    iproc        = IRANK, &
                                    itime        = itime, &
                                    dof_start    = 40,    &
                                    recv_comm    = 0,     &
                                    recv_domain  = 0,     &
                                    recv_element = 0)


            !
            ! Set face
            !
            elem_info = element_info(idomain_g       = idomain, &
                                     idomain_l       = idomain, &
                                     ielement_g      = ielem,   &
                                     ielement_l      = ielem,   &
                                     iproc           = 0,       &
                                     pelem_ID        = NO_ID,   &
                                     coordinate_system = CARTESIAN, &
                                     eqn_ID          = 1,       &
                                     nfields         = 1,       &
                                     ntime           = 1,       &
                                     nterms_s        = 8,       &
                                     nterms_c        = 8,       &
                                     dof_start       = 1,       &
                                     dof_local_start = 1,       &
                                     recv_comm    = NO_ID,      &
                                     recv_domain  = NO_ID,      &
                                     recv_element = NO_ID,      &
                                     recv_dof     = NO_ID)



            
            tol    = 1.e-13_rk
            ifield   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%basis_s%nnodes_face()
            nderiv = faces(ielem,iface)%nfields * faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,elem_info,fcn_info,iface,ifield,itime,'value',NEIGHBOR)
              
            

            !
            ! Test derivatives from first donor
            !
            mat = self%chidg%data%mesh%domain(idomain)%chimera%recv(ChiID)%donor(idonor)%value
            ndonor_nodes = size(self%chidg%data%mesh%domain(idomain)%chimera%recv(ChiID)%donor(idonor)%node_index)

            do igq = 1,ndonor_nodes
                node_index = self%chidg%data%mesh%domain(idomain)%chimera%recv(ChiID)%donor(idonor)%node_index(igq)
                deriv_ref = mat(igq,:)     ! Set expected derivatives
                
                @assertEqual(deriv_ref,u_gq(node_index)%xp_ad_,tol)
                
                deriv_ref = ZERO            ! Reset to zero
            end do




            !
            ! Test derivatives from second donor
            !
            idonor = 2
            mat = self%chidg%data%mesh%domain(idomain)%chimera%recv(ChiID)%donor(idonor)%value
            ndonor_nodes = size(self%chidg%data%mesh%domain(idomain)%chimera%recv(ChiID)%donor(idonor)%node_index)

            do igq = 1,ndonor_nodes
                node_index = self%chidg%data%mesh%domain(idomain)%chimera%recv(ChiID)%donor(idonor)%node_index(igq)
                deriv_ref = mat(igq,:)      ! Set expected derivatives
                deriv_ref = ZERO            ! should be zero since donor 1 was being differentiated and this is donor two
                
                @assertEqual(deriv_ref,u_gq(node_index)%xp_ad_,tol)
                
                deriv_ref = ZERO            ! Reset to zero
            end do


        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__derivatives__idH
    !******************************************************************************************













end module test_interpolate_chimera_multipledonor_mod
