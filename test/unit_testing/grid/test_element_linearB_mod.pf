module test_element_linearB_mod
    use pfunit_mod
    use type_chidg,     only: chidg_t
    use mod_kinds,      only: rk,ik
    use mod_chidg_mpi,  only: IRANK
    use mod_constants,  only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, EIGHT, NINE, TEN, &
                              XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, IO_DESTINATION
    use type_face,      only: face_t
    use type_element,   only: element_t
    use type_element_connectivity,  only: element_connectivity_t
    implicit none

    public  :: test_element_linearB


    !>
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !--------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_element_linearB

        type(chidg_t)               :: chidg
        type(element_t)             :: elem
        type(face_t), allocatable   :: faces(:)

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_element_linearB
    !********************************************************************


contains


    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting 
    !! a derived type procedure. The argument names have to match
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_element_linearB),    intent(inout)   :: this
        
        integer(ik), parameter          :: npt = 8
        real(rk)                        :: nodes(npt,3)
        real(rk)                        :: sqrt_two, inv_sqrt_two
        integer(ik)                     :: ftype, ielem, idomain,                                   &
                                           nfields, nterms_s, ntime, dof_start, dof_local_start,    &
                                           ineighbor_domain_g,  ineighbor_domain_l,                 &
                                           ineighbor_element_g, ineighbor_element_l,                &
                                           ineighbor_face, ineighbor_proc,                          &
                                           ineighbor_nfields, ineighbor_ntime,                      &
                                           ineighbor_nterms_s,ineighbor_dof_start,ineighbor_dof_local_start
        
        
        IO_DESTINATION='file'
        call this%chidg%start_up('core')
        allocate(this%faces(6))
        
        
        !> Cube unit element rotated at 45-degrees along the 0,0,0 z-axis
        !!
        !!              *  (0, sqrt(2), 0)
        !!            /   \ 
        !!          /       \
        !!        /           \
        !!       *             *  (1/sqrt(2), 1/sqrt(2), 0)
        !!        \           /
        !!          \       /
        !!            \   /
        !!              *
        !!          (0,0,0)
        !!
        !!
        sqrt_two        = sqrt(2._rk)
        inv_sqrt_two    = 1._rk/sqrt_two
        nodes(1,:) = [0._rk, 0._rk, 0._rk]
        nodes(2,:) = [inv_sqrt_two,inv_sqrt_two, 0._rk]
        nodes(3,:) = [-inv_sqrt_two,inv_sqrt_two, 0._rk]
        nodes(4,:) = [0._rk, sqrt_two, 0._rk]
        nodes(5,:) = [0._rk, 0._rk, 1._rk]
        nodes(6,:) = [inv_sqrt_two,inv_sqrt_two, 1._rk]
        nodes(7,:) = [-inv_sqrt_two,inv_sqrt_two, 1._rk]
        nodes(8,:) = [0._rk, sqrt_two, 1._rk]

        
        
        ! Initialize Element geometry and Numerics
        idomain         = 1
        ielem           = 1
        nfields         = 2
        nterms_s        = 8
        ntime           = 1
        dof_start       = 1
        dof_local_start = 1
        call this%elem%init_geom(nodes        = nodes,                                  &
                                 connectivity = [1, 2, 3, 4, 5, 6, 7, 8],               &
                                 etype        = 1,                                      &
                                 location     = [idomain,idomain,ielem,ielem,IRANK],    &
                                 coord_system = 'Cartesian')
        call this%elem%init_sol('Quadrature',1,nterms_s,nfields,ntime,dof_start,dof_local_start)



        ! Initialize face geometries
        call this%faces(XI_MIN)%init_geom(XI_MIN,this%elem)
        call this%faces(XI_MAX)%init_geom(XI_MAX,this%elem)
        call this%faces(ETA_MIN)%init_geom(ETA_MIN,this%elem)
        call this%faces(ETA_MAX)%init_geom(ETA_MAX,this%elem)
        call this%faces(ZETA_MIN)%init_geom(ZETA_MIN,this%elem)
        call this%faces(ZETA_MAX)%init_geom(ZETA_MAX,this%elem)

        ! Initialize face neighbors
        ftype = 0
        ineighbor_domain_g        = 0
        ineighbor_domain_l        = 0
        ineighbor_element_g       = 0
        ineighbor_element_l       = 0
        ineighbor_proc            = 0
        ineighbor_nfields         = 2
        ineighbor_ntime           = 1
        ineighbor_nterms_s        = 8
        ineighbor_dof_start       = 1
        ineighbor_dof_local_start = 1
        call this%faces(XI_MIN)%set_neighbor(  ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(XI_MAX)%set_neighbor(  ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ETA_MIN)%set_neighbor( ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ETA_MAX)%set_neighbor( ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ZETA_MIN)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ZETA_MAX)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)



        call this%faces(XI_MIN)%init_sol(this%elem)
        call this%faces(XI_MAX)%init_sol(this%elem)
        call this%faces(ETA_MIN)%init_sol(this%elem)
        call this%faces(ETA_MAX)%init_sol(this%elem)
        call this%faces(ZETA_MIN)%init_sol(this%elem)
        call this%faces(ZETA_MAX)%init_sol(this%elem)


    end subroutine setUp
    !**************************************************************************************
    

    !>
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_element_linearB),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !**************************************************************************************






    !>
    !!
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------
    @Test
    subroutine testElement_metric(self)
        class(test_element_linearB),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%elem%basis_s%nnodes_elem())
        real(rk)    :: sqrt_two, inv_sqrt_two, tol
        
        tol = 1.e-13_rk
        sqrt_two = sqrt(2._rk)
        inv_sqrt_two = 1._rk/sqrt_two
        
        test_metric(1,1,:) = inv_sqrt_two/4._rk   /  0.125_rk
        test_metric(2,1,:) = -inv_sqrt_two/4._rk  /  0.125_rk
        test_metric(3,1,:) = 0._rk                /  0.125_rk
        test_metric(1,2,:) = inv_sqrt_two/4._rk   /  0.125_rk
        test_metric(2,2,:) = inv_sqrt_two/4._rk   /  0.125_rk
        test_metric(3,2,:) = 0._rk                /  0.125_rk
        test_metric(1,3,:) = 0._rk                /  0.125_rk
        test_metric(2,3,:) = 0._rk                /  0.125_rk
        test_metric(3,3,:) = 0.25_rk              /  0.125_rk

        @assertEqual(test_metric,self%elem%metric,tol)
        
    end subroutine testElement_metric
    !**************************************************************************************






    !>
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------
    @Test
    subroutine testElement_jinv(self)
        class(test_element_linearB),    intent(inout)   :: self
        real(rk)    :: test_jinv(self%elem%basis_s%nnodes_elem()), tol
        tol = 1.e-13_rk
        
        test_jinv = 1._rk/8._rk
        @assertEqual(test_jinv,self%elem%jinv,tol)
    end subroutine testElement_jinv
    !**************************************************************************************
    
    
    
    !>
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------
    @Test
    subroutine testElement_mass(self)
        class(test_element_linearB),    intent(inout)   :: self
        real(rk)    :: test_mass(self%elem%nterms_s,self%elem%nterms_s)
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        test_mass = ZERO
        test_mass(1,1) = EIGHT
        test_mass(2,2) = EIGHT/THREE
        test_mass(3,3) = EIGHT/THREE
        test_mass(4,4) = EIGHT/THREE
        test_mass(5,5) = EIGHT/NINE
        test_mass(6,6) = EIGHT/NINE
        test_mass(7,7) = EIGHT/NINE
        test_mass(8,8) = EIGHT/27._rk
        
        test_mass = 1._rk/8._rk * test_mass
        
        @assertEqual(test_mass,self%elem%mass,tol)
    end subroutine testElement_mass
    !***************************************************************************************


    !>
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------
    @Test
    subroutine testElement_volume(self)
        class(test_element_linearB),    intent(inout)   :: self

        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        @assertEqual(self%elem%vol,1._rk,tol)

    end subroutine testElement_volume
    !***************************************************************************************




    !------------------------------------------------------------------------------
    !>                                Face tests
    !------------------------------------------------------------------------------


    !>
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_metrics(self)
        class(test_element_linearB),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%faces(XI_MAX)%basis_s%nnodes_face())
        real(rk)    :: sqrt_two, inv_sqrt_two, tol
        
        tol = 1.e-15_rk
        sqrt_two = sqrt(2._rk)
        inv_sqrt_two = 1._rk/sqrt_two
        
        test_metric(1,1,:) = inv_sqrt_two/4._rk     / 0.125_rk
        test_metric(2,1,:) = -inv_sqrt_two/4._rk    / 0.125_rk
        test_metric(3,1,:) = 0._rk                  / 0.125_rk
        test_metric(1,2,:) = inv_sqrt_two/4._rk     / 0.125_rk
        test_metric(2,2,:) = inv_sqrt_two/4._rk     / 0.125_rk
        test_metric(3,2,:) = 0._rk                  / 0.125_rk
        test_metric(1,3,:) = 0._rk                  / 0.125_rk
        test_metric(2,3,:) = 0._rk                  / 0.125_rk
        test_metric(3,3,:) = 0.25_rk                / 0.125_rk
        
        @assertEqual(test_metric,self%faces(XI_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(XI_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MAX)%metric,tol)

    end subroutine testElement_face_metrics
    !****************************************************************************************


    !>
    !!
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_normals(self)
        class(test_element_linearB),    intent(inout)   :: self
        real(rk), dimension(self%faces(XI_MAX)%basis_s%nnodes_face()) :: test_norm_x, test_norm_y, test_norm_z
        real(rk) :: inv_sqrt_two, tol
        
        tol = 1.e-15_rk
        inv_sqrt_two = ONE/sqrt(TWO)
        
        ! XI_MIN
        test_norm_x = -inv_sqrt_two/FOUR
        test_norm_y = -inv_sqrt_two/FOUR
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MIN)%norm(:,3),tol)
        
        ! XI_MAX
        test_norm_x = inv_sqrt_two/FOUR
        test_norm_y = inv_sqrt_two/FOUR
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MAX)%norm(:,3),tol)
        
        ! ETA_MIN
        test_norm_x = inv_sqrt_two/FOUR
        test_norm_y = -inv_sqrt_two/FOUR
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MIN)%norm(:,3),tol)      
        
        ! ETA_MAX
        test_norm_x = -inv_sqrt_two/FOUR
        test_norm_y = inv_sqrt_two/FOUR
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MAX)%norm(:,3),tol)

        ! ZETA_MIN
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = -0.25_rk
        
        @assertEqual(test_norm_x,self%faces(ZETA_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MIN)%norm(:,3),tol)
        
        ! ZETA_MAX
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = 0.25_rk
        
        @assertEqual(test_norm_x,self%faces(ZETA_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MAX)%norm(:,3),tol)
       

    end subroutine testElement_face_normals
    !****************************************************************************************













    !>  Test face areas were computed correctly.
    !!
    !!  Face 1: (1 * 1)
    !!  Face 2: (1 * 1)
    !!  Face 3: (1 * 1)
    !!  Face 4: (1 * 1)
    !!  Face 5: (1 * 1)
    !!  Face 6: (1 * 1)
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_area(self)
        class(test_element_linearB),    intent(inout)   :: self

        real(rk)    :: test_area, tol
        
        tol = 1.e-15_rk
        
        ! XI_MIN
        test_area = ONE
        @assertEqual(test_area,self%faces(XI_MIN)%total_area,tol)
        
        ! XI_MAX
        test_area = ONE
        @assertEqual(test_area,self%faces(XI_MAX)%total_area,tol)
        
        ! ETA_MIN
        test_area = ONE
        @assertEqual(test_area,self%faces(ETA_MIN)%total_area,tol)
        
        ! ETA_MAX
        test_area = ONE
        @assertEqual(test_area,self%faces(ETA_MAX)%total_area,tol)

        ! ZETA_MIN
        test_area = ONE
        @assertEqual(test_area,self%faces(ZETA_MIN)%total_area,tol)
        
        ! ZETA_MAX
        test_area = ONE
        @assertEqual(test_area,self%faces(ZETA_MAX)%total_area,tol)
       

    end subroutine testElement_face_area
    !*******************************************************************************************








end module test_element_linearB_mod
