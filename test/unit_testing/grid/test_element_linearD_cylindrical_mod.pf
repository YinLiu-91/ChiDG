module test_element_linearD_cylindrical_mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_chidg_mpi,              only: IRANK
    use mod_constants,              only: PI, ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use type_chidg,                 only: chidg_t
    use type_element,               only: element_t
    use type_face,                  only: face_t
    use type_element_connectivity,  only: element_connectivity_t
    use mod_io,                     only: gq_rule
    implicit none

    public  :: test_element_linearD


    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !--------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_element_linearD

        type(chidg_t)               :: chidg
        type(element_t)             :: elem
        type(face_t),   allocatable :: faces(:)
        real(rk),       allocatable :: nodes(:,:)

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_element_linearD
    !***************************************************************************


contains

    !>  NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !!  derived type procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_element_linearD),    intent(inout)   :: this
        
        integer(ik), parameter          :: npt = 8
        real(rk)                        :: nodes(npt,3)
        integer(ik)                     :: ftype, ielem, idomain, ntime,                        &
                                           nfields, nterms_s, dof_start, dof_local_start,       &
                                           ineighbor_domain_g,                                  &
                                           ineighbor_domain_l, ineighbor_element_g,             &
                                           ineighbor_element_l, ineighbor_face,                 &
                                           ineighbor_proc, ineighbor_nfields, ineighbor_ntime,  &
                                           ineighbor_nterms_s, ineighbor_dof_start, ineighbor_dof_local_start
        
        
        ! Set collocation quadratur for testing coordinates at quadrature points 
        gq_rule = 1
        
        
        call this%chidg%start_up('core')
        allocate(this%faces(6))
        
        ! !( r = 1-2  ::  theta = 0-pi/2  ::  z = 0-1 )
        !
        ! ( theta = 0-pi/2  ::  r = 1-2  ::  z = 0-1 )
        !           
        !                           theta
        !                           ---_
        !                               >
        !          _-------_ _------_
        !        _-         -_       -_
        !       -             -        -
        !      *              *--------*     ^ r
        !       \   _----_   /        /     /  
        !        \ -      - /        /     /
        !         *        *--------*
        !
        !                    ----> z
        !
        nodes(1,:) = [1._rk, 0._rk,  0._rk]
        nodes(2,:) = [2._rk, 0._rk,  0._rk]
        nodes(3,:) = [2._rk, PI/TWO, 0._rk]
        nodes(4,:) = [1._rk, PI/TWO, 0._rk]
        nodes(5,:) = [1._rk, 0._rk,  1._rk]
        nodes(6,:) = [2._rk, 0._rk,  1._rk]
        nodes(7,:) = [2._rk, PI/TWO, 1._rk]
        nodes(8,:) = [1._rk, PI/TWO, 1._rk]
        this%nodes = nodes

        
        !
        ! Initialize Element geometry and Numerics
        !
        idomain         = 1
        ielem           = 1
        nfields         = 2
        nterms_s        = 8
        ntime           = 1
        dof_start       = 1
        dof_local_start = 1
        call this%elem%init_geom(nodes        = nodes,                                  &
                                 connectivity = [1, 2, 3, 4, 5, 6, 7, 8],               &
                                 etype        = 1,                                      &
                                 location     = [idomain,idomain,ielem,ielem,IRANK],    &
                                 coord_system = 'Cylindrical')
        call this%elem%init_sol('Quadrature',1,nterms_s,nfields,ntime,dof_start,dof_local_start)
        
        
        !
        ! Initialize face geometries
        !
        call this%faces(XI_MIN)%init_geom(XI_MIN,this%elem)
        call this%faces(XI_MAX)%init_geom(XI_MAX,this%elem)
        call this%faces(ETA_MIN)%init_geom(ETA_MIN,this%elem)
        call this%faces(ETA_MAX)%init_geom(ETA_MAX,this%elem)
        call this%faces(ZETA_MIN)%init_geom(ZETA_MIN,this%elem)
        call this%faces(ZETA_MAX)%init_geom(ZETA_MAX,this%elem)


        !
        ! Initialize face neighbors
        !
        ftype = 0
        ineighbor_domain_g        = 0
        ineighbor_domain_l        = 0
        ineighbor_element_g       = 0
        ineighbor_element_l       = 0
        ineighbor_face            = 0
        ineighbor_nfields         = 2
        ineighbor_nterms_s        = 8
        ineighbor_proc            = 0
        ineighbor_dof_start       = 1
        ineighbor_dof_local_start = 1
        call this%faces(XI_MIN)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,               &
                                                   ineighbor_element_g,ineighbor_element_l,             &
                                                   ineighbor_face,ineighbor_nfields,ineighbor_ntime,    &
                                                   ineighbor_nterms_s,ineighbor_proc,                   &
                                                   ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(XI_MAX)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,               &
                                                   ineighbor_element_g,ineighbor_element_l,             &
                                                   ineighbor_face,ineighbor_nfields,ineighbor_ntime,    &
                                                   ineighbor_nterms_s,ineighbor_proc,                   &
                                                   ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ETA_MIN)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,              &
                                                    ineighbor_element_g,ineighbor_element_l,            &
                                                    ineighbor_face,ineighbor_nfields,ineighbor_ntime,   &
                                                    ineighbor_nterms_s,ineighbor_proc,                  &
                                                    ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ETA_MAX)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,              &
                                                    ineighbor_element_g,ineighbor_element_l,            &
                                                    ineighbor_face,ineighbor_nfields,ineighbor_ntime,   &
                                                    ineighbor_nterms_s,ineighbor_proc,                  &
                                                    ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ZETA_MIN)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ZETA_MAX)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)

        
        call this%faces(XI_MIN)%init_sol(this%elem)
        call this%faces(XI_MAX)%init_sol(this%elem)
        call this%faces(ETA_MIN)%init_sol(this%elem)
        call this%faces(ETA_MAX)%init_sol(this%elem)
        call this%faces(ZETA_MIN)%init_sol(this%elem)
        call this%faces(ZETA_MAX)%init_sol(this%elem)

    end subroutine setUp
    !************************************************************************************
    

    !>
    !!
    !!
    !-------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_element_linearD),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !**************************************************************************************





    !> Test volume
    !!
    !!
    !!
    !!---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_volume(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        @assertEqual(THREE*PI/FOUR,self%elem%vol,tol)

    end subroutine testElement_volume
    !*****************************************************************************************



    !> Test element metric entries at quadrature points
    !!
    !!  Metrics computed using:
    !!      1,1  =  [dtheta/deta][dz/dzeta] - [dtheta/dzeta][dz/deta]  = [(pi/2)/2][1/2] - [0][0] = pi/8
    !!      2,2  =  [dr/dxi][dz/dzeta]      - [dr/dzeta][dz/dxi]       = [1/2][1/2]      - [0][0] = 1/4
    !!      3,3  =  [dr/dxi][dtheta/deta]   - [dr/deta][dtheta/dxi]    = [1/2][(pi/2)/2] - [0][0] = pi/8
    !!
    !!      !1,1  =  [dr/deta][dz/dzeta]     - [dr/dzeta][dz/deta]       = [1/2][1/2]      - [0][0] = 1/4
    !!      !2,2  =  [dtheta/dxi][dz/dzeta]  - [dtheta/dzeta][dz/dxi]    = [pi/2][1/2]     - [0][0] = pi/8
    !!      !3,3  =  [dtheta/dxi][dr/deta]   - [dtheta/deta][dr/dxi]     = [1/2][(pi/2)/2] - [0][0] = pi/8
    !!
    !!  Terms with theta influence get scaled by (r).
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_metric(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk)    :: test_metric(3,3,self%elem%basis_s%nnodes_elem())
        real(rk)    :: jinv(self%elem%basis_s%nnodes_elem())

        jinv = (PI/16._rk) * self%elem%interp_coords(:,1)
        
        test_metric(1,1,:) = (PI/8._rk) * self%elem%interp_coords(:,1)   / jinv
        test_metric(2,1,:) = ZERO       * self%elem%interp_coords(:,1)   / jinv
        test_metric(3,1,:) = ZERO       * self%elem%interp_coords(:,1)   / jinv
        test_metric(1,2,:) = ZERO                                   / jinv
        test_metric(2,2,:) = (ONE/FOUR)                             / jinv
        test_metric(3,2,:) = ZERO                                   / jinv
        test_metric(1,3,:) = ZERO       * self%elem%interp_coords(:,1)   / jinv
        test_metric(2,3,:) = ZERO       * self%elem%interp_coords(:,1)   / jinv
        test_metric(3,3,:) = (PI/8._rk) * self%elem%interp_coords(:,1)   / jinv

        @assertEqual(test_metric,self%elem%metric, 1.e-14_rk)
        
    end subroutine testElement_metric
    !***************************************************************************************



    !> Test inverse element jacobian entries at quadrature points
    !!
    !! Inverse jacobian term computed using:
    !!
    !!  jinv = radius * ([dr/dxi][dxi/dr]  +  [dr/deta][deta/dr]  +  [dr/dzeta][dzeta/dr])  
    !!
    !!       = radius * ([1/2]*[pi/8]  +  [0][0]  +  [0][0])  = r*pi/16
    !!
    !!
    !---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_jinv(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk)    :: test_jinv(self%elem%basis_s%nnodes_elem())
        
        test_jinv = (PI/16._rk) * self%elem%interp_coords(:,1)
        @assertEqual(test_jinv,self%elem%jinv)

    end subroutine testElement_jinv
    !****************************************************************************************




    !>  Test mass matrix entries
    !!
    !!  In deriving expected value of mass matrix entries, make sure to treat the inverse
    !!  jacobian term correctly. That is, jinv = (pi/16)r 
    !!
    !!  Note, that in the transformation to the reference element, the radius dependence
    !!  for the volume integral in cylindrical coordinates is a function of 'xi' as:
    !!  r = r(xi) = 0.5(xi) + 1.5
    !!
    !!  That satisfies [r(-1) = 1] and [r(1) = 2]
    !!  This function of xi must be accounted for in the integrations.
    !!
    !!  So, the integration of the entry (1,1) in the mass matrix corresponding to
    !!  the integration of mode [psi_111][psi_111], where [psi_111 = 1] is:
    !!
    !!      = int (1)(1)jinv dxi deta dzeta  on [-1,1]
    !!
    !!      = (pi/16) int (1)(1)(0.5xi + 1.5) dxi deta dzeta    on [-1,1]
    !!
    !!  @author Nathan A. Wukie
    !!  @date   02/15/2016
    !!
    !!---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_mass(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk)    :: test_mass(self%elem%nterms_s,self%elem%nterms_s)
        real(rk)    :: tol
        integer(ik) :: idiag
        
        tol = 1.e-14_rk
        
        test_mass = ZERO
        test_mass(1,1) = 12._rk
        test_mass(2,2) = 12._rk/THREE
        test_mass(3,3) = 12._rk/THREE
        test_mass(4,4) = 12._rk/THREE
        test_mass(5,5) = 12._rk/9._rk
        test_mass(6,6) = 12._rk/9._rk
        test_mass(7,7) = 12._rk/9._rk
        test_mass(8,8) = 24._rk/54._rk
        
        test_mass = (PI/16._rk) * test_mass
        
        do idiag = 1,8
            @assertEqual(test_mass(idiag,idiag),self%elem%mass(idiag,idiag),tol)
        end do

    end subroutine testElement_mass
    !*****************************************************************************************






    !>  Test cartesian coordinate values at quadrature nodes.
    !!
    !!  Slope of coordinate functions:
    !!      r = (2-1)/2  = 0.5
    !!      t = (pi/2)/2 = pi/4
    !!      z = (1-0)/2  = 0.5
    !!
    !!  Coordinate at center:
    !!      r = 1.5
    !!      t = pi/4
    !!      z = 0.5
    !!
    !!  @author Nathan A. Wukie
    !!  @date   02/14/2017
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine testElement_quadpts(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk), dimension(self%elem%basis_s%nnodes_elem()) :: test_r, test_theta, test_z
        real(rk)                                        :: r1,r2,theta1,theta2,z1,z2

        r1     = 1.5_rk    - 0.5_rk*sqrt(ONE/THREE)
        r2     = 1.5_rk    + 0.5_rk*sqrt(ONE/THREE)
        theta1 = (PI/FOUR) - (PI/FOUR)*sqrt(ONE/THREE)
        theta2 = (PI/FOUR) + (PI/FOUR)*sqrt(ONE/THREE)
        z1     = 0.5_rk    - 0.5_rk*sqrt(ONE/THREE)
        z2     = 0.5_rk    + 0.5_rk*sqrt(ONE/THREE)

        test_r     = [r1, r2, r1, r2, r1, r2, r1, r2]
        test_theta = [theta1, theta1, theta2, theta2, theta1, theta1, theta2, theta2]
        test_z     = [z1, z1, z1, z1, z2, z2, z2, z2]
        
        @assertEqual(test_r,     self%elem%interp_coords(:,1))
        @assertEqual(test_theta, self%elem%interp_coords(:,2))
        @assertEqual(test_z,     self%elem%interp_coords(:,3))

    end subroutine testElement_quadpts
    !*******************************************************************************************






    !>  Test physical gradient(component 1) of basis functions at quadrature nodes.
    !!
    !!  grad1 = [ (dxi/dtheta)(df/dxi) + (deta/dtheta)(df/deta) + (dzeta/dtheta)(df/dzeta) ] * J
    !!
    !!  For this element configuration, the cross derivative coupling is zero so the 
    !!  formula simplifies to:
    !!
    !!  !!grad1 = (deta/dtheta)(df/deta)(J)
    !!  grad1 = (dxi/dtheta)(df/dxi)(J)
    !!
    !!  Also note:
    !!      - there is no r-scaling in (deta/dtheta). 
    !!      - there is r-scaling in Jinv leading to 1/r because of multiplication by J
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grad1(self)
        class(test_element_linearD),    intent(inout)       :: self

        real(rk), dimension(self%elem%basis_s%nnodes_elem(), 8)  :: test
        real(rk), dimension(self%elem%basis_s%nnodes_elem())     :: xi, eta, zeta
        real(rk), allocatable                               :: nodes(:,:)
        
        real(rk) :: tol
        
        tol = 1.e-14_rk
        
        nodes = self%elem%basis_s%nodes_element() 
        xi   = nodes(:,1)
        eta  = nodes(:,2)
        zeta = nodes(:,3)
        
        test(:,1) = ZERO                ! Mode 1
        test(:,2) = ZERO                ! Mode 2
        test(:,3) = ZERO                ! Mode 3
        test(:,4) = TWO                 ! Mode 4
        test(:,5) = TWO * eta           ! Mode 5
        test(:,6) = TWO * zeta          ! Mode 6
        test(:,7) = ZERO                ! Mode 7
        test(:,8) = TWO * eta * zeta    ! Mode 8
        
        @assertEqual(test,self%elem%grad1,tol)

    end subroutine testElement_grad1
    !*******************************************************************************************






    !>  Test physical gradients(component 2) of basis functions at quadrature nodes.
    !!
    !!  grad2 = [ (dxi/dr)(df/dxi) + (deta/dr)(df/deta) + (dzeta/dr)(df/dzeta) ] * J
    !!
    !!  For this element configuration, the cross derivative coupling is zero so the 
    !!  formula simplifies to:
    !!
    !!  grad2 = (dxi/dr)(df/dxi)(J)
    !!
    !!  Also note:
    !!      - there is r-scaling in (dxi/dr). 
    !!      - there is r-scaling in Jinv leading to 1/r because of multiplication by J
    !!      - these cancel, so no r scaling
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grad2(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk), dimension(self%elem%basis_s%nnodes_elem(), 8)  :: test
        real(rk), dimension(self%elem%basis_s%nnodes_elem())     :: xi, eta, zeta, r
        real(rk),   allocatable                             :: nodes(:,:)
        
        real(rk) :: tol
        
        tol = 1.e-14_rk
        
        nodes = self%elem%basis_s%nodes_element()
        xi   = nodes(:,1)
        eta  = nodes(:,2)
        zeta = nodes(:,3)
        r    = self%elem%interp_coords(:,1)
        

        test(:,1) = ZERO                                            ! Mode 1
        test(:,2) = (ONE/FOUR)*(16._rk/PI)*(ONE/r)                  ! Mode 2
        test(:,3) = ZERO                                            ! Mode 3
        test(:,4) = ZERO                                            ! Mode 4
        test(:,5) = (ONE/FOUR)*(16._rk/PI)*(ONE/r) * xi             ! Mode 5
        test(:,6) = ZERO                                            ! Mode 6
        test(:,7) = (ONE/FOUR)*(16._rk/PI)*(ONE/r) * zeta           ! Mode 7
        test(:,8) = (ONE/FOUR)*(16._rk/PI)*(ONE/r) * xi * zeta      ! Mode 8


        @assertEqual(test,self%elem%grad2,tol)

    end subroutine testElement_grad2
    !*******************************************************************************************





    !> Test physical gradients(component 3) of basis functions at quadrature nodes.
    !!
    !!  grad3 = [ (dxi/dz)(df/dxi) + (deta/dz)(df/deta) + (dzeta/dz)(df/dzeta) ] * J
    !!
    !!  For this element configuration, the cross derivative coupling is zero so the 
    !!  formula simplifies to:
    !!
    !!  grad3 = (dxi/dz)(df/dxi)(J)
    !!
    !!  Also note:
    !!      - there is r-scaling in (dxi/dz). 
    !!      - there is r-scaling in Jinv leading to 1/r because of multiplication by J
    !!      - these cancel, so no r scaling
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grad3(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk), dimension(self%elem%basis_s%nnodes_elem(), 8)  :: test
        real(rk), dimension(self%elem%basis_s%nnodes_elem())     :: xi, eta, zeta
        real(rk),   allocatable                             :: nodes(:,:)
        
        real(rk) :: tol
        
        tol = 1.e-14_rk
        
        nodes = self%elem%basis_s%nodes_element()
        xi   = nodes(:,1)
        eta  = nodes(:,2)
        zeta = nodes(:,3)
        
        test(:,1) = ZERO                ! Mode 1
        test(:,2) = ZERO                ! Mode 2
        test(:,3) = TWO                 ! Mode 3
        test(:,4) = ZERO                ! Mode 4
        test(:,5) = ZERO                ! Mode 5
        test(:,6) = TWO * xi            ! Mode 6
        test(:,7) = TWO * eta           ! Mode 7
        test(:,8) = TWO * xi * eta      ! Mode 8

        @assertEqual(test,self%elem%grad3,tol)

    end subroutine testElement_grad3
    !*******************************************************************************************











    !------------------------------------------------------------------------------
    !                                Face tests
    !------------------------------------------------------------------------------




    !>  Test unit normal vectors have been computed correctly.
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_unit_normals(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk)    :: tol
        real(rk), dimension(self%faces(XI_MAX)%basis_s%nnodes_face()) :: &
            test_norm_r, test_norm_t, test_norm_z
        
        tol = 1.e-15_rk
        
        ! XI_MIN
        test_norm_r = -ONE
        test_norm_t = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_r,self%faces(XI_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_t,self%faces(XI_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MIN)%unorm(:,3),tol)
        
        ! XI_MAX
        test_norm_r = ONE
        test_norm_t = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_r,self%faces(XI_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_t,self%faces(XI_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MAX)%unorm(:,3),tol)
        
        ! ETA_MIN
        test_norm_r = ZERO
        test_norm_t = -ONE
        test_norm_z = ZERO
        
        @assertEqual(test_norm_r,self%faces(ETA_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_t,self%faces(ETA_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MIN)%unorm(:,3),tol)     
        
        ! ETA_MAX
        test_norm_r = ZERO
        test_norm_t = ONE
        test_norm_z = ZERO
        
        @assertEqual(test_norm_r,self%faces(ETA_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_t,self%faces(ETA_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MAX)%unorm(:,3),tol)

        ! ZETA_MIN
        test_norm_t = ZERO
        test_norm_r = ZERO
        test_norm_z = -ONE
        
        @assertEqual(test_norm_r,self%faces(ZETA_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_t,self%faces(ZETA_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MIN)%unorm(:,3),tol)
        
        ! ZETA_MAX
        test_norm_t = ZERO
        test_norm_r = ZERO
        test_norm_z = ONE
        
        @assertEqual(test_norm_r,self%faces(ZETA_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_t,self%faces(ZETA_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MAX)%unorm(:,3),tol)
       

    end subroutine testElement_face_unit_normals
    !*******************************************************************************************





    !>  Test face areas were computed correctly.
    !!
    !!  Face 1: (1 * 1)
    !!  Face 2: (1 * 1)
    !!  Face 3: (1 * 5)
    !!  Face 4: (1 * 5)
    !!  Face 5: (1 * 5)
    !!  Face 6: (1 * 5)
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_area(self)
        class(test_element_linearD),    intent(inout)   :: self

        real(rk)    :: test_area, tol
        
        tol = 1.e-15_rk
        
        ! XI_MIN
        test_area = PI/TWO
        @assertEqual(test_area,self%faces(XI_MIN)%total_area,tol)
        
        ! XI_MAX
        test_area = PI
        @assertEqual(test_area,self%faces(XI_MAX)%total_area,tol)
        
        ! ETA_MIN
        test_area = ONE
        @assertEqual(test_area,self%faces(ETA_MIN)%total_area,tol)
        
        ! ETA_MAX
        test_area = ONE
        @assertEqual(test_area,self%faces(ETA_MAX)%total_area,tol)

        ! ZETA_MIN
        test_area = THREE*PI/FOUR
        @assertEqual(test_area,self%faces(ZETA_MIN)%total_area,tol)
        
        ! ZETA_MAX
        test_area = THREE*PI/FOUR
        @assertEqual(test_area,self%faces(ZETA_MAX)%total_area,tol)
       

    end subroutine testElement_face_area
    !*******************************************************************************************









end module test_element_linearD_cylindrical_mod
