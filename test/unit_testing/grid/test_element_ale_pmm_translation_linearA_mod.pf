module test_element_ale_pmm_translation_linearA_mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use type_chidg,                 only: chidg_t
    use type_element,               only: element_t
    use type_face,                  only: face_t
    use type_element_connectivity,  only: element_connectivity_t
    use type_point,                 only: point_t
    use type_prescribed_mesh_motion
    use mod_io,                     only: gq_rule
    implicit none

    public  :: test_element_ale_pmm_translation_linearA


    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !--------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_element_ale_pmm_translation_linearA

        type(chidg_t)               :: chidg
        type(element_t)             :: elem
        type(face_t),   allocatable :: faces(:)
        real(rk),       allocatable :: nodes(:,:)

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_element_ale_pmm_translation_linearA
    !***************************************************************************


contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !! derived type procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: this
        
        integer(ik), parameter          :: npt = 8
        integer(ik)                     :: ipt
        class(prescribed_mesh_motion_t),    allocatable :: pmm
        real(rk)                        :: nodes(npt,3), dnodes(npt,3),vnodes(npt,3)
        type(element_connectivity_t)    :: connectivity
        integer(ik)                     :: ftype, mapping, ielem, idomain,              &
                                           ntime, neqns, nterms_s,                      &
                                           ineighbor_domain_g,  ineighbor_domain_l,     &
                                           ineighbor_element_g, ineighbor_element_l,    &
                                           ineighbor_face, ineighbor_proc,              &
                                           ineighbor_neqns, ineighbor_nterms_s
        
        
       
        
        ! Set collocation quadrature for testing coordinates at quadrature nodes
        gq_rule = 1
        
        
        call this%chidg%start_up('core')
        allocate(this%faces(6))
        
        ! (x = 0-5 :: y = 0-1 :: z = 0-1)
        !          *------*
        !         /      /|
        !    x=5 /      / |
        !       /      /  *
        !      *------*  /
        !      |      | /
        !  z=1 |      |/
        !      *------*
        !         y=1
        !
        nodes(1,:) = [0._rk, 0._rk, 0._rk]
        nodes(2,:) = [5._rk, 0._rk, 0._rk]
        nodes(3,:) = [5._rk, 1._rk, 0._rk]
        nodes(4,:) = [0._rk, 1._rk, 0._rk]
        nodes(5,:) = [0._rk, 0._rk, 1._rk]
        nodes(6,:) = [5._rk, 0._rk, 1._rk]
        nodes(7,:) = [5._rk, 1._rk, 1._rk]
        nodes(8,:) = [0._rk, 1._rk, 1._rk]
        this%nodes = nodes

        mapping = 1
        call connectivity%init(mapping)
        call connectivity%set_domain_index(1)
        call connectivity%set_element_index(1)
        call connectivity%set_element_nodes([1, 2, 3, 4, 5, 6, 7, 8])
        

        
        !
        ! Initialize Element geometry and Numerics
        !
        idomain  = 1
        ielem    = 1
        neqns    = 2
        nterms_s = 8
        ntime    = 1
        call this%elem%init_geom(nodes,connectivity,idomain,ielem,'Cartesian')
        call this%elem%init_sol('Quadrature',1,nterms_s,neqns,ntime)
        
        
        !
        ! Initialize face geometries
        !
        call this%faces(XI_MIN)%init_geom(XI_MIN,this%elem)
        call this%faces(XI_MAX)%init_geom(XI_MAX,this%elem)
        call this%faces(ETA_MIN)%init_geom(ETA_MIN,this%elem)
        call this%faces(ETA_MAX)%init_geom(ETA_MAX,this%elem)
        call this%faces(ZETA_MIN)%init_geom(ZETA_MIN,this%elem)
        call this%faces(ZETA_MAX)%init_geom(ZETA_MAX,this%elem)

        
        !
        ! Initialize face neighbors
        !
        ftype = 0
        ineighbor_domain_g  = 0
        ineighbor_domain_l  = 0
        ineighbor_element_g = 0
        ineighbor_element_l = 0
        ineighbor_face      = 0
        ineighbor_neqns     = 2
        ineighbor_nterms_s  = 8
        ineighbor_proc      = 0
        call this%faces(XI_MIN)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,      &
                                                    ineighbor_element_g,ineighbor_element_l,    &
                                                    ineighbor_face,ineighbor_neqns,             &
                                                    ineighbor_nterms_s,ineighbor_proc)
        call this%faces(XI_MAX)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,      &
                                                    ineighbor_element_g,ineighbor_element_l,    &
                                                    ineighbor_face,ineighbor_neqns,             &
                                                    ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ETA_MIN)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,     &
                                                     ineighbor_element_g,ineighbor_element_l,   &
                                                     ineighbor_face,ineighbor_neqns,            &
                                                     ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ETA_MAX)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,     &
                                                     ineighbor_element_g,ineighbor_element_l,   &
                                                     ineighbor_face,ineighbor_neqns,            &
                                                     ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ZETA_MIN)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,    &
                                                      ineighbor_element_g,ineighbor_element_l,  &
                                                      ineighbor_face,ineighbor_neqns,           &
                                                      ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ZETA_MAX)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,    &
                                                      ineighbor_element_g,ineighbor_element_l,  &
                                                      ineighbor_face,ineighbor_neqns,           &
                                                      ineighbor_nterms_s,ineighbor_proc)

        
        call this%faces(XI_MIN)%init_sol(this%elem)
        call this%faces(XI_MAX)%init_sol(this%elem)
        call this%faces(ETA_MIN)%init_sol(this%elem)
        call this%faces(ETA_MAX)%init_sol(this%elem)
        call this%faces(ZETA_MIN)%init_sol(this%elem)
        call this%faces(ZETA_MAX)%init_sol(this%elem)

        !
        ! Set up the PMM and use it to compute ALE grid quantities
        !

        allocate(pmm)
        call pmm%add_pmmf("constant_motion_1d_x")
        call pmm%pmmf%set_option("grid_advection_velocity",ONE)
        
        !Compute nodal displacements and velocities using the PMM
        do ipt = 1, npt
            dnodes(ipt, :) = pmm%pmmf%compute_pos(ONE, this%nodes(ipt, :))-this%nodes(ipt,:)
            vnodes(ipt, :) = pmm%pmmf%compute_vel(ONE, this%nodes(ipt, :))
        end do

        call this%elem%init_ale(dnodes,vnodes)
        call this%elem%update_element_ale()
        call this%faces(XI_MIN)%init_ale(this%elem)
        call this%faces(XI_MAX)%init_ale(this%elem)
        call this%faces(ETA_MIN)%init_ale(this%elem)
        call this%faces(ETA_MAX)%init_ale(this%elem)
        call this%faces(ZETA_MIN)%init_ale(this%elem)
        call this%faces(ZETA_MAX)%init_ale(this%elem)

        call this%faces(XI_MIN)%update_face_ale()
        call this%faces(XI_MAX)%update_face_ale()
        call this%faces(ETA_MIN)%update_face_ale()
        call this%faces(ETA_MAX)%update_face_ale()
        call this%faces(ZETA_MIN)%update_face_ale()
        call this%faces(ZETA_MAX)%update_face_ale()


    end subroutine setUp
    !************************************************************************************
    

    !>
    !!
    !!
    !-------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !**************************************************************************************





    !> Test element grid velocities entries at quadrature points
    !!
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grid_velocities(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self

        real(rk)    :: vg1(self%elem%basis_s%nnodes_elem()), &
                       vg2(self%elem%basis_s%nnodes_elem()), &
                       vg3(self%elem%basis_s%nnodes_elem())


        vg1 = ONE
        vg2 = ZERO
        vg3 = ZERO

        @assertEqual(vg1,self%elem%grid_vel1, 1.e-14_rk)
        @assertEqual(vg2,self%elem%grid_vel2, 1.e-14_rk)
        @assertEqual(vg3,self%elem%grid_vel3, 1.e-14_rk)
        
    end subroutine testElement_grid_velocities
    !***************************************************************************************

    !> Test element element positions entries at quadrature points
    !!
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grid_positions(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self

        real(rk)    :: pg(self%elem%basis_s%nnodes_elem(),3)


        pg(:,1) = ONE + self%elem%quad_pts(:,1)
        pg(:,2) = ZERO + self%elem%quad_pts(:,2)
        pg(:,3) = ZERO + self%elem%quad_pts(:,3)

        @assertEqual(pg,self%elem%ale_quad_pts, 1.e-14_rk)
        
    end subroutine testElement_grid_positions
    !***************************************************************************************



    !> Test inverse element jacobian entries at quadrature points
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_jinv_def(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self

        real(rk)    :: test_ale_g(self%elem%basis_s%nnodes_elem())
        
        test_ale_g = ONE
        @assertEqual(self%elem%jinv_def,self%elem%jinv_undef)
        @assertEqual(self%elem%det_jacobian_grid,test_det_jac_grid)

    end subroutine testElement_jinv_def
    !****************************************************************************************

    
    !> Test element metric entries at quadrature points
    !!
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_jacobian_grid(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self

        real(rk)    :: test_metric(self%elem%basis_s%nnodes_elem(),3,3)
        
        test_metric(:,1,1) = 1.0_rk 
        test_metric(:,2,1) = 0._rk  
        test_metric(:,3,1) = 0._rk  
        test_metric(:,1,2) = 0._rk  
        test_metric(:,2,2) = 1.0_rk 
        test_metric(:,3,2) = 0._rk  
        test_metric(:,1,3) = 0._rk  
        test_metric(:,2,3) = 0._rk  
        test_metric(:,3,3) = 1.0_rk 

        @assertEqual(test_metric,self%elem%jacobian_grid, 1.e-14_rk)
        
    end subroutine testElement_jacobian_grid
    !***************************************************************************************











!------------------------------------------------------------------------------
!                                Face tests
!------------------------------------------------------------------------------

    !> Test element grid velocities entries at quadrature points
    !!
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_grid_velocities(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self

        real(rk)    :: vg1(self%faces(XI_MAX)%basis_s%nnodes_face()), &
                       vg2(self%faces(XI_MAX)%basis_s%nnodes_face()), &
                       vg3(self%faces(XI_MAX)%basis_s%nnodes_face())


        vg1 = ONE
        vg2 = ZERO
        vg3 = ZERO

        @assertEqual(vg1,self%faces(XI_MIN)%grid_vel1, 1.e-14_rk)
        @assertEqual(vg2,self%faces(XI_MIN)%grid_vel2, 1.e-14_rk)
        @assertEqual(vg3,self%faces(XI_MIN)%grid_vel3, 1.e-14_rk)
        
        @assertEqual(vg1,self%faces(XI_MAX)%grid_vel1, 1.e-14_rk)
        @assertEqual(vg2,self%faces(XI_MAX)%grid_vel2, 1.e-14_rk)
        @assertEqual(vg3,self%faces(XI_MAX)%grid_vel3, 1.e-14_rk)

        @assertEqual(vg1,self%faces(ETA_MIN)%grid_vel1, 1.e-14_rk)
        @assertEqual(vg2,self%faces(ETA_MIN)%grid_vel2, 1.e-14_rk)
        @assertEqual(vg3,self%faces(ETA_MIN)%grid_vel3, 1.e-14_rk)

        @assertEqual(vg1,self%faces(ETA_MAX)%grid_vel1, 1.e-14_rk)
        @assertEqual(vg2,self%faces(ETA_MAX)%grid_vel2, 1.e-14_rk)
        @assertEqual(vg3,self%faces(ETA_MAX)%grid_vel3, 1.e-14_rk)

        @assertEqual(vg1,self%faces(ZETA_MIN)%grid_vel1, 1.e-14_rk)
        @assertEqual(vg2,self%faces(ZETA_MIN)%grid_vel2, 1.e-14_rk)
        @assertEqual(vg3,self%faces(ZETA_MIN)%grid_vel3, 1.e-14_rk)

        @assertEqual(vg1,self%faces(ZETA_MAX)%grid_vel1, 1.e-14_rk)
        @assertEqual(vg2,self%faces(ZETA_MAX)%grid_vel2, 1.e-14_rk)
        @assertEqual(vg3,self%faces(ZETA_MAX)%grid_vel3, 1.e-14_rk)
    end subroutine testElement_face_grid_velocities
    !***************************************************************************************

    !> Test element element positions entries at quadrature points
    !!
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_grid_positions(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self

        real(rk)    :: pg(self%faces(XI_MAX)%basis_s%nnodes_face(),3,6)


        pg(:,1,XI_MIN) = ONE +  self%faces(XI_MIN)%quad_pts(:,1)
        pg(:,2,XI_MIN) = ZERO + self%faces(XI_MIN)%quad_pts(:,2)
        pg(:,3,XI_MIN) = ZERO + self%faces(XI_MIN)%quad_pts(:,3)

        pg(:,1,XI_MAX) = ONE +  self%faces(XI_MAX)%quad_pts(:,1)
        pg(:,2,XI_MAX) = ZERO + self%faces(XI_MAX)%quad_pts(:,2)
        pg(:,3,XI_MAX) = ZERO + self%faces(XI_MAX)%quad_pts(:,3)

        pg(:,1,ETA_MIN) = ONE +  self%faces(ETA_MIN)%quad_pts(:,1)
        pg(:,2,ETA_MIN) = ZERO + self%faces(ETA_MIN)%quad_pts(:,2)
        pg(:,3,ETA_MIN) = ZERO + self%faces(ETA_MIN)%quad_pts(:,3)

        pg(:,1,ETA_MAX) = ONE +  self%faces(ETA_MAX)%quad_pts(:,1)
        pg(:,2,ETA_MAX) = ZERO + self%faces(ETA_MAX)%quad_pts(:,2)
        pg(:,3,ETA_MAX) = ZERO + self%faces(ETA_MAX)%quad_pts(:,3)

        pg(:,1,ZETA_MIN) = ONE +  self%faces(ZETA_MIN)%quad_pts(:,1)
        pg(:,2,ZETA_MIN) = ZERO + self%faces(ZETA_MIN)%quad_pts(:,2)
        pg(:,3,ZETA_MIN) = ZERO + self%faces(ZETA_MIN)%quad_pts(:,3)

        pg(:,1,ZETA_MAX) = ONE +  self%faces(ZETA_MAX)%quad_pts(:,1)
        pg(:,2,ZETA_MAX) = ZERO + self%faces(ZETA_MAX)%quad_pts(:,2)
        pg(:,3,ZETA_MAX) = ZERO + self%faces(ZETA_MAX)%quad_pts(:,3)


        @assertEqual(pg(:,:,XI_MIN),self%faces(XI_MIN)%ale_quad_pts, 1.e-14_rk)
        @assertEqual(pg(:,:,XI_MAX),self%faces(XI_MAX)%ale_quad_pts, 1.e-14_rk)
        
        @assertEqual(pg(:,:,ETA_MIN),self%faces(ETA_MIN)%ale_quad_pts, 1.e-14_rk)
        @assertEqual(pg(:,:,ETA_MAX),self%faces(ETA_MAX)%ale_quad_pts, 1.e-14_rk)
        
        @assertEqual(pg(:,:,ZETA_MIN),self%faces(ZETA_MIN)%ale_quad_pts, 1.e-14_rk)
        @assertEqual(pg(:,:,ZETA_MAX),self%faces(ZETA_MAX)%ale_quad_pts, 1.e-14_rk)
        
    end subroutine testElement_face_grid_positions
    !***************************************************************************************



    !> Test inverse element jacobian entries at quadrature points
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_jinv_ale(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self
        real(rk)    :: test_det_jac_grid(self%faces(XI_MAX)%basis_s%nnodes_face())
        
        test_det_jac_grid = ONE

        @assertEqual(self%faces(XI_MIN)%jinv_ale,self%faces(XI_MIN)%jinv)
        @assertEqual(self%faces(XI_MIN)%det_jacobian_grid,test_det_jac_grid)

        @assertEqual(self%faces(XI_MAX)%jinv_ale,self%faces(XI_MAX)%jinv)
        @assertEqual(self%faces(XI_MAX)%det_jacobian_grid,test_det_jac_grid)

        @assertEqual(self%faces(ETA_MIN)%jinv_ale,self%faces(ETA_MIN)%jinv)
        @assertEqual(self%faces(ETA_MIN)%det_jacobian_grid,test_det_jac_grid)

        @assertEqual(self%faces(ETA_MAX)%jinv_ale,self%faces(ETA_MAX)%jinv)
        @assertEqual(self%faces(ETA_MAX)%det_jacobian_grid,test_det_jac_grid)

        @assertEqual(self%faces(ZETA_MIN)%jinv_ale,self%faces(ZETA_MIN)%jinv)
        @assertEqual(self%faces(ZETA_MIN)%det_jacobian_grid,test_det_jac_grid)

        @assertEqual(self%faces(ZETA_MAX)%jinv_ale,self%faces(ZETA_MAX)%jinv)
        @assertEqual(self%faces(ZETA_MAX)%det_jacobian_grid,test_det_jac_grid)

    end subroutine testElement_face_jinv_ale
    !****************************************************************************************


    !>
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_metrics(self)
        class(test_element_ale_pmm_translation_linearA),    intent(inout)   :: self
        real(rk)    :: test_metric(self%faces(XI_MAX)%basis_s%nnodes_face(),3,3)
        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        test_metric(:,1,1) = 1.0_rk 
        test_metric(:,2,1) = 0._rk   
        test_metric(:,3,1) = 0._rk   
        test_metric(:,1,2) = 0._rk   
        test_metric(:,2,2) = 1.0_rk 
        test_metric(:,3,2) = 0._rk   
        test_metric(:,1,3) = 0._rk   
        test_metric(:,2,3) = 0._rk   
        test_metric(:,3,3) = 1.0_rk 
        
        @assertEqual(test_metric,self%faces(XI_MIN)%jacobian_grid,tol)
        @assertEqual(test_metric,self%faces(XI_MAX)%jacobian_grid,tol)
        @assertEqual(test_metric,self%faces(ETA_MIN)%jacobian_grid,tol)
        @assertEqual(test_metric,self%faces(ETA_MAX)%jacobian_grid,tol)
        @assertEqual(test_metric,self%faces(ZETA_MIN)%jacobian_grid,tol)
        @assertEqual(test_metric,self%faces(ZETA_MAX)%jacobian_grid,tol)

    end subroutine testElement_face_metrics
    !*******************************************************************************************





end module test_element_ale_pmm_translation_linearA_mod
