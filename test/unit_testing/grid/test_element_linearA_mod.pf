module test_element_linearA_mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use type_element,               only: element_t
    use type_face,                  only: face_t
    use type_element_connectivity,  only: element_connectivity_t
    use type_point,                 only: point_t
    use mod_io,                     only: gq_rule
    use mod_chidg_mpi,              only: IRANK
    implicit none

    public  :: test_element_linearA


    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !--------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_element_linearA

        type(chidg_t)               :: chidg
        type(element_t)             :: elem
        type(face_t),   allocatable :: faces(:)
        real(rk),       allocatable :: nodes(:,:)

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_element_linearA
    !***************************************************************************


contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !! derived type procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_element_linearA),    intent(inout)   :: this
        
        integer(ik), parameter          :: npt = 8
        real(rk)                        :: nodes(npt,3)
        integer(ik)                     :: ftype, ielem, idomain,                       &
                                           ntime, nfields, nterms_s,                    & 
                                           dof_start, dof_local_start,                  &
                                           ineighbor_domain_g,  ineighbor_domain_l,     &
                                           ineighbor_element_g, ineighbor_element_l,    &
                                           ineighbor_face, ineighbor_proc,              &
                                           ineighbor_nfields, ineighbor_ntime,          &
                                           ineighbor_nterms_s, ineighbor_dof_start,     &
                                           ineighbor_dof_local_start
        
        
        ! Set collocation quadrature for testing coordinates at quadrature nodes
        gq_rule = 1
        
        
        IO_DESTINATION='file'
        call this%chidg%start_up('core')
        allocate(this%faces(6))
        
        ! (x = 0-5 :: y = 0-1 :: z = 0-1)
        !          *------*
        !         /      /|
        !    x=5 /      / |
        !       /      /  *
        !      *------*  /
        !      |      | /
        !  z=1 |      |/
        !      *------*
        !         y=1
        !
        nodes(1,:) = [0._rk, 0._rk, 0._rk]
        nodes(2,:) = [5._rk, 0._rk, 0._rk]
        nodes(3,:) = [5._rk, 1._rk, 0._rk]
        nodes(4,:) = [0._rk, 1._rk, 0._rk]
        nodes(5,:) = [0._rk, 0._rk, 1._rk]
        nodes(6,:) = [5._rk, 0._rk, 1._rk]
        nodes(7,:) = [5._rk, 1._rk, 1._rk]
        nodes(8,:) = [0._rk, 1._rk, 1._rk]
        this%nodes = nodes


        
        !
        ! Initialize Element geometry and Numerics
        !
        idomain         = 1
        ielem           = 1
        nfields         = 2
        nterms_s        = 8
        ntime           = 1
        dof_start       = 1
        dof_local_start = 1
        call this%elem%init_geom(nodes        = nodes,                                  &
                                 connectivity = [1, 2, 3, 4, 5, 6, 7, 8],               &
                                 etype        = 1,                                      &
                                 location     = [idomain,idomain,ielem,ielem,IRANK],    &
                                 coord_system = 'Cartesian')
        call this%elem%init_sol('Quadrature',1,nterms_s,nfields,ntime,dof_start,dof_local_start)
        
        
        !
        ! Initialize face geometries
        !
        call this%faces(XI_MIN)%init_geom(XI_MIN,this%elem)
        call this%faces(XI_MAX)%init_geom(XI_MAX,this%elem)
        call this%faces(ETA_MIN)%init_geom(ETA_MIN,this%elem)
        call this%faces(ETA_MAX)%init_geom(ETA_MAX,this%elem)
        call this%faces(ZETA_MIN)%init_geom(ZETA_MIN,this%elem)
        call this%faces(ZETA_MAX)%init_geom(ZETA_MAX,this%elem)

        
        
        !
        ! Initialize face neighbors
        !
        ftype = 0
        ineighbor_domain_g        = 0
        ineighbor_domain_l        = 0
        ineighbor_element_g       = 0
        ineighbor_element_l       = 0
        ineighbor_face            = 0
        ineighbor_nfields         = 2
        ineighbor_ntime           = 1
        ineighbor_nterms_s        = 8
        ineighbor_proc            = 0
        ineighbor_dof_start       = 1
        ineighbor_dof_local_start = 1
        call this%faces(XI_MIN)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,               &
                                                   ineighbor_element_g,ineighbor_element_l,             &
                                                   ineighbor_face,ineighbor_nfields,ineighbor_ntime,    &
                                                   ineighbor_nterms_s,ineighbor_proc,                   &
                                                   ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(XI_MAX)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,               &
                                                   ineighbor_element_g,ineighbor_element_l,             &
                                                   ineighbor_face,ineighbor_nfields,ineighbor_ntime,    &
                                                   ineighbor_nterms_s,ineighbor_proc,                   &
                                                   ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ETA_MIN)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,              &
                                                    ineighbor_element_g,ineighbor_element_l,            &
                                                    ineighbor_face,ineighbor_nfields,ineighbor_ntime,   &
                                                    ineighbor_nterms_s,ineighbor_proc,                  &
                                                    ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ETA_MAX)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,              &
                                                    ineighbor_element_g,ineighbor_element_l,            &
                                                    ineighbor_face,ineighbor_nfields,ineighbor_ntime,   &
                                                    ineighbor_nterms_s,ineighbor_proc,                  &
                                                    ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ZETA_MIN)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)
        call this%faces(ZETA_MAX)%set_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,             &
                                                     ineighbor_element_g,ineighbor_element_l,           &
                                                     ineighbor_face,ineighbor_nfields,ineighbor_ntime,  &
                                                     ineighbor_nterms_s,ineighbor_proc,                 &
                                                     ineighbor_dof_start,ineighbor_dof_local_start)

        
        call this%faces(XI_MIN)%init_sol(this%elem)
        call this%faces(XI_MAX)%init_sol(this%elem)
        call this%faces(ETA_MIN)%init_sol(this%elem)
        call this%faces(ETA_MAX)%init_sol(this%elem)
        call this%faces(ZETA_MIN)%init_sol(this%elem)
        call this%faces(ZETA_MAX)%init_sol(this%elem)

    end subroutine setUp
    !************************************************************************************
    

    !>
    !!
    !!
    !-------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_element_linearA),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !**************************************************************************************





    !> Test element metric entries at quadrature points
    !!
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_metric(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk)    :: test_metric(3,3,self%elem%basis_s%nnodes_elem())
        
        test_metric(1,1,:) = 0.25_rk / 0.625
        test_metric(2,1,:) = 0._rk   / 0.625
        test_metric(3,1,:) = 0._rk   / 0.625
        test_metric(1,2,:) = 0._rk   / 0.625
        test_metric(2,2,:) = 1.25_rk / 0.625
        test_metric(3,2,:) = 0._rk   / 0.625
        test_metric(1,3,:) = 0._rk   / 0.625
        test_metric(2,3,:) = 0._rk   / 0.625
        test_metric(3,3,:) = 1.25_rk / 0.625

        @assertEqual(test_metric,self%elem%metric, 1.e-14_rk)
        
    end subroutine testElement_metric
    !***************************************************************************************



    !> Test inverse element jacobian entries at quadrature points
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_jinv(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_jinv(self%elem%basis_s%nnodes_elem())
        
        test_jinv = 0.625_rk
        @assertEqual(test_jinv,self%elem%jinv)

    end subroutine testElement_jinv
    !****************************************************************************************

    

    !> Test mass matrix entries
    !!
    !!
    !!
    !!---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_mass(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk)    :: test_mass(8,8)
        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        test_mass = ZERO
        test_mass(1,1) = EIGHT
        test_mass(2,2) = EIGHT/THREE
        test_mass(3,3) = EIGHT/THREE
        test_mass(4,4) = EIGHT/THREE
        test_mass(5,5) = EIGHT/NINE
        test_mass(6,6) = EIGHT/NINE
        test_mass(7,7) = EIGHT/NINE
        test_mass(8,8) = EIGHT/27._rk
        
        test_mass = 0.625_rk * test_mass
        
        @assertEqual(test_mass,self%elem%mass,tol)

    end subroutine testElement_mass
    !*****************************************************************************************





    !> Test volume
    !!
    !!
    !!
    !!---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_volume(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        @assertEqual(self%elem%vol,5._rk,tol)

    end subroutine testElement_volume
    !*****************************************************************************************


    !> Test cartesian coordinate values at quadrature nodes
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine testElement_quadpts(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(:), allocatable    :: test_x, test_y, test_z
        real(rk)                                        :: x1,x2,y1,y2,z1,z2

        x1 = 2.5_rk*(ONE - sqrt(ONE/THREE))
        x2 = 2.5_rk*(ONE + sqrt(ONE/THREE))
        y1 = 0.5_rk*(ONE - sqrt(ONE/THREE))
        y2 = 0.5_rk*(ONE + sqrt(ONE/THREE))
        z1 = 0.5_rk*(ONE - sqrt(ONE/THREE))
        z2 = 0.5_rk*(ONE + sqrt(ONE/THREE))
        test_x = [x1, x2, x1, x2, x1, x2, x1, x2]
        test_y = [y1, y1, y2, y2, y1, y1, y2, y2]
        test_z = [z1, z1, z1, z1, z2, z2, z2, z2]
        
        @assertEqual(test_x,self%elem%interp_coords(:,1))
        @assertEqual(test_y,self%elem%interp_coords(:,2))
        @assertEqual(test_z,self%elem%interp_coords(:,3))

    end subroutine testElement_quadpts
    !*******************************************************************************************







    !> Test cartesian gradient matrices
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grad1(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(self%elem%basis_s%nnodes_elem(), 8) :: test
        real(rk), dimension(self%elem%basis_s%nnodes_elem())    :: xi, eta, zeta
        
        real(rk) :: tol
        real(rk),   allocatable :: nodes(:,:)
        
        tol = 1.e-14_rk
        
        nodes = self%elem%basis_s%nodes_element()
        xi   = nodes(:,1)
        eta  = nodes(:,2)
        zeta = nodes(:,3)
        
        
        
        test(:,1) = ZERO                    ! Mode 1
        test(:,2) = ZERO                    ! Mode 2
        test(:,3) = ZERO                    ! Mode 3
        test(:,4) = 0.4_rk                  ! Mode 4
        test(:,5) = 0.4_rk * eta            ! Mode 5
        test(:,6) = 0.4_rk * zeta           ! Mode 6
        test(:,7) = ZERO                    ! Mode 7
        test(:,8) = 0.4_rk * eta * zeta     ! Mode 8

        @assertEqual(test,self%elem%grad1,tol)

    end subroutine testElement_grad1
    !*******************************************************************************************





    !> Test cartesian gradient matrices
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grad2(self)
       class(test_element_linearA),    intent(inout)   :: self
       real(rk), dimension(self%elem%basis_s%nnodes_elem(), 8) :: test
       real(rk), dimension(self%elem%basis_s%nnodes_elem())    :: xi, eta, zeta
       
       real(rk)                 :: tol
       real(rk),    allocatable :: nodes(:,:)
       
       tol = 1.e-14_rk
       
       nodes = self%elem%basis_s%nodes_element()
       xi   = nodes(:,1)
       eta  = nodes(:,2)
       zeta = nodes(:,3)
       
       
       test(:,1) = ZERO                ! Mode 1
       test(:,2) = TWO                 ! Mode 2
       test(:,3) = ZERO                ! Mode 3
       test(:,4) = ZERO                ! Mode 4
       test(:,5) = TWO * xi            ! Mode 5
       test(:,6) = ZERO                ! Mode 6
       test(:,7) = TWO * zeta          ! Mode 7
       test(:,8) = TWO * xi * zeta     ! Mode 8

       @assertEqual(test,self%elem%grad2,tol)

    end subroutine testElement_grad2
    !*******************************************************************************************





    !> Test cartesian gradient matrices
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_grad3(self)
       class(test_element_linearA),    intent(inout)   :: self
       real(rk), dimension(self%elem%basis_s%nnodes_elem(), 8) :: test
       real(rk), dimension(self%elem%basis_s%nnodes_elem())    :: xi, eta, zeta
       
       real(rk)                 :: tol
       real(rk),    allocatable :: nodes(:,:)
       
       tol = 1.e-14_rk
       
       nodes = self%elem%basis_s%nodes_element()
       xi    = nodes(:,1)
       eta   = nodes(:,2)
       zeta  = nodes(:,3)
       
       
       
       test(:,1) = ZERO                ! Mode 1
       test(:,2) = ZERO                ! Mode 2
       test(:,3) = TWO                 ! Mode 3
       test(:,4) = ZERO                ! Mode 4
       test(:,5) = ZERO                ! Mode 5
       test(:,6) = TWO * xi            ! Mode 6
       test(:,7) = TWO * eta           ! Mode 7
       test(:,8) = TWO * xi * eta      ! Mode 8

       @assertEqual(test,self%elem%grad3,tol)
       
    end subroutine testElement_grad3
    !*******************************************************************************************












!------------------------------------------------------------------------------
!                                Face tests
!------------------------------------------------------------------------------


    !>
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_metrics(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%faces(XI_MAX)%basis_s%nnodes_face())
        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        test_metric(1,1,:) = 0.25_rk / 0.625_rk
        test_metric(2,1,:) = 0._rk   / 0.625_rk
        test_metric(3,1,:) = 0._rk   / 0.625_rk
        test_metric(1,2,:) = 0._rk   / 0.625_rk
        test_metric(2,2,:) = 1.25_rk / 0.625_rk
        test_metric(3,2,:) = 0._rk   / 0.625_rk
        test_metric(1,3,:) = 0._rk   / 0.625_rk
        test_metric(2,3,:) = 0._rk   / 0.625_rk
        test_metric(3,3,:) = 1.25_rk / 0.625_rk
        
        @assertEqual(test_metric,self%faces(XI_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(XI_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MAX)%metric,tol)

    end subroutine testElement_face_metrics
    !*******************************************************************************************





    !>  Test scaled normal vectors have been computed correctly. These are really
    !!  unit vectors scaled by the inverse jacobian of the face metric terms. Essentially,
    !!  an area scaling.
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testelement_face_normals(self)
        class(test_element_lineara),    intent(inout)   :: self

        real(rk), dimension(self%faces(XI_MAX)%basis_s%nnodes_face()) :: &
                test_norm_x, test_norm_y, test_norm_z

        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        ! xi_min
        test_norm_x = -0.25_rk
        test_norm_y = zero
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(xi_min)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(xi_min)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(xi_min)%norm(:,3),tol)
        
        ! xi_max
        test_norm_x = 0.25_rk
        test_norm_y = zero
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(xi_max)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(xi_max)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(xi_max)%norm(:,3),tol)
        
        ! eta_min
        test_norm_x = zero
        test_norm_y = -1.25_rk
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(eta_min)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(eta_min)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(eta_min)%norm(:,3),tol)     
        
        ! eta_max
        test_norm_x = zero
        test_norm_y = 1.25_rk
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(eta_max)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(eta_max)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(eta_max)%norm(:,3),tol)

        ! zeta_min
        test_norm_x = zero
        test_norm_y = zero
        test_norm_z = -1.25_rk
        
        @assertequal(test_norm_x,self%faces(zeta_min)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(zeta_min)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(zeta_min)%norm(:,3),tol)
        
        ! zeta_max
        test_norm_x = zero
        test_norm_y = zero
        test_norm_z = 1.25_rk
        
        @assertequal(test_norm_x,self%faces(zeta_max)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(zeta_max)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(zeta_max)%norm(:,3),tol)
       

    end subroutine testelement_face_normals
    !*******************************************************************************************








    !>  Test unit normal vectors have been computed correctly.
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_unit_normals(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(self%faces(XI_MAX)%basis_s%nnodes_face()) :: test_norm_x, test_norm_y, test_norm_z
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        ! XI_MIN
        test_norm_x = -ONE
        test_norm_y = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MIN)%unorm(:,3),tol)
        
        ! XI_MAX
        test_norm_x = ONE
        test_norm_y = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MAX)%unorm(:,3),tol)
        
        ! ETA_MIN
        test_norm_x = ZERO
        test_norm_y = -ONE
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MIN)%unorm(:,3),tol)     
        
        ! ETA_MAX
        test_norm_x = ZERO
        test_norm_y = ONE
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MAX)%unorm(:,3),tol)

        ! ZETA_MIN
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = -ONE
        
        @assertEqual(test_norm_x,self%faces(ZETA_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MIN)%unorm(:,3),tol)
        
        ! ZETA_MAX
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = ONE
        
        @assertEqual(test_norm_x,self%faces(ZETA_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MAX)%unorm(:,3),tol)
       

    end subroutine testElement_face_unit_normals
    !*******************************************************************************************








    !>  Test face areas were computed correctly.
    !!
    !!  Face 1: (1 * 1)
    !!  Face 2: (1 * 1)
    !!  Face 3: (1 * 5)
    !!  Face 4: (1 * 5)
    !!  Face 5: (1 * 5)
    !!  Face 6: (1 * 5)
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_area(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk)    :: test_area, tol
        
        tol = 1.e-15_rk
        
        ! XI_MIN
        test_area = ONE
        @assertEqual(test_area,self%faces(XI_MIN)%total_area,tol)
        
        ! XI_MAX
        test_area = ONE
        @assertEqual(test_area,self%faces(XI_MAX)%total_area,tol)
        
        ! ETA_MIN
        test_area = FIVE
        @assertEqual(test_area,self%faces(ETA_MIN)%total_area,tol)
        
        ! ETA_MAX
        test_area = FIVE
        @assertEqual(test_area,self%faces(ETA_MAX)%total_area,tol)

        ! ZETA_MIN
        test_area = FIVE
        @assertEqual(test_area,self%faces(ZETA_MIN)%total_area,tol)
        
        ! ZETA_MAX
        test_area = FIVE
        @assertEqual(test_area,self%faces(ZETA_MAX)%total_area,tol)
       

    end subroutine testElement_face_area
    !*******************************************************************************************









!------------------------------------------------------------------------------
!      element%mesh_point, element%solution_point, element%metric_point, element%computational_point
!------------------------------------------------------------------------------


    !> Test mesh_point routine returns the correct x-coordinate value
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__mesh_point__x(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(5)  :: ref_coords, check_coords, xi, eta, zeta
        integer(ik)             :: icoord, ipt
                        

        xi   = [-1.0_rk, -0.5_rk, 0.5_rk, 1.0_rk, 0.5_rk]
        eta  = [-ONE, -ONE, -ONE, -ONE, ZERO]
        zeta = [-ONE, -ONE, -ONE, -ONE, ZERO] 

        ref_coords = [ZERO, 1.25_rk, 3.75_rk, 5._rk, 3.75_rk]


        icoord = 1 ! Check x-coordinates
        do ipt = 1,5
            check_coords(ipt) = self%elem%physical_coordinate(icoord, [xi(ipt),eta(ipt),zeta(ipt)], 'Undeformed')
        end do

        @assertEqual(ref_coords,check_coords)

    end subroutine test__mesh_point__x
    !*******************************************************************************************



        
    !> Test mesh_point routine returns the correct y-coordinate value
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__mesh_point__y(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(5)  :: ref_coords, check_coords, xi, eta, zeta
        integer(ik)             :: icoord, ipt
                        

        xi   = [-ONE, -ONE, -ONE, -ONE, ZERO]
        eta  = [-1.0_rk, -0.5_rk, 0.5_rk, 1.0_rk, 0.5_rk]
        zeta = [-ONE, -ONE, -ONE, -ONE, ZERO] 

        ref_coords = [ZERO, 0.25_rk, 0.75_rk, 1._rk, 0.75_rk]


        icoord = 2 ! Check y-coordinates
        do ipt = 1,5
            check_coords(ipt) = self%elem%physical_coordinate(icoord, [xi(ipt),eta(ipt),zeta(ipt)], 'Undeformed')
        end do

        @assertEqual(ref_coords,check_coords)

    end subroutine test__mesh_point__y
    !*******************************************************************************************




    !> Test mesh_point routine returns the correct z-coordinate value
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__mesh_point__z(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(5)  :: ref_coords, check_coords, xi, eta, zeta
        integer(ik)             :: icoord, ipt
                        

        xi   = [-ONE, -ONE, -ONE, -ONE, ZERO]
        eta  = [-ONE, -ONE, -ONE, -ONE, ZERO] 
        zeta = [-1.0_rk, -0.5_rk, 0.5_rk, 1.0_rk, 0.5_rk]

        ref_coords = [ZERO, 0.25_rk, 0.75_rk, 1._rk, 0.75_rk]


        icoord = 3 ! Check z-coordinates
        do ipt = 1,5
            check_coords(ipt) = self%elem%physical_coordinate(icoord, [xi(ipt), eta(ipt), zeta(ipt)],'Undeformed')
        end do

        @assertEqual(ref_coords,check_coords)

    end subroutine test__mesh_point__z
    !*******************************************************************************************









    !> Test computational_point routine returns the correct xi-coordinate value
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__computational_point(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(8)  :: ref_xi, ref_eta, ref_zeta
        real(rk), dimension(8)  :: check_xi, check_eta, check_zeta
        real(rk)                :: check_coords(3)
        real(rk)                :: x, y, z
        integer(ik)             :: ipt
                        
        ref_xi   = [-ONE,  ONE,  ONE, -ONE, -ONE,  ONE,  ONE, -ONE]
        ref_eta  = [-ONE, -ONE,  ONE,  ONE, -ONE, -ONE,  ONE,  ONE]
        ref_zeta = [-ONE, -ONE, -ONE, -ONE,  ONE,  ONE,  ONE,  ONE]


        do ipt = 1,size(self%nodes,1)
            x = self%nodes(ipt,1)
            y = self%nodes(ipt,2)
            z = self%nodes(ipt,3)

            check_coords = self%elem%computational_point([x, y, z])

            check_xi(ipt)   = check_coords(1)
            check_eta(ipt)  = check_coords(2)
            check_zeta(ipt) = check_coords(3)
        end do

        @assertEqual(ref_xi,   check_xi  )
        @assertEqual(ref_eta,  check_eta )
        @assertEqual(ref_zeta, check_zeta)

    end subroutine test__computational_point
    !*******************************************************************************************


















end module test_element_linearA_mod
