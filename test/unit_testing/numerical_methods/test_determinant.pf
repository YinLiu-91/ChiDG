!>  Test explicit 3x3 matrix inversion routine.
!!
!!  @author Nathan A. Wukie (AFRL)
!!  @date   8/14/2017
!!
!!------------------------------------------------------------------
@Test
subroutine test_det_3x3()
    use pfunit_mod
    use mod_kinds,          only: rk
    use mod_determinant,    only: det_3x3
    
    real(rk)    :: A(3,3), det_computed, det_expected, tol

    tol = 1.e-4_rk

    A = reshape([0.154796_rk, 0.833115_rk, 0.668913_rk, &
                 0.963953_rk, 0.395079_rk, 0.737986_rk, &
                 0.992443_rk, 0.204542_rk, 0.333033_rk], [3,3])

    det_expected = .209341_rk

    !
    ! Call 'bisect' to find root between 1.1, and 2.1.
    !
    ! THIS IS BEING TESTED.
    !
    det_computed = det_3x3(A)

    @assertEqual(det_expected, det_computed, tol)

end subroutine test_det_3x3
!*******************************************************************




!>  Test determinant of a 3x3 matrix differentiated routine.
!!
!!      d(det(A))/dx      
!!
!!  Jacobi's formula is used in ChiDG but both the formula and the
!!  actual result is tested against a symbolic python solution given
!!  by the script reported below.
!!
!!      from __future__ import division
!!      
!!      import numpy as np
!!      from sympy import init_printing, integrate
!!      from sympy import Heaviside, diff
!!      from sympy import *
!!      from sympy import log
!!      x, y, z, t = symbols('x y z t')
!!      k, m, n = symbols('k m n', integer=True)
!!      f, g, h = symbols('f g h', cls=Function)
!!      
!!      
!!      init_printing()
!!      
!!      a = sympify(x**2.0+x)
!!      b = sympify(x)
!!      c = -1.0
!!      d = 3.0
!!      e = 2.0
!!      f = sympify(x**3.0)
!!      g = 1.0
!!      h = sympify(-2.0*x+1)
!!      i = 1.0
!!      
!!      
!!      eval_at = 1.0
!!      
!!      
!!      print "Matrix A"
!!      A = Matrix( [[a,b,c],[d,e,f],[g,h,i]] )
!!      pprint (A,use_unicode=False)
!!      
!!      print "Determinant of Matrix A"
!!      Adet = A.det()
!!      pprint (Adet,use_unicode=False)
!!      
!!      print "Determinant of Matrix A differentiated wrt to x"
!!      dAdetdx = diff(Adet)
!!      pprint (dAdetdx,use_unicode=False)
!!      
!!      print "------------------------------------"
!!      
!!      print "Matrix A evaulated at x=", eval_at
!!      A = A.subs(x,eval_at)
!!      pprint (A,use_unicode=False)
!!      
!!      print "Determinant of Matrix dA evaluated at x=", eval_at
!!      Adet = Adet.subs(x,eval_at)
!!      pprint (Adet,use_unicode=False)
!!      
!!      print "Determinant of Matrix A differentiated wrt to x and evaluated at x=", eval_at
!!      dAdetdx = dAdetdx.subs(x,eval_at)
!!      pprint (dAdetdx,use_unicode=False)
!!        
!!  
!!  The 3x3 matrix that we want to find and differentiate the determinant of is:
!!
!!      | x^2+x     x       -1 |
!!      |   3       2      x^3 |
!!      |   1    -2x+1      1  |
!!
!!  evalauted at x = 1.0.
!!
!!
!!  Expected result = 26
!!
!!  @author Matteo Ugolotti
!!  @date   10/1/2018
!!
!!------------------------------------------------------------------
@Test
subroutine test_ddet_3x3()
    use pfunit_mod
    use mod_kinds,          only: rk
    use mod_determinant,    only: ddet_3x3
    
    real(rk)    :: A(3,3), dA(3,3), ddetdx_computed, ddetdx_expected, tol

    tol = 1.e-10_rk

    A = reshape([2._rk, 1._rk, -1._rk, &
                 3._rk, 2._rk,  1._rk, &
                 1._rk,-1._rk,  1._rk], [3,3])

    dA = reshape([3._rk, 1._rk,  0._rk, &
                  0._rk, 0._rk,  3._rk, &
                  0._rk,-2._rk,  0._rk], [3,3])

    ddetdx_expected = 26._rk

    
    !
    ! THIS IS BEING TESTED.
    !
    ddetdx_computed = ddet_3x3(A,dA)

    @assertEqual(ddetdx_expected, ddetdx_computed, tol)

end subroutine test_ddet_3x3
!*******************************************************************

