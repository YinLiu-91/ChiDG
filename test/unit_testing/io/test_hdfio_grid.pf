!> Test for reading an hdf grid. D1_E1_M1 = One Domain, One Element, Linear Mapping
@Test
subroutine testIO__read_mesh_hdf__D1_E1_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)             :: chidg
    character(100), parameter :: filename = 'D1_E1_M1.h5'
    integer,        parameter :: ndomains = 1
    integer,        parameter :: nelem    = 1
    real(rk)                  :: x(8), y(8), z(8)
    real(rk)                  :: tol
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'

    !
    ! Initialize element mapping
    !
    call chidg%start_up('core')
    

    !
    ! Set the accuracy of the solution expansion
    !
    call chidg%set('Solution Order', integer_input=2)


    !
    ! Create/Read grid 
    !
    call create_mesh_file("D1 NxNxN", filename,nelem_xi=1,nelem_eta=1,nelem_zeta=1)
    call chidg%read_mesh(filename)





    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%mesh%ndomains())

    
    ! Test points
    ! This is for element with center at zero
    x = [ZERO, ONE,  ONE, ZERO,  ZERO, ONE,  ONE, ZERO]
    y = [ZERO, ZERO, ONE,  ONE,  ZERO, ZERO, ONE,  ONE]
    z = [ZERO, ZERO, ZERO, ZERO, ONE,  ONE,  ONE,  ONE]

    @assertEqual(x,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,1),tol)
    @assertEqual(y,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,2),tol)
    @assertEqual(z,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,3),tol)
    
    !  Test nelem
    @assertEqual(nelem,chidg%data%mesh%domain(1)%nelem)
    
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine testIO__read_mesh_hdf__D1_E1_M1
!******************************************************************************************












!> Test for reading an hdf grid. D1_E27_M1 = One Domain, 27 Elements (3x3x3), Linear Mapping
@Test
subroutine testIO__read_mesh_hdf__D1_E27_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, THIRD, NFACES, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D1_E27_M1.h5'
    integer,        parameter       :: ndomains = 1
    integer,        parameter       :: nelem    = 27
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    integer(ik)                     :: ielem, iface
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'


    !
    ! Initialize chidg environment
    !
    call chidg%start_up('core')
    

    !
    ! Set the accuracy of the solution expansion
    !
    call chidg%set('Solution Order', integer_input=2)


    !
    ! Create/Read grid
    !
    call create_mesh_file("D1 NxNxN", filename, nelem_xi=3,nelem_eta=3,nelem_zeta=3)
    call chidg%read_mesh(filename)

    
    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%mesh%ndomains())

    
    ! Test points
    x = [ZERO, THIRD, THIRD,  ZERO, ZERO,  THIRD, THIRD, ZERO]
    y = [ZERO, ZERO,  THIRD, THIRD, ZERO,  ZERO,  THIRD, THIRD]
    z = [ZERO, ZERO,  ZERO,  ZERO,  THIRD, THIRD, THIRD, THIRD]
    @assertEqual(x,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,1),tol)
    @assertEqual(y,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,2),tol)
    @assertEqual(z,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,3),tol)
    
    !  Test nelem
    @assertEqual(nelem,chidg%data%mesh%domain(1)%nelem)
    
    
    !  Test all elements have been initialized
    do ielem = 1,chidg%data%mesh%domain(1)%nelem
        @assertTrue(chidg%data%mesh%domain(1)%elems(ielem)%geom_initialized)
        
        do iface = 1,NFACES
            @assertTrue(chidg%data%mesh%domain(1)%faces(ielem,iface)%geom_initialized)
        end do
    end do
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine testIO__read_mesh_hdf__D1_E27_M1













! Test for reading an hdf grid. D2_E1_M1 = Two Domains, One Element, Linear Mapping
@Test
subroutine testIO__read_mesh_hdf__D2_E1_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, HALF, ONE, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D2_E1_M1.h5'
    integer,        parameter       :: ndomains = 2
    integer,        parameter       :: nelem    = 1
    integer(ik)                     :: idom
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'

    !
    ! Initialize chidg environment
    !
    call chidg%start_up('core')
    

    !
    ! Set the accuracy of the solution expansion
    !
    call chidg%set('Solution Order', integer_input=2)


    !
    ! Create/Read grid
    !
    call create_mesh_file("D2 NxNxN M1", filename, nelem_xi =2,nelem_eta =1,nelem_zeta =1)
    call chidg%read_mesh(filename)




    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%mesh%ndomains())

    
    ! Test number of elements
    @assertEqual(nelem,chidg%data%mesh%domain(1)%nelem)
    @assertEqual(nelem,chidg%data%mesh%domain(2)%nelem)


    ! Test points
    x = [ZERO, HALF, HALF, ZERO, ZERO, HALF, HALF, ZERO]
    y = [ZERO, ZERO, ONE,  ONE,  ZERO, ZERO, ONE,  ONE ]
    z = [ZERO, ZERO, ZERO, ZERO, ONE,  ONE,  ONE,  ONE ]
    @assertEqual(x,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,1),tol)
    @assertEqual(y,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,2),tol)
    @assertEqual(z,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,3),tol)
    
    
    x = x + HALF
    y = [ZERO, ZERO, ONE,  ONE,  ZERO, ZERO, ONE, ONE]
    z = [ZERO, ZERO, ZERO, ZERO, ONE,  ONE,  ONE, ONE]
    @assertEqual(x,chidg%data%mesh%domain(2)%elems(1)%node_coords(:,1),tol)
    @assertEqual(y,chidg%data%mesh%domain(2)%elems(1)%node_coords(:,2),tol)
    @assertEqual(z,chidg%data%mesh%domain(2)%elems(1)%node_coords(:,3),tol)
    

    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine testIO__read_mesh_hdf__D2_E1_M1
















! Test for reading an hdf grid. D2_E27_M1 = Two Domains, One Element, Linear Mapping
@Test
subroutine testIO__read_mesh_hdf__D2_E27_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, HALF, THIRD, ONE, SIXTH, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D2_E27_M1.h5'
    integer,        parameter       :: ndomains = 2
    integer,        parameter       :: nelem    = 27
    integer(ik)                     :: idom
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    
    IO_DESTINATION = 'file'

    !
    ! Initialize element mapping
    !
    call chidg%start_up('core')
    
    !
    ! Set the accuracy of the solution expansion
    !
    call chidg%set('Solution Order', integer_input=2)


    !
    ! Create/Read grid
    !
    call create_mesh_file("D2 NxNxN M1", filename, nelem_xi=6, nelem_eta=3, nelem_zeta=3)
    call chidg%read_mesh(filename)



    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%mesh%ndomains())

    

    ! Test number of elements
    @assertEqual(nelem,chidg%data%mesh%domain(1)%nelem)
    @assertEqual(nelem,chidg%data%mesh%domain(2)%nelem)


    ! Test points
    x = [ZERO, SIXTH, SIXTH, ZERO, ZERO,  SIXTH, SIXTH,  ZERO]
    y = [ZERO, ZERO, THIRD, THIRD, ZERO,  ZERO,  THIRD, THIRD]
    z = [ZERO, ZERO, ZERO,  ZERO,  THIRD, THIRD, THIRD, THIRD]
    @assertEqual(x,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,1),tol)
    @assertEqual(y,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,2),tol)
    @assertEqual(z,chidg%data%mesh%domain(1)%elems(1)%node_coords(:,3),tol)
    
    
    x = x + HALF
    y = [ZERO, ZERO, THIRD, THIRD, ZERO, ZERO, THIRD, THIRD]
    z = [ZERO, ZERO, ZERO, ZERO, THIRD, THIRD, THIRD, THIRD]
    @assertEqual(x,chidg%data%mesh%domain(2)%elems(1)%node_coords(:,1),tol)
    @assertEqual(y,chidg%data%mesh%domain(2)%elems(1)%node_coords(:,2),tol)
    @assertEqual(z,chidg%data%mesh%domain(2)%elems(1)%node_coords(:,3),tol)
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)
end subroutine testIO__read_mesh_hdf__D2_E27_M1














