!> Test for reading an hdf grid with no pmm assigned. D1_E1_M1 = One Domain, One Element, Linear Mapping
@Test
subroutine testIO__read_pmm_hdf__nopmm__D1_E1_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, IO_DESTINATION, NO_MM_ASSIGNED
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D1_E1_M1.h5'
    integer,        parameter       :: ndomains = 1
    integer(ik),    parameter       :: nterms_c = 8
    integer,        parameter       :: nelem    = 1
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'


    ! Initialize element mapping
    call chidg%start_up('core')
    

    call chidg%set('Solution Order', integer_input=2)
    !
    ! Create mesh file
    !
    call create_mesh_file("D1 NxNxN", filename,nelem_xi=1,nelem_eta=1,nelem_zeta=1)

    !
    ! Read grid and add domain to chidg
    !


    call chidg%read_mesh(filename)

    !  Test nelem
    @assertEqual(NO_MM_ASSIGNED,chidg%data%mesh%domain(1)%elems(1)%mm_ID)
    @assertEqual(NO_MM_ASSIGNED,chidg%data%mesh%domain(1)%faces(1,1)%mm_ID)
    @assertEqual(NO_MM_ASSIGNED,chidg%data%mesh%domain(1)%faces(1,2)%mm_ID)
    @assertEqual(NO_MM_ASSIGNED,chidg%data%mesh%domain(1)%faces(1,3)%mm_ID)
    @assertEqual(NO_MM_ASSIGNED,chidg%data%mesh%domain(1)%faces(1,4)%mm_ID)
    @assertEqual(NO_MM_ASSIGNED,chidg%data%mesh%domain(1)%faces(1,5)%mm_ID)
    @assertEqual(NO_MM_ASSIGNED,chidg%data%mesh%domain(1)%faces(1,6)%mm_ID)
    
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine testIO__read_pmm_hdf__nopmm__D1_E1_M1
!******************************************************************************************


!> Test for reading an hdf grid with static pmm assigned. D1_E1_M1 = One Domain, One Element, Linear Mapping
@Test
subroutine testIO__read_pmm_hdf__staticpmm__D1_E1_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, IO_DESTINATION, NO_MM_ASSIGNED
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D1_E1_M1.h5'
    integer,        parameter       :: ndomains = 1
    integer(ik),    parameter       :: nterms_c = 8
    integer,        parameter       :: nelem    = 1
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'


    ! Initialize element mapping
    call chidg%start_up('core')
    
    call chidg%set('Solution Order', integer_input=2)

    !
    ! Create mesh file, assigning static pmm
    !
    call create_mesh_file("D1 NxNxN PMM", filename,nelem_xi=1,nelem_eta=1,nelem_zeta=1)

    !
    ! Read grid and add domain to chidg
    !
    call chidg%read_mesh(filename)

    !call chidg%read_mesh_motions(filename)

    !  Test nelem
    !@assertEqual('static', chidg%data%mesh_motion(1)%mm%pmmf_name)
    @assertEqual(1, chidg%data%mesh_motion(1)%mm%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%elems(1)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,1)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,2)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,3)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,4)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,5)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,6)%mm_ID)
    
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine testIO__read_pmm_hdf__staticpmm__D1_E1_M1
!******************************************************************************************


!> Test for reading an hdf grid with static pmm assigned. D1_E1_M1 = One Domain, One Element, Linear Mapping
@Test
subroutine testIO__read_pmm_hdf__sinpmm__D1_E1_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, IO_DESTINATION, NO_MM_ASSIGNED
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D1_E1_M1.h5'
    integer,        parameter       :: ndomains = 1
    integer(ik),    parameter       :: nterms_c = 8
    integer,        parameter       :: nelem    = 1
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'


    ! Initialize element mapping
    call chidg%start_up('core')
    

    call chidg%set('Solution Order', integer_input=2)
    !
    ! Create mesh file, assigning static pmm
    !
    call create_mesh_file("D1 NxNxN PMM_SIN", filename,nelem_xi=1,nelem_eta=1,nelem_zeta=1)

    !
    ! Read grid and add domain to chidg
    !
    call chidg%read_mesh(filename)

    call chidg%read_mesh_motions(filename)


    !  Test nelem
   ! @assertEqual('sinusoidal', chidg%data%mesh_motion(1)%mm%pmmf_name)
    !@assertEqual('sin_pmm', chidg%data%mesh_motion(1)%mm%get_name())
    !@assertEqual(1.5_rk, chidg%data%mesh_motion(1)%mm%pmmf%get_option_value('L_X'))
    @assertEqual(1, chidg%data%mesh_motion(1)%mm%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%elems(1)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,1)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,2)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,3)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,4)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,5)%mm_ID)
    @assertEqual(1,chidg%data%mesh%domain(1)%faces(1,6)%mm_ID)
    
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine testIO__read_pmm_hdf__sinpmm__D1_E1_M1
!******************************************************************************************










!!> Test for reading an hdf grid. D1_E27_M1 = One Domain, 27 Elements (3x3x3), Linear Mapping
!@Test
!subroutine testIO__read_grid_hdf__D1_E27_M1() 
!    use pfunit_mod
!    use type_chidg,             only: chidg_t
!    use mod_kinds,              only: rk,ik
!    use mod_constants,          only: ZERO, ONE, THIRD, NFACES, IO_DESTINATION
!    use mod_test_utilities,     only: create_mesh_file
!    use mod_file_utilities,     only: delete_file
!    use mod_grid,               only: compute_element_mappings
!    implicit none
!    
!    type(chidg_t)                   :: chidg
!    character(100), parameter       :: filename = 'D1_E27_M1.h5'
!    integer,        parameter       :: ndomains = 1
!    integer,        parameter       :: nterms_c = 8
!    integer,        parameter       :: nelem    = 27
!    real(rk)                        :: x(8), y(8), z(8)
!    real(rk)                        :: tol
!    integer(ik)                     :: ielem, iface
!    
!    tol = 1.e-14_rk
!    IO_DESTINATION = 'file'
!
!
!    ! Initialize element mapping
!    call chidg%start_up('core')
!    
!    !
!    ! Create mesh file
!    !
!    call create_mesh_file("D1 NxNxN", filename, nelem_xi=3,nelem_eta=3,nelem_zeta=3)
!
!    !
!    ! Read grid
!    !
!    call chidg%read_mesh(filename)
!
!
!    call chidg%set('Solution Order', integer_input=2)
!    call chidg%init('domains')
!
!    
!    ! Test number of allocated domains
!    @assertEqual(ndomains,chidg%data%ndomains())
!
!    
!    ! Test domain mapping
!    @assertEqual(nterms_c,chidg%data%mesh(1)%nterms_c)
!    
!    ! Test points
!    x = [ZERO, THIRD, ZERO,  THIRD, ZERO,  THIRD, ZERO,  THIRD]
!    y = [ZERO, ZERO,  THIRD, THIRD, ZERO,  ZERO,  THIRD, THIRD]
!    z = [ZERO, ZERO,  ZERO,  ZERO,  THIRD, THIRD, THIRD, THIRD]
!    @assertEqual(x,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c1_,tol)
!    @assertEqual(y,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c2_,tol)
!    @assertEqual(z,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c3_,tol)
!    
!    !  Test nelem
!    @assertEqual(nelem,chidg%data%mesh(1)%nelem)
!    
!    
!    !  Test all elements have been initialized
!    do ielem = 1,chidg%data%mesh(1)%nelem
!        @assertTrue(chidg%data%mesh(1)%elems(ielem)%geomInitialized)
!        
!        do iface = 1,NFACES
!            @assertTrue(chidg%data%mesh(1)%faces(ielem,iface)%geomInitialized)
!        end do
!    end do
!    
!    !
!    ! Close ChiDG
!    !
!    call chidg%shut_down('core')
!
!    call delete_file(filename)
!
!end subroutine testIO__read_grid_hdf__D1_E27_M1
!
!
!
!
!
!
!
!
!
!
!
!
!
!! Test for reading an hdf grid. D2_E1_M1 = Two Domains, One Element, Linear Mapping
!@Test
!subroutine testIO__read_grid_hdf__D2_E1_M1() 
!    use pfunit_mod
!    use type_chidg,             only: chidg_t
!    use mod_kinds,              only: rk,ik
!    use mod_constants,          only: ZERO, HALF, ONE, IO_DESTINATION
!    use mod_test_utilities,     only: create_mesh_file
!    use mod_file_utilities,     only: delete_file
!    use mod_grid,               only: compute_element_mappings
!    implicit none
!    
!    type(chidg_t)                   :: chidg
!    character(100), parameter       :: filename = 'D2_E1_M1.h5'
!    integer,        parameter       :: ndomains = 2
!    integer(ik),    parameter       :: nterms_c = 8
!    integer,        parameter       :: nelem    = 1
!    integer(ik)                     :: idom
!    real(rk)                        :: x(8), y(8), z(8)
!    real(rk)                        :: tol
!    
!    tol = 1.e-14_rk
!    IO_DESTINATION = 'file'
!
!    ! Initialize element mapping
!    call chidg%start_up('core')
!    
!    !
!    ! Create mesh file
!    !
!    call create_mesh_file("D2 NxNxN M1", filename, nelem_xi =2,nelem_eta =1,nelem_zeta =1)
!
!    !
!    ! Read grid
!    !
!    call chidg%read_grid(filename)
!
!    call chidg%set('Solution Order', integer_input=2)
!    call chidg%init('domains')
!
!
!
!    ! Test number of allocated domains
!    @assertEqual(ndomains,chidg%data%ndomains())
!
!    
!    ! Test domain mapping
!    @assertEqual(nterms_c,chidg%data%mesh(1)%nterms_c)
!    @assertEqual(nterms_c,chidg%data%mesh(2)%nterms_c)
!
!
!    ! Test number of elements
!    @assertEqual(nelem,chidg%data%mesh(1)%nelem)
!    @assertEqual(nelem,chidg%data%mesh(2)%nelem)
!
!
!    ! Test points
!    x = [ZERO, HALF, ZERO, HALF, ZERO, HALF, ZERO, HALF]
!    y = [ZERO, ZERO, ONE,  ONE,  ZERO, ZERO, ONE,  ONE ]
!    z = [ZERO, ZERO, ZERO, ZERO, ONE,  ONE,  ONE,  ONE ]
!    @assertEqual(x,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c1_,tol)
!    @assertEqual(y,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c2_,tol)
!    @assertEqual(z,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c3_,tol)
!    
!    
!    x = x + HALF
!    y = [ZERO, ZERO, ONE,  ONE,  ZERO, ZERO, ONE, ONE]
!    z = [ZERO, ZERO, ZERO, ZERO, ONE,  ONE,  ONE, ONE]
!    @assertEqual(x,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c1_,tol)
!    @assertEqual(y,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c2_,tol)
!    @assertEqual(z,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c3_,tol)
!    
!
!    !
!    ! Close ChiDG
!    !
!    call chidg%shut_down('core')
!
!    call delete_file(filename)
!
!end subroutine testIO__read_grid_hdf__D2_E1_M1
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!! Test for reading an hdf grid. D2_E27_M1 = Two Domains, One Element, Linear Mapping
!@Test
!subroutine testIO__read_grid_hdf__D2_E27_M1() 
!    use pfunit_mod
!    use type_chidg,             only: chidg_t
!    use mod_kinds,              only: rk,ik
!    use mod_constants,          only: ZERO, HALF, THIRD, ONE, SIXTH, IO_DESTINATION
!    use mod_test_utilities,     only: create_mesh_file
!    use mod_file_utilities,     only: delete_file
!    use mod_grid,               only: compute_element_mappings
!    implicit none
!    
!    type(chidg_t)                   :: chidg
!    character(100), parameter       :: filename = 'D2_E27_M1.h5'
!    integer,        parameter       :: ndomains = 2
!    integer(ik),    parameter       :: nterms_c = 8
!    integer,        parameter       :: nelem    = 27
!    integer(ik)                     :: idom
!    real(rk)                        :: x(8), y(8), z(8)
!    real(rk)                        :: tol
!    
!    tol = 1.e-14_rk
!    
!    IO_DESTINATION = 'file'
!
!    ! Initialize element mapping
!    call chidg%start_up('core')
!    
!    !
!    ! Create mesh file
!    !
!    call create_mesh_file("D2 NxNxN M1", filename, nelem_xi=6, nelem_eta=3, nelem_zeta=3)
!
!    !
!    ! Read grid
!    !
!    call chidg%read_grid(filename)
!
!    call chidg%set('Solution Order', integer_input=2)
!    call chidg%init('domains')
!
!
!
!    ! Test number of allocated domains
!    @assertEqual(ndomains,chidg%data%ndomains())
!
!    
!    ! Test domain mapping
!    @assertEqual(nterms_c,chidg%data%mesh(1)%nterms_c)
!    @assertEqual(nterms_c,chidg%data%mesh(2)%nterms_c)
!
!
!    ! Test number of elements
!    @assertEqual(nelem,chidg%data%mesh(1)%nelem)
!    @assertEqual(nelem,chidg%data%mesh(2)%nelem)
!
!
!    ! Test points
!    x = [ZERO, SIXTH, ZERO, SIXTH, ZERO,  SIXTH, ZERO,  SIXTH]
!    y = [ZERO, ZERO, THIRD, THIRD, ZERO,  ZERO,  THIRD, THIRD]
!    z = [ZERO, ZERO, ZERO,  ZERO,  THIRD, THIRD, THIRD, THIRD]
!    @assertEqual(x,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c1_,tol)
!    @assertEqual(y,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c2_,tol)
!    @assertEqual(z,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c3_,tol)
!    
!    
!    x = x + HALF
!    y = [ZERO, ZERO, THIRD, THIRD, ZERO, ZERO, THIRD, THIRD]
!    z = [ZERO, ZERO, ZERO, ZERO, THIRD, THIRD, THIRD, THIRD]
!    @assertEqual(x,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c1_,tol)
!    @assertEqual(y,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c2_,tol)
!    @assertEqual(z,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c3_,tol)
!    
!    !
!    ! Close ChiDG
!    !
!    call chidg%shut_down('core')
!
!    call delete_file(filename)
!end subroutine testIO__read_grid_hdf__D2_E27_M1














