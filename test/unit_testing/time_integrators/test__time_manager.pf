!>  Test init procedure assuming the user chose 'steady'
!!
!!
!!  @author Matteo Ugolotti
!!  
!!  TODO: update tests with new features in time_manager  
!!
!---------------------------------------------------------------------------------------------

@Test
subroutine test_time_manager__init_steady()
    use pfunit_mod
    use mod_io
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO
    use type_time_manager,  only: time_manager_t

    implicit none
    
    type(time_manager_t)    :: t_manager
    
    !------------------------------------------------------------------------------------------
    !
    ! Define input data here that is normally read through the namelist, these are mod_io variables
    !
    ! These are the default values in the namelist
    !
    !------------------------------------------------------------------------------------------

    time_integrator = 'steady'
    dt              = 0.001_rk
    time_steps      = 100
    ntime_instances = 1
    frequencies     = ZERO
    nwrite          = 100


    !
    ! Initialize the time_manager based on the default time parameters, THIS BEING TESTED
    !

    call t_manager%init()
    
    !
    ! Test this subroutine
    !

    @assertEqual(time_integrator,t_manager%time_scheme)
    @assertEqual(1,t_manager%nsteps)
    @assertEqual(0,t_manager%nwrite)
    @assertEqual(1,t_manager%ntime)
     

end subroutine test_time_manager__init_steady










!>  Test init procedure assuming the user chose 'forward euler'
!!
!!
!!  @author Matteo Ugolotti
!!
!-----------------------------------------------------------------------------------------------

@Test
subroutine test_time_manager__init_unsteady()
    use pfunit_mod
    use mod_io
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO
    use type_time_manager,  only: time_manager_t

    implicit none
    
    type(time_manager_t)    :: t_manager
    
    !-------------------------------------------------------------------------------------------
    !
    ! Define input data here that is normally read through the namelist, 
    ! these are mod_io variables
    !
    !-------------------------------------------------------------------------------------------

    time_integrator = 'forward euler'
    dt              = 0.0005_rk
    time_steps      = 11
    ntime_instances = 1
    frequencies     = ZERO
    nwrite          = 105


    !
    ! Initialize the time_manager based on the default time parameters, THIS BEING TESTED
    !
    call t_manager%init()
    
    !
    ! Test this subroutine
    !
    @assertEqual(time_integrator,t_manager%time_scheme)
    @assertEqual(1,t_manager%ntime)
    @assertEqual(dt,t_manager%dt)
    @assertEqual(time_steps,t_manager%nsteps)
    @assertEqual(nwrite,t_manager%nwrite)
     

end subroutine test_time_manager__init_unsteady











!>  Test init procedure assuming the user chose 'HB'
!!
!!
!!  @author Matteo Ugolotti
!!  
!!  Added toelrance for comparison
!!
!!  @author Mayank Sharma
!!  @date   3/20/2017
!!
!--------------------------------------------------------------------------------------------

@Test
subroutine test_time_manager__init_HB1()
    use pfunit_mod
    use mod_io
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, PI, ONE, TWO, THREE
    use type_time_manager,  only: time_manager_t

    implicit none
    
    type(time_manager_t)    :: t_manager
    
    real(rk)                :: t_lev(3)
    real(rk),   parameter   :: tol = 1.e-6_rk

    !------------------------------------------------------------------------------------------
    !
    ! Define input data here that is normally read through the namelist, 
    ! these are mod_io variables
    !
    !------------------------------------------------------------------------------------------

    time_integrator = 'HB'
    dt              = 0.001_rk
    time_steps      = 10
    ntime_instances = 1
    frequencies(1)  = 10
    nwrite          = 100

    !
    ! Initialize the time_manager based on the default time parameters, THIS BEING TESTED
    !
    call t_manager%init()
    

    !
    ! Calculate expected HB time levels
    !
    t_lev = [ (TWO*PI)/10._rk*(ONE/THREE), &
              (TWO*PI)/10._rk*(TWO/THREE), &
              (TWO*PI)/10._rk*(THREE/THREE)]
    

    !
    ! Test this subroutine
    !
    @assertEqual(time_integrator,t_manager%time_scheme)
    @assertEqual(3,size(t_manager%times))
    @assertEqual(3,t_manager%ntime)
    @assertEqual(1,t_manager%nsteps)
    @assertEqual(0,t_manager%nwrite)
    @assertEqual(t_lev,t_manager%times,tol)
    @assertEqual([10],t_manager%freqs,tol)
    @assertEqual(1,size(t_manager%freqs))

end subroutine test_time_manager__init_HB1












!>  Test init procedure assuming the user chose 'HB'
!!
!!
!!  @author Matteo Ugolotti
!!
!!  Added tolerance for comparison
!!
!!  @author Mayank Sharma
!!  @date 3/20/2017
!!
!----------------------------------------------------------------------------------------------

@Test
subroutine test_time_manager__init_HB5()
    use pfunit_mod
    use mod_io
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, PI, ONE, TWO, THREE
    use type_time_manager,  only: time_manager_t

    implicit none
    
    type(time_manager_t)    :: t_manager
    
    real(rk)                :: t_lev(11)
    real(rk)                :: tmp
    integer(ik)             :: i
    real(rk),   parameter   :: tol = 1.e-6_rk

    !------------------------------------------------------------------------------------------
    !
    ! Define input data here that is normally read through the namelist, 
    ! these are mod_io variables
    !
    !------------------------------------------------------------------------------------------
    
    ! reinitialize frequencies to ZERO
    frequencies     = ZERO

    time_integrator = 'HB'
    dt              = 0.001_rk
    time_steps      = 10
    ntime_instances = 1
    frequencies(1)  = 1.1_rk
    frequencies(2)  = 15_rk
    frequencies(3)  = 13.05_rk
    frequencies(4)  = 25.0001_rk
    frequencies(5)  = 26.9_rk
    nwrite          = 100
    

    !
    ! Initialize the time_manager based on the default time parameters, THIS BEING TESTED
    !
    call t_manager%init()
    

    !
    ! Calculate expected HB time levels
    !
    do i = 1,11
        tmp = i
        t_lev(i) = (TWO*PI)/1.1_rk*(tmp/11._rk)
    end do 

    !
    ! Test this subroutine
    !
    @assertEqual(time_integrator,t_manager%time_scheme)
    @assertEqual(11,size(t_manager%times))
    @assertEqual(5, size(t_manager%freqs))
    @assertEqual(t_lev,      t_manager%times,tol)
    @assertEqual(frequencies(1:5),t_manager%freqs,tol)


end subroutine test_time_manager__init_HB5
!***************************************************************************************














!>  Test init procedure assuming the user chose 'HB'
!!
!!
!!  @author Matteo Ugolotti
!!
!!  Added tolerance for comparison
!!
!!  @author Mayank Sharma
!!  @date   3/20/2017
!!
!--------------------------------------------------------------------------------------

@Test
subroutine test_time_manager__init_HB25()
    use pfunit_mod
    use mod_io
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, PI, ONE, TWO, THREE
    use type_time_manager,  only: time_manager_t

    implicit none
    
    type(time_manager_t)    :: t_manager
    
    real(rk)                :: t_lev(51)
    real(rk)                :: tmp
    integer(ik)             :: i
    real(rk),   parameter   :: tol = 1.e-6_rk

    !------------------------------------------------------------------------------------------
    !
    ! Define input data here that is normally read through the namelist, 
    ! these are mod_io variables
    !
    !------------------------------------------------------------------------------------------
    
    ! reinitialize frequencies to ZERO
    frequencies     = ZERO

    time_integrator = 'HB'
    dt              = 0.001_rk
    time_steps      = 10
    ntime_instances = 1
    frequencies(1)  = 2.1_rk
    frequencies(2)  = 15_rk
    frequencies(3)  = 13.05_rk
    frequencies(4)  = 25.0001_rk
    frequencies(5)  = 26.9_rk
    frequencies(6)  = 27.8_rk
    frequencies(7)  = 30.9_rk
    frequencies(8)  = 53.5_rk
    frequencies(9)  = 54.4_rk
    frequencies(10)  = 60.3_rk
    frequencies(11)  = 62.2_rk
    frequencies(12)  = 65.1_rk
    frequencies(13)  = 69.1_rk
    frequencies(14)  = 69.5_rk
    frequencies(15)  = 75.9_rk
    frequencies(16)  = 78.0_rk
    frequencies(17)  = 85.0_rk
    frequencies(18)  = 93.3_rk
    frequencies(18)  = 98.99_rk
    frequencies(19)  = 103.4_rk
    frequencies(20)  = 110.5_rk
    frequencies(21)  = 120.5_rk
    frequencies(22)  = 135.1_rk
    frequencies(23)  = 140.0_rk
    frequencies(24)  = 156.0_rk
    frequencies(25)  = 234.09_rk
    nwrite          = 100
    

    !
    ! Initialize the time_manager based on the default time parameters, THIS BEING TESTED
    !
    call t_manager%init()
    

    !
    ! Calculate expected HB time levels
    !
    do i = 1,51
        tmp = i
        t_lev(i) = (TWO*PI)/2.1_rk*(tmp/51._rk)
    end do 

    !
    ! Test this subroutine
    !
    @assertEqual(time_integrator,t_manager%time_scheme)
    @assertEqual(51,size(t_manager%times))
    @assertEqual(25,size(t_manager%freqs))
    @assertEqual(t_lev,t_manager%times,tol)
    @assertEqual(frequencies(1:25),t_manager%freqs,tol)


end subroutine test_time_manager__init_HB25
