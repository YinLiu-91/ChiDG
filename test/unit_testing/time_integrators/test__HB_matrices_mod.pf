module test__HB_matrices_mod
#include<messenger.h>
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants 
    use mod_HB_matrices,    only: calc_inv_E, calc_diff_inv_E, calc_pseudo_spectral_operator
    implicit none

    public  :: HB_matrices

    !>  This parameter initializes the state for each test
    !!
    !!  @author Mayank Sharma
    !!  @date   26/1/2017
    !!
    !------------------------------------------------------------------------------------------
    @testParameter
    type, extends( AbstractTestParameter )  :: case_number_frequencies
        integer(ik)                         :: nfreq
        integer(ik)                         :: ntime
        real(rk),   allocatable             :: freq(:)
        real(rk),   allocatable             :: time(:)
        real(rk),   allocatable             :: test_invE(:,:)
        real(rk),   allocatable             :: test_dinvE(:,:)
        real(rk),   allocatable             :: test_D(:,:)

    contains
        procedure       :: toString
    end type case_number_frequencies
    !******************************************************************************************



    !>  Main texting fixture with test components that get initialized for each test
    !!
    !!  @author Mayank Sharma
    !!  @date   26/1/2017
    !!
    !------------------------------------------------------------------------------------------
    @testCase(testParameters = {getParameters()}, constructor = newTest)
    type, extends( ParameterizedTestCase )      :: HB_matrices
        integer(ik)                 :: nfreq
        integer(ik)                 :: ntime
        real(rk),   allocatable     :: freq(:)
        real(rk),   allocatable     :: time(:)
        real(rk),   allocatable     :: test_invE(:,:)
        real(rk),   allocatable     :: test_dinvE(:,:)
        real(rk),   allocatable     :: test_D(:,:)

    end type HB_matrices
    !******************************************************************************************


contains



    !>  Parameter constructors
    !!
    !!  @author Mayank Sharma
    !!  @date   26/1/2017
    !!
    !------------------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_number_frequencies),  intent(in)      :: test_parameter

        type(HB_matrices)   :: test

        test%nfreq      = test_parameter%nfreq
        test%ntime      = test_parameter%ntime
        test%freq       = test_parameter%freq
        test%time       = test_parameter%time
        test%test_invE  = test_parameter%test_invE
        test%test_dinvE = test_parameter%test_dinvE
        test%test_D     = test_parameter%test_D

    end function newTest
    !******************************************************************************************



    !>  Parameter initialization
    !!
    !!  @author Mayank Sharma
    !!  @date   26/1/2017
    !!
    !------------------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_number_frequencies), allocatable   :: params(:)

        integer(ik),    allocatable     :: nfreq(:)
        integer(ik),    allocatable     :: ntime(:)
        real(rk)                        :: freq_1(1), freq_2(2), freq_3(3)
        real(rk)                        :: time_3(3), time_5(5), time_7(7)
        real(rk),       allocatable     :: test_invE_3x3(:,:), test_invE_5x5(:,:), test_invE_7x7(:,:)
        real(rk),       allocatable     :: test_dinvE_3x3(:,:), test_dinvE_5x5(:,:), test_dinvE_7x7(:,:)
        real(rk),       allocatable     :: test_D_3x3(:,:), test_D_5x5(:,:), test_D_7x7(:,:)

        integer(ik)     :: icase

        nfreq = [1, 2, 3]
        ntime = [3, 5, 7]

        freq_1 = [0.20000000000000001]
        freq_2 = [0.20000000000000001, 0.40000000000000002]
        freq_3 = [0.20000000000000001, 0.40000000000000002, 0.60000000000000009]

        time_3 = [10.471975511965976, 20.943951023931952, 31.415926535897928]
        time_5 = [6.2831853071795862, 12.566370614359172, 18.849555921538759, 25.132741228718345, 31.415926535897935]
        time_7 = [4.4879895051282759, 8.9759790102565518, 13.463968515384826, 17.951958020513104, 22.439947525641379, 26.927937030769652, 31.415926535897928]

        allocate(test_invE_3x3(3,3), test_dinvE_3x3(3,3), test_D_3x3(3,3))
        allocate(test_invE_5x5(5,5), test_dinvE_5x5(5,5), test_D_5x5(5,5))
        allocate(test_invE_7x7(7,7), test_dinvE_7x7(7,7), test_D_7x7(7,7))

        test_invE_3x3 = transpose(reshape([1.0000000000000000, 0.86602540378443882, -0.49999999999999978, & 
                                           1.0000000000000000, -0.86602540378443837, -0.50000000000000044, &
                                           1.0000000000000000, -2.2204460492503131E-016, 1.0000000000000000], &
                                           shape(test_invE_3x3)))
        test_invE_5x5 = transpose(reshape([1.0000000000000000, 0.95105651629515353,     0.58778525229247325,     0.30901699437494745,  -0.80901699437494734, &
                                           1.0000000000000000, 0.58778525229247325,     -0.95105651629515375,    -0.80901699437494745, 0.30901699437494712,  &
                                           1.0000000000000000, -0.58778525229247303,    0.95105651629515364,     -0.80901699437494745, 0.30901699437494745,  &
                                           1.0000000000000000, -0.95105651629515375,    -0.58778525229247247,    0.30901699437494745,  -0.80901699437494745, &
                                           1.0000000000000000, 6.6613381477509392E-016, 1.3322676295501878E-015, 1.0000000000000000, 1.0000000000000000],    &
                                           shape(test_invE_5x5)))
        test_invE_7x7 = transpose(reshape([1.0000000000000000, 0.78183148246802969,      0.97492791218182362,      0.43388373911755779,  0.62348980185873359,  & 
                                           -0.22252093395631434, -0.90096886790241926, &
                                           1.0000000000000000, 0.97492791218182362,      -0.43388373911755795,     -0.78183148246802947, -0.22252093395631434, &
                                           -0.90096886790241915, 0.62348980185873404,  &
                                           1.0000000000000000, 0.43388373911755823,      -0.78183148246802991,     0.97492791218182218,  -0.90096886790241903, &
                                           0.62348980185873337,  -0.22252093395631434, &
                                           1.0000000000000000, -0.43388373911755806,     0.78183148246803036,      -0.97492791218182440, -0.90096886790241992, &
                                           0.62348980185873382,  -0.22252093395631256, &
                                           1.0000000000000000, -0.97492791218182351,     0.43388373911755984,      0.78183148246803036,  -0.22252093395631434, &
                                           -0.90096886790241903, 0.62348980185873337,  &
                                           1.0000000000000000, -0.78183148246802991,     -0.97492791218182262,     -0.43388373911755806, 0.62348980185873337,  &
                                           -0.22252093395631434, -0.90096886790241903, &
                                           1.0000000000000000, -2.2204460492503131E-016, -8.8817841970012523E-016, 0.0000000000000000, 1.0000000000000000,     &
                                           1.0000000000000004,   1.0000000000000000],                 & 
                                           shape(test_invE_7x7)))

        test_dinvE_3x3 = transpose(reshape([0.0000000000000000, -9.9999999999999964E-002, -0.17320508075688779,     &
                                            0.0000000000000000, -0.10000000000000009,     0.17320508075688767,      &
                                            0.0000000000000000, 0.20000000000000001,      4.8985871965894131E-017], &
                                            shape(test_dinvE_3x3)))
        test_dinvE_5x5 = transpose(reshape([0.0000000000000000, 6.1803398874989493E-002, -0.32360679774997897, -0.19021130325903071,     -0.23511410091698931,      &
                                            0.0000000000000000, -0.16180339887498948,    0.12360679774997890,  -0.11755705045849466,     0.38042260651806148,       &
                                            0.0000000000000000, -0.16180339887498951,    0.12360679774997910,  0.11755705045849461,      -0.38042260651806137,      &
                                            0.0000000000000000, 6.1803398874989451E-002, -0.32360679774997908, 0.19021130325903074,      0.23511410091698914,       &
                                            0.0000000000000000, 0.20000000000000001,     0.40000000000000002,  -1.2864981197413094E-016, -5.1459924789652375E-016], & 
                                            shape(test_dinvE_5x5)))
        test_dinvE_7x7 = transpose(reshape([0.0000000000000000, 0.12469796037174673,      -8.9008373582525738E-002, -0.54058132074145160, -0.15636629649360595,     &
                                            -0.38997116487272948,   -0.26033024347053468,      &
                                            0.0000000000000000, -4.4504186791262869E-002, -0.36038754716096766,     0.37409388111524050,  -0.19498558243636474,     &
                                            0.17355349564702321,     0.46909888948081774,      &
                                            0.0000000000000000, -0.18019377358048383,     0.24939592074349337,      -0.13351256037378847, -8.6776747823511649E-002, &
                                            0.31273259298721201,    -0.58495674730909430,      &
                                            0.0000000000000000, -0.18019377358048383,     0.24939592074349354,      -0.13351256037378786, 8.6776747823511607E-002,  &
                                            -0.31273259298721184,    0.58495674730909442,      &
                                            0.0000000000000000, -4.4504186791262917E-002, -0.36038754716096760,     0.37409388111523961,  0.19498558243636471,      &
                                            -0.17355349564702338,    -0.46909888948081840,     &
                                            0.0000000000000000, 0.12469796037174669,      -8.9008373582525932E-002, -0.54058132074145171, 0.15636629649360601,      &
                                            0.38997116487272943,     0.26033024347053457,      &
                                            0.0000000000000000, 0.20000000000000001,      0.40000000000000002,      0.60000000000000009,  4.8985871965894131E-017,  &
                                            1.9594348786357652E-016, 4.4087284769304721E-016], &
                                            shape(test_dinvE_7x7)))

        test_D_3x3 = transpose(reshape([-1.3877787807814457E-017, 0.11547005383792515,     -0.11547005383792514,      &
                                        -0.11547005383792516,     4.1633363423443370E-017, 0.11547005383792512,       &
                                        0.11547005383792518,      -0.11547005383792515,    -1.8621756992965618E-017], &
                                        shape(test_D_3x3)))
        test_D_5x5 = transpose(reshape([8.3266726846886741E-017, 0.17013016167040795,     -0.10514622242382665,     0.10514622242382662,     &
                                        -0.17013016167040795,      &
                                        -0.17013016167040804,    3.4694469519536142E-017, 0.17013016167040793,      -0.10514622242382667,    &
                                        0.10514622242382671,       &
                                        0.10514622242382682,     -0.17013016167040793,    -7.6327832942979512E-017, 0.17013016167040795,     &
                                        -0.10514622242382675,      &
                                        -0.10514622242382686,    0.10514622242382672,     -0.17013016167040806,     1.6653345369377348E-016, &
                                        0.17013016167040801,       &
                                        0.17013016167040815,     -0.10514622242382682,    0.10514622242382682,      -0.17013016167040787,    &
                                        -2.9126774540943760E-016], & 
                                        shape(test_D_5x5)))
        test_D_7x7 = transpose(reshape([-1.1102230246251565E-016, 0.23047648709624874,      -0.12790480076899335,    0.10257168632725533,      &
                                        -0.10257168632725538,     0.12790480076899327,  -0.23047648709624866,     &
                                        -0.23047648709624863,     -1.5265566588595902E-016, 0.23047648709624879,     -0.12790480076899322,     &
                                        0.10257168632725538,      -0.10257168632725540, 0.12790480076899322,      &
                                        0.12790480076899360,      -0.23047648709624863,     6.2450045135165055E-017, 0.23047648709624846,      &
                                        -0.12790480076899302,     0.10257168632725541,  -0.10257168632725541,     &
                                        -0.10257168632725523,     0.12790480076899308,      -0.23047648709624860,    -2.7755575615628914E-017, &
                                        0.23047648709624879,      -0.12790480076899335, 0.10257168632725547,      &
                                        0.10257168632725525,      -0.10257168632725511,     0.12790480076899322,     -0.23047648709624849,     &
                                        -2.9143354396410359E-016, 0.23047648709624899,  -0.12790480076899341,     &
                                        -0.12790480076899305,     0.10257168632725544,      -0.10257168632725541,    0.12790480076899327,      &
                                        -0.23047648709624874,     0.0000000000000000,   0.23047648709624852,      &
                                        0.23047648709624835,      -0.12790480076899360,     0.10257168632725545,     -0.10257168632725534,     &
                                        0.12790480076899327,      -0.23047648709624896, 2.7628582961655765E-016], &
                                        shape(test_D_7x7)))

        allocate(params(3))
        do icase = 1,3

            params(icase)%nfreq = nfreq(icase)
            params(icase)%ntime = ntime(icase)

            select case(icase)
                case(1)
                    params(icase)%freq       = freq_1
                    params(icase)%time       = time_3
                    params(icase)%test_invE  = test_invE_3x3
                    params(icase)%test_dinvE = test_dinvE_3x3
                    params(icase)%test_D     = test_D_3x3
                case(2)
                    params(icase)%freq       = freq_2
                    params(icase)%time       = time_5
                    params(icase)%test_invE  = test_invE_5x5
                    params(icase)%test_dinvE = test_dinvE_5x5
                    params(icase)%test_D     = test_D_5x5
                case(3)
                    params(icase)%freq       = freq_3
                    params(icase)%time       = time_7
                    params(icase)%test_invE  = test_invE_7x7
                    params(icase)%test_dinvE = test_dinvE_7x7
                    params(icase)%test_D     = test_D_7x7
            end select

        end do

    end function getParameters
    !******************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!  @author Mayank Sharma
    !!  @date   26/1/2017
    !!
    !------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class(case_number_frequencies),     intent(in)  :: this
        character(len = :), allocatable     :: string

        character(len = 200)    :: buffer

        write(buffer,'( "(nfreq, ntime) = ","(", I2, ",", I2, ")" )') this%nfreq, this%ntime
        string = trim(buffer)

    end function toString
    !******************************************************************************************



    !>  The main test
    !!
    !!      - Test the matrices computed using subroutines in the source code with the ones 
    !!        passed in parameter initialization
    !!      - Test whether the diagonal elements of the pseudo spectral operator are close to 0
    !!
    !!
    !------------------------------------------------------------------------------------------
    @test
    subroutine test__HB_matrices(this)
        class(HB_matrices), intent(inout)       :: this

        real(rk),   allocatable    :: invE(:,:) 
        real(rk),   allocatable    :: dinvE(:,:)
        real(rk),   allocatable    :: D(:,:)
        real(rk)                   :: primary_tol = 0.00001, secondary_tol = 0.0000001 ! primary_tol is used to compare the test matrices with the computed matrices
                                                                            ! secondary_tol is used to compare the diagonal elements of D with zero
        integer(ik) :: i,j,ierr

        ! Allocate the HB matrices
        if (allocated(invE))  deallocate(invE)
        if (allocated(dinvE)) deallocate(dinvE)
        if (allocated(D))     deallocate(D)
        allocate(invE(this%ntime,this%ntime),   &
                 dinvE(this%ntime,this%ntime),  &
                 D(this%ntime,this%ntime),stat=ierr)
        if (ierr /= 0) call AllocationError

        ! Compute HB matrices. THIS IS BEING TESTED
        call calc_inv_E(this%nfreq, this%ntime, this%freq, this%time, invE)
        call calc_diff_inv_E(this%nfreq, this%ntime, this%freq, this%time, dinvE)
        D = calc_pseudo_spectral_operator(this%freq,this%time)

        ! Compare test matrices with computed matrices within a given tolerance
        @assertEqual(this%test_invE,  invE,  primary_tol)
        @assertEqual(this%test_dinvE, dinvE, primary_tol)
        @assertEqual(this%test_D,     D,     primary_tol)

        ! Test whether the diagonal elements of the pseudo spectral operator are close to ZERO
        do i = 1,this%ntime
            do j = 1,this%ntime
                if (i == j) then
                    @assertEqual(ZERO, D(i,j), secondary_tol)
                end if
            end do
        end do

    end subroutine test__HB_matrices
    !******************************************************************************************





end module test__HB_matrices_mod
