!  Test if the temporal components of the residual are computed correctly
!  in the harmonic balance method
!
!
!  @author Mayank Sharma 
!  @date   3/1/2017
!
!-----------------------------------------------------------------------------------------------
module test__harmonic_balance_mod
#include<messenger.h>
    use pfunit_mod
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO,ONE,TWO,PI,IO_DESTINATION,dQ_DIFF
    use mod_io                 
    use type_chidg,             only: chidg_t
    use type_meshdata,          only: meshdata_t
    use mod_bc,                 only: create_bc
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_spatial,            only: update_space
    use mod_time,               only: time_manager_global
    use type_chidg_vector,      only: chidg_vector_t
    use mod_string,             only: string_t
   
    use type_chidg_worker,      only: chidg_worker_t
    use type_properties,        only: properties_t

    use mod_operators,          only: operator_factory
    use type_operator,          only: operator_t

    use mod_equations,          only: equation_set_factory
    use type_equation_builder,  only: equation_builder_t
    use type_equation_set,      only: equation_set_t
    
    use type_time_integrator,   only: time_integrator_t
    use type_system_assembler,  only: system_assembler_t
    use type_harmonic_balance,  only: harmonic_balance_t,assemble_harmonic_balance_t
 
    implicit none



    !>  Define an operator for the equation set used in this test
    !!
    !!  @author Mayank Sharma
    !!  @date   3/7/2017
    !!
    !---------------------------------------------------------------------------------------------
    type, extends(operator_t), public   :: test_blank_operator_t


    contains

        procedure   :: init    => init_blank
        procedure   :: compute => compute_blank


    end type test_blank_operator_t
    !*********************************************************************************************



    !>  Define a new equation set builder for this test. The equation set is 'blank' because
    !!  we want to set the spatial residual terms ourselves and not have the code compute them
    !!
    !!  @author Mayank Sharma
    !!  @date   3/7/2017
    !!
    !---------------------------------------------------------------------------------------------
    type, extends(equation_builder_t), public   :: test_blank_equation_set_builder_t


    contains

        procedure   :: init => init_builder
        procedure   :: build


    end type test_blank_equation_set_builder_t
    !*********************************************************************************************



contains



    !>  Initialize operator. The operator type doesn't matter here since we aren't computing
    !!  here
    !!
    !!  @author Mayank Sharma
    !!  @date   3/7/2017
    !!
    !---------------------------------------------------------------------------------------------
    subroutine init_blank(self)
        class(test_blank_operator_t),   intent(inout)   :: self

        ! Set operator name
        call self%set_name("Test Blank Operator")

        ! Set operator type
        call self%set_operator_type("Volume Diffusive Flux") 

        ! Set operator equations
        call self%add_primary_field("u")


    end subroutine init_blank
    !*********************************************************************************************



    !>  Compute operator terms. NOTHING is being done here
    !!
    !!  @author Mayank Sharma
    !!  @date   3/7/2017
    !!
    !---------------------------------------------------------------------------------------------
    subroutine compute_blank(self,worker,prop)
        class(test_blank_operator_t),   intent(inout)   :: self
        type(chidg_worker_t),           intent(inout)   :: worker
        class(properties_t),            intent(inout)   :: prop


    end subroutine compute_blank
    !*********************************************************************************************



    !>  Initialize equation set builder
    !!
    !!  @author Mayank Sharma
    !!  @date   3/7/2017
    !!
    !---------------------------------------------------------------------------------------------
    subroutine init_builder(self)
        class(test_blank_equation_set_builder_t), intent(inout) :: self

        call self%set_name("Test Blank Equation Set")


    end subroutine init_builder
    !*********************************************************************************************



    !>  Implement the equation set builder definition
    !!
    !!  @author Mayank Sharma
    !!  @date   3/7/2017
    !!
    !---------------------------------------------------------------------------------------------
    function build(self,blueprint) result(test_blank_eqn)
        class(test_blank_equation_set_builder_t), intent(in)    :: self
        character(*),                             intent(in)    :: blueprint

        type(equation_set_t)            :: test_blank_eqn


        !
        ! Set equation set name
        !
        call test_blank_eqn%set_name("Test Blank Equation Set")

        !
        ! Add spatial operators
        !
        call test_blank_eqn%add_operator("Test Blank Operator")


    end function build
    !*********************************************************************************************



    !>  Test the temporal residual contributions from the harmonic balance method
    !!
    !!  @author Mayank Sharma
    !!  @date   3/7/2017
    !!
    !---------------------------------------------------------------------------------------------
    @Test
    subroutine test__harmonic_balance
        type(test_blank_operator_t)             :: operator_test_blank_equation_set
        type(test_blank_equation_set_builder_t) :: builder_test_blank_equation_set
        type(assemble_harmonic_balance_t)       :: assemble_HB
        type(chidg_t)                           :: chidg
        type(meshdata_t),   allocatable         :: meshdata(:)
        type(chidg_vector_t)                    :: q_temp, rhs_temp
        type(string_t)                          :: eqnset(1)
        integer(ik)                             :: nterms_s, ielem, itime, ierr
        real(rk),           dimension(8)        :: vals, vref_a, vref_b
        real(rk),           dimension(8)        :: ref_1, ref_2, ref_3, ref_4, ref_5,  &
                                                   ref_6, ref_7, ref_8, ref_9, ref_10, &
                                                   ref_11, ref_12, ref_13, ref_14, ref_15
        real(rk)                                :: tol
        character(:),       allocatable         :: filename


        !
        ! Initialize and register operator 
        !
        call operator_test_blank_equation_set%init()
        call operator_factory%register(operator_test_blank_equation_set)


        !
        ! Initialize and register equation set builder
        !
        call builder_test_blank_equation_set%init()
        call equation_set_factory%register(builder_test_blank_equation_set%build('default'))


        !
        ! Define input data
        !
        tol              = 1.e-13_rk
        nterms_s         = 8
        IO_DESTINATION   = 'file'
        time_integrator  = 'Harmonic Balance'
        nonlinear_solver = 'newton'
        linear_solver    = 'fgmres'
        preconditioner   = 'ILU0'
        frequencies      = ZERO
        frequencies(1)   = 2.0_rk*PI



        !
        ! Initialize ChiDG
        ! Also initializes time_manager
        !
        call chidg%start_up('core')

        
!        !
!        ! Set linear and nonlinear solver options
!        !
!        call loptions%set("tol",1.e-15_rk)
!        call noptions%set("tol",5.e-11_rk)
!        call noptions%set("cfl0",1.0_rk)
!        call noptions%set("nsteps",100)


        !
        ! Set chidg components
        !
        call chidg%set('Solution Order',   integer_input=2)
        call chidg%set('Time Integrator',  algorithm = time_integrator)
!        call chidg%set('Nonlinear Solver', algorithm = nonlinear_solver, options = noptions)
!        call chidg%set('Linear Solver',    algorithm = linear_solver,    options = loptions)
!        call chidg%set('Preconditioner',   algorithm = preconditioner)

        
        !
        ! Set equation set string
        !
        call eqnset(1)%set("Test Blank Equation Set")


        !
        ! Create grid file
        !
        filename = "D1_2x2x2_singleblock.h5"
        call create_mesh_file("D1 NxNxN", filename, equation_sets = eqnset, &
                                                    nelem_xi = 2, nelem_eta = 2, nelem_zeta = 2)


        !
        ! Get grid points
        !
        call chidg%read_mesh(filename)



        !
        ! Initialize the time integrator
        !
        call chidg%time_integrator%init()
        

        associate ( q   => chidg%data%sdata%q, &
                    rhs => chidg%data%sdata%rhs)

!            !
!            ! Set spatial residual contributions
!            !
!            vals  = 0.3_rk
!            call rhs%dom(1)%vecs(3)%settime(1,vals)
!
!            vals = 0.1_rk
!            call rhs%dom(1)%vecs(1)%settime(2,vals)
!
!            vals = 0.2_rk
!            call rhs%dom(1)%vecs(7)%settime(2,vals)
!
!            vals = 0.4_rk
!            call rhs%dom(1)%vecs(6)%settime(3,vals)
             

            !
            ! Set solution vector
            !
            vals = 0.8_rk
            call q%dom(1)%vecs(2)%settime(1,vals)

            vals = 0.6_rk
            call q%dom(1)%vecs(8)%settime(1,vals)

            vals = 0.7_rk
            call q%dom(1)%vecs(1)%settime(2,vals)

            vals = 0.9_rk
            call q%dom(1)%vecs(5)%settime(3,vals)


            !
            ! Perform harmonic balance assemble operation
            ! THIS IS BEING TESTED
            !
            call assemble_HB%assemble(chidg%data,differentiate=dQ_DIFF)


            !
            ! Compute reference values
            !
            associate ( D      => chidg%data%time_manager%D, &
                        domain => chidg%data%mesh%domain(1) )
                
                ! WUKIE: this was included the contributions from the spatial terms
                ! however we changed that the rhs gets zeroed in the assemble routine
                ! so its better just to check the time terms. Changed appropriately
                ! below.
                !vref_a = 0.7_rk
                !ref_1 = D(1,2)*matmul(domain%elems(1)%mass,vref_a)
                !vref_a = 0.1_rk; vref_b = 0.7_rk
                !ref_2 = vref_a + D(2,2)*matmul(domain%elems(1)%mass,vref_b) 
                !vref_a = 0.7_rk
                !ref_3 = D(3,2)*matmul(domain%elems(1)%mass,vref_a)
                !vref_a = 0.8_rk 
                !ref_4 = D(1,1)*matmul(domain%elems(2)%mass,vref_a)
                !ref_5 = D(2,1)*matmul(domain%elems(2)%mass,vref_a)
                !ref_6 = D(3,1)*matmul(domain%elems(2)%mass,vref_a)
                !vref_a = 0.3_rk
                !ref_7 = vref_a
                !vref_a = 0.9_rk 
                !ref_8 = D(1,3)*matmul(domain%elems(5)%mass,vref_a)
                !ref_9 = D(2,3)*matmul(domain%elems(5)%mass,vref_a) 
                !ref_10 = D(3,3)*matmul(domain%elems(5)%mass,vref_a)
                !vref_a = 0.4_rk
                !ref_11 = vref_a
                !vref_a = 0.2_rk
                !ref_12 = vref_a
                !vref_a = 0.6_rk 
                !ref_13 = D(1,1)*matmul(domain%elems(8)%mass,vref_a)
                !ref_14 = D(2,1)*matmul(domain%elems(8)%mass,vref_a) 
                !ref_15 = D(3,1)*matmul(domain%elems(8)%mass,vref_a)


                vref_a = 0.7_rk
                ref_1 = D(1,2)*matmul(domain%elems(1)%mass,vref_a)
                vref_a = ZERO; vref_b = 0.7_rk
                ref_2 = vref_a + D(2,2)*matmul(domain%elems(1)%mass,vref_b) 
                vref_a = 0.7_rk
                ref_3 = D(3,2)*matmul(domain%elems(1)%mass,vref_a)
                vref_a = 0.8_rk 
                ref_4 = D(1,1)*matmul(domain%elems(2)%mass,vref_a)
                ref_5 = D(2,1)*matmul(domain%elems(2)%mass,vref_a)
                ref_6 = D(3,1)*matmul(domain%elems(2)%mass,vref_a)
                vref_a = ZERO
                ref_7 = vref_a
                vref_a = 0.9_rk 
                ref_8 = D(1,3)*matmul(domain%elems(5)%mass,vref_a)
                ref_9 = D(2,3)*matmul(domain%elems(5)%mass,vref_a) 
                ref_10 = D(3,3)*matmul(domain%elems(5)%mass,vref_a)
                vref_a = ZERO
                ref_11 = vref_a
                vref_a = ZERO
                ref_12 = vref_a
                vref_a = 0.6_rk 
                ref_13 = D(1,1)*matmul(domain%elems(8)%mass,vref_a)
                ref_14 = D(2,1)*matmul(domain%elems(8)%mass,vref_a) 
                ref_15 = D(3,1)*matmul(domain%elems(8)%mass,vref_a)

            end associate


            !
            ! Test assemble operation
            !
            @assertEqual(ref_1, rhs%dom(1)%vecs(1)%gettime(1),tol)
            @assertEqual(ref_2, rhs%dom(1)%vecs(1)%gettime(2),tol)
            @assertEqual(ref_3, rhs%dom(1)%vecs(1)%gettime(3),tol)
            @assertEqual(ref_4, rhs%dom(1)%vecs(2)%gettime(1),tol)
            @assertEqual(ref_5, rhs%dom(1)%vecs(2)%gettime(2),tol)
            @assertEqual(ref_6, rhs%dom(1)%vecs(2)%gettime(3),tol)
            @assertEqual(ref_7, rhs%dom(1)%vecs(3)%gettime(1),tol)
            @assertEqual(ref_8, rhs%dom(1)%vecs(5)%gettime(1),tol)
            @assertEqual(ref_9, rhs%dom(1)%vecs(5)%gettime(2),tol)
            @assertEqual(ref_10,rhs%dom(1)%vecs(5)%gettime(3),tol)
            @assertEqual(ref_11,rhs%dom(1)%vecs(6)%gettime(3),tol)
            @assertEqual(ref_12,rhs%dom(1)%vecs(7)%gettime(2),tol)
            @assertEqual(ref_13,rhs%dom(1)%vecs(8)%gettime(1),tol)
            @assertEqual(ref_14,rhs%dom(1)%vecs(8)%gettime(2),tol)
            @assertEqual(ref_15,rhs%dom(1)%vecs(8)%gettime(3),tol)


        end associate


        call chidg%shut_down('core')

        !
        ! Reset io variables so that they can be used by other tests
        !
        time_integrator = 'steady'
        
        call delete_file(filename)


    end subroutine test__harmonic_balance
    !*********************************************************************************************


end module test__harmonic_balance_mod
