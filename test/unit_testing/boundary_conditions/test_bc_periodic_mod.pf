module test_bc_periodic_mod
    use pfunit_mod
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ONE
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_string,             only: string_t
    use mod_bc,                 only: create_bc
    use type_chidg,             only: chidg_t
    use type_bc_state,          only: bc_state_t
    use type_bc_state_group,    only: bc_state_group_t
    use mod_io
    implicit none

    public  :: test_bc_periodic


    !>  This test sets up a 2x2x2-element grid specifying 'Periodic' boundary
    !!  state functions on all 6 faces with the appropriate offset parameters
    !!  to initialize periodic coupling with the opposite face.
    !!
    !!  The current test is that all of the setup and initialization is 
    !!  completed without error. Thid includes setting up the Chimera
    !!  interpolations induced from the Periodic boundary.
    !!
    !!  At the moment, no hard check is done to ensure that particular 
    !!  elements are connected to the correct element in the periodic location.
    !!
    !!  @author Nathan A. Wukie
    !!  @date   3/1/2017
    !!
    !!
    !--------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_bc_periodic

        type(chidg_t)   :: chidg

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_bc_periodic
    !**************************************************************************


contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !! derived type procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_bc_periodic),    intent(inout)   :: this
        
        class(bc_state_t),  allocatable :: bc_state
        type(bc_state_group_t)          :: bc_state_groups(6)
        type(string_t)                  :: group_names(1,6)


        !------------------------------------------------------------------------------
        !
        ! Define input data here that is normally read through the namelist input file
        !
        ! As a result, we don't call chidg%init('io')
        !
        !------------------------------------------------------------------------------
        basis            = "legendre"
        gq_rule          = 1
        time_integrator  = "steady"
        nonlinear_solver = "newton"
        linear_solver    = "fgmres"
        preconditioner   = "ILU0"
        IO_DESTINATION   = "file"


        ! Set linear solver options to pass during initialization
        call loptions%set("tol",1.e-14_rk)

        ! Set nonlinear solver options
        call noptions%set("tol",5.e-10_rk)
        call noptions%set("cfl0",1.0_rk)
        call noptions%set("nsteps",100)
        !------------------------------------------------------------------------------


        !
        ! Start up ChiDG
        ! 
        call this%chidg%start_up('core')


        !
        ! Set ChiDG components
        !
        call this%chidg%set('Solution Order',   integer_input=2)
        call this%chidg%set('Time Integrator',  algorithm=time_integrator)
        call this%chidg%set('Nonlinear Solver', algorithm=nonlinear_solver, options=noptions)
        call this%chidg%set('Linear Solver',    algorithm=linear_solver,    options=loptions)
        call this%chidg%set('Preconditioner',   algorithm=preconditioner)


        !
        ! Create mesh. 2x2x2. Periodic offsets specified on all boundaries
        !
        if (IRANK == GLOBAL_MASTER) then


            call create_bc('Periodic', bc_state)


            call bc_state%set_fcn_option('Offset-1','val',ONE)
            call bc_state%set_fcn_option('Offset-2','val',ZERO)
            call bc_state%set_fcn_option('Offset-3','val',ZERO)
            bc_state_groups(1)%name = 'Periodic X Min'
            call bc_state_groups(1)%add_bc_state(bc_state)

            call bc_state%set_fcn_option('Offset-1','val',-ONE)
            call bc_state%set_fcn_option('Offset-2','val',ZERO)
            call bc_state%set_fcn_option('Offset-3','val',ZERO)
            bc_state_groups(2)%name = 'Periodic X Max'
            call bc_state_groups(2)%add_bc_state(bc_state)

            call bc_state%set_fcn_option('Offset-1','val',ZERO)
            call bc_state%set_fcn_option('Offset-2','val',ONE)
            call bc_state%set_fcn_option('Offset-3','val',ZERO)
            bc_state_groups(3)%name = 'Periodic Y Min'
            call bc_state_groups(3)%add_bc_state(bc_state)

            call bc_state%set_fcn_option('Offset-1','val',ZERO)
            call bc_state%set_fcn_option('Offset-2','val',-ONE)
            call bc_state%set_fcn_option('Offset-3','val',ZERO)
            bc_state_groups(4)%name = 'Periodic Y Max'
            call bc_state_groups(4)%add_bc_state(bc_state)

            call bc_state%set_fcn_option('Offset-1','val',ZERO)
            call bc_state%set_fcn_option('Offset-2','val',ZERO)
            call bc_state%set_fcn_option('Offset-3','val',ONE)
            bc_state_groups(5)%name = 'Periodic Z Min'
            call bc_state_groups(5)%add_bc_state(bc_state)

            call bc_state%set_fcn_option('Offset-1','val',ZERO)
            call bc_state%set_fcn_option('Offset-2','val',ZERO)
            call bc_state%set_fcn_option('Offset-3','val',-ONE)
            bc_state_groups(6)%name = 'Periodic Z Max'
            call bc_state_groups(6)%add_bc_state(bc_state)


            group_names(1,:) = [ string_t('Periodic X Min'), &
                                 string_t('Periodic X Max'), &
                                 string_t('Periodic Y Min'), &
                                 string_t('Periodic Y Max'), &
                                 string_t('Periodic Z Min'), &
                                 string_t('Periodic Z Max') ]


            call create_mesh_file('D1 NxNxN','test_file.h5',equation_sets   = [string_t('Scalar Advection')], &
                                                            group_names     = group_names,                    &
                                                            bc_state_groups = bc_state_groups,                &
                                                            nelem_xi        = 2,                              &
                                                            nelem_eta       = 2,                              &
                                                            nelem_zeta      = 2)
        end if


        !
        ! Read grid
        !
        call this%chidg%read_mesh('test_file.h5')


    end subroutine setUp
    !*************************************************************************************
    

    !>
    !!
    !!
    !-------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_bc_periodic),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')


        if (IRANK == GLOBAL_MASTER) then
            call delete_file('test_file.h5')
        end if



    end subroutine tearDown
    !*************************************************************************************









    !>  The purpose of this test is just to make sure the above setUp routine is called
    !!  and executes without error.
    !!
    !!  If this routine passes, it means the above setup was executed without triggering
    !!  an error. This implies all Chimera boundaries associated with the Periodic
    !!  boundaries found quadrature donors, and the Periodic boundary itself was allocated
    !!  and initialized without an error in initialization.
    !!
    !!  @author Nathan A. Wukie
    !!  @date   3/1/2017
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine test_bc__periodic__setup(self)
        class(test_bc_periodic), intent(inout)   :: self

        @assertTrue(.true.)

    end subroutine test_bc__periodic__setup
    !**************************************************************************************









end module test_bc_periodic_mod
