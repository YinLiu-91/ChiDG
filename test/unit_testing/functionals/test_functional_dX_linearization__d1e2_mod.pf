!>  The dX linearization of the functionals is tested here.
!!
!!  @author Matteo Ugolotti
!!  @date   9/28/2018
!!
!!  The 1D problem for this case is
!!
!!      J = \int_0^{1/2} frac{x-a}{2*(c-a)} dx + \int_{1/2}^1 frac{x-c}{2*(b-c)} dx
!!
!!
!!      +                  *
!!      |      u = x     *
!!      |              *
!!      |            *
!!      |          *
!!      +        *
!!      |      *
!!      |    *
!!      |  *
!!      |*
!!      +---------+---------+
!!     a         c         b
!!
!!  where a and b are the lower and upper bounds of the integral that is the x location
!!  of the nodes laying on face xi_min and xi_max of first and second element, respectively.
!!  c is the interface between element 1 and 2.
!!  Then,
!!
!!      J = J_ac + J_cb = \frac{a-c}{4} + \frac{3}{4}*(b-c)
!!
!!  Taking the derivative wrt the left boundary dJ/da and right boundary of the first element are
!!
!!      dJ_ac/da = -1/4
!!      dJ_ac/dc = 1/4
!!
!!  For the second element we have
!!
!!      dJ_cb/dc = -3/4
!!      dJ_cb/db = 3/4
!!  
!!
!!  Since the numerical problem is solved in 3D we expect to find that derivatives wrt to
!!  each node belonging to the xi_min and xi_max are 1/4 of the analytical 1D derivatives.
!!  That is
!!
!!      dJ_ac/dx_1 = -0.0625
!!      dJ_ac/dx_3 = -0.0625
!!      dJ_ac/dx_5 = -0.0625
!!      dJ_ac/dx_7 = -0.0625
!!      dJ_ac/dx_2 =  0.0625
!!      dJ_ac/dx_4 =  0.0625
!!      dJ_ac/dx_6 =  0.0625
!!      dJ_ac/dx_8 =  0.0625
!!
!!  and 
!!
!!      dJ_cd/dx_1 = -0.1875
!!      dJ_cd/dx_3 = -0.1875
!!      dJ_cd/dx_5 = -0.1875
!!      dJ_cd/dx_7 = -0.1875
!!      dJ_cd/dx_2 =  0.1875
!!      dJ_cd/dx_4 =  0.1875
!!      dJ_cd/dx_6 =  0.1875
!!      dJ_cd/dx_8 =  0.1875
!!
!!                               7_____________ 8 
!!                               /            /|
!!                              /____________/ |
!!      eta   zeta             3|          4|  |
!!         | /                  |           |  |
!!         |/                   |           |  |
!!         +---- xi             |           |  |6
!!                              |           | /
!!                              |___________|/
!!                              1           2
!!                      
!!
!!  Derivatives in eta and zeta direction will not be zero and can be derived by Finite-Difference
!!  (NOTE DONE HERE)
!!
!!
!----------------------------------------------------------------------------------------------
module test_functional_dX_linearization__d1e2_mod
    use pfunit_mod
    use mod_kinds,                      only: rk,ik
    use mod_constants,                  only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, HALF, dX_DIFF
    use mod_test_utilities,             only: create_mesh_file
    use mod_file_utilities,             only: delete_file
    use type_function,                  only: function_t
    use mod_function,                   only: create_function, registered_fcns
    use mod_chidg_mpi,                  only: IRANK, NRANK, ChiDG_COMM
    use mpi_f08,                        only: MPI_COMM, MPI_REAL8, MPI_SUM
    use mod_polynomial,                 only: polynomial_val

    use type_chidg,                     only: chidg_t
    use type_cache_data,                only: cache_data_t
    use mod_string,                     only: string_t
    use type_bc_state,                  only: bc_state_t
    use type_bc_state_group,            only: bc_state_group_t
    use mod_bc,                         only: create_bc
    use mod_functional,                 only: registered_functional
    use type_evaluator,                 only: evaluator_t
    use type_point_ad,                  only: point_ad_t

    use type_integral_cache,            only: integral_cache_t
    use type_functional_cache_handler,  only: functional_cache_handler_t
    use mod_update_functionals,         only: update_functionals

    use mod_inv,                        only: inv
     
    use mod_test_functional_utilities
    use mod_io
    use DNAD_D

    implicit none

    public  :: test_functional_dx_lin



    !>  The test case object that carries the initialized chidg state to the actual tests.
    !!
    !!  @author Matteo Ugolotti
    !!  @date   28/9/2018
    !!
    !------------------------------------------------------------------------------------------
    @TestCase
    type, extends(MpiTestCase) ::  test_functional_dx_lin

        character(len=9)            :: gridfile = "D1E2M1.h5"
        type(chidg_t)               :: chidg
        type(mpi_comm)              :: ChiDG_COMM
        integer(ik)                 :: solution_order = 2

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_functional_dx_lin
    !******************************************************************************************







    !>  Function implementing an initial solution for scalar advection 
    !!  sets a linear variation in x direction from 1 to 3.
    !!
    !!
    !!  @author Matteo Ugolotti
    !!  @date   9/28/2018
    !!
    !!
    !-------------------------------------------------------------------------------
    type, extends(function_t), public :: initial_solution_f


    contains

        procedure   :: init => init_initial_solution
        procedure   :: compute => compute_initial_solution

    end type initial_solution_f
    !********************************************************************************






contains


    !-------------------------------------------------------------------------------!
    !                     Implement Initial Solution Function                       !
    !-------------------------------------------------------------------------------!



    !>
    !!
    !!  @author Matteo Ugolotti
    !!  @date   9/28/2018
    !!
    !-------------------------------------------------------------------------
    subroutine init_initial_solution(self)
        class(initial_solution_f),  intent(inout)  :: self

        !
        ! Set function name
        !
        call self%set_name("Test Compute Initial Solution")


    end subroutine init_initial_solution
    !*************************************************************************







    !>
    !!
    !!  @author Matteo Ugolotti
    !!  @date   9/28/2018
    !!
    !!
    !-----------------------------------------------------------------------------------------
    impure elemental function compute_initial_solution(self,time,coord) result(val)
        class(initial_solution_f),  intent(inout)   :: self
        real(rk),                   intent(in)      :: time
        type(point_ad_t),           intent(in)      :: coord

        type(AD_D)  :: x, y, z, val


        x = coord%c1_
        y = coord%c2_
        z = coord%c3_

        val = x
        

    end function compute_initial_solution
    !**********************************************************************************
    
    
    
    
    
    
    
    !>  NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !!  derived type procedure. The argument names have to match
    !!
    !!  @author Matteo Ugolotti 
    !!  @date   28/9/2018
    !!
    !------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_functional_dx_lin),    intent(inout)   :: this
        
        type(initial_solution_f)                :: initial_solution
        
        type(string_t)                  :: group_names(1,6)
        type(bc_state_group_t)          :: bc_state_groups(3)
        class(bc_state_t),  allocatable :: bc_state
        class(function_t),  allocatable :: fcn
       
        
        
        

        !
        ! Get MPI communicator information from pFUnit
        !
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()
       
       
        
        !
        ! Initialize ChiDG environment
        !
        call this%chidg%start_up('mpi',this%ChiDG_COMM)
        call this%chidg%start_up('core')
        
        gq_rule = 1
        
        !-------------------------------------------!
        !     Register initial solution function    !
        !-------------------------------------------!
        call initial_solution%init()
        call registered_fcns%push_back(initial_solution)
       
        !-------------------------------------------!
        !     Send io to file                       !
        !-------------------------------------------!
        IO_DESTINATION   = 'file'
        
        
        call this%chidg%data%time_manager%init()

       
        
        !
        ! Let the first chidg instance to create common gridfile
        !
        if (IRANK == GLOBAL_MASTER) then
        
            group_names(1,:) = [string_t("LHS")           , &
                                string_t("RHS")           , &
                                string_t("Extrapolation") , &
                                string_t("Extrapolation") , &
                                string_t("Extrapolation") , &
                                string_t("Extrapolation")]

            bc_state_groups(1)%name = "LHS"
            call create_bc("Scalar Value",bc_state)
            call bc_state%set_fcn_option("Value","val",ZERO)
            call bc_state_groups(1)%add_bc_state(bc_state)

            bc_state_groups(2)%name = "RHS"
            call create_bc("Scalar Value",bc_state)
            call bc_state%set_fcn_option("Value","val",ONE)
            call bc_state_groups(2)%add_bc_state(bc_state)

            bc_state_groups(3)%name = "Extrapolation"
            call create_bc("Scalar Extrapolate", bc_state)
            call bc_state_groups(3)%add_bc_state(bc_state)
            
            
            call create_mesh_file('D1 NxNxN',this%gridfile,                         &
                                             group_names     = group_names,         &
                                             bc_state_groups = bc_state_groups,     &
                                             nelem_xi        = 2,                   &
                                             nelem_eta       = 1,                   &
                                             nelem_zeta      = 1,                   &
                                             x_min_in        = 0._rk,              &
                                             x_max_in        = 1._rk                )
        

            !
            ! Add functional to gridfile
            !
            call meshfile_add_functional(this%gridfile,'Test 1D integral','01')
        
        end if
        
        
        !
        ! Set the accuracy for the solution expansion
        !
        call this%chidg%set('Solution Order', integer_input=this%solution_order)

        !
        ! Read grid + bcs
        !
        call this%chidg%read_mesh(this%gridfile,'adjointx storage')

        !
        ! Initialize solution
        !
        call create_function(fcn,'Test Compute Initial Solution')
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,1)



    end subroutine setUp
    !******************************************************************************************
    

    !>
    !!
    !!  @author Matteo Ugolotti 
    !!  @date   28/9/2018
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_functional_dx_lin),    intent(inout)   :: this

        !
        ! Close all ChiDG interface
        !
        call this%chidg%shut_down('core')
            
        if (IRANK == GLOBAL_MASTER) then
            call delete_file(this%gridfile)
        end if

    end subroutine tearDown
    !******************************************************************************************





    !>  Test volume functional with dX linearization
    !!
    !!  @author Matteo Ugolotti 
    !!  @date   28/9/2018
    !!
    !------------------------------------------------------------------------------------------
    !@Test(npes=[1,2,3])
    @Test(npes=[1])
    subroutine test_functional_cache__dx_lin(self)
        class(test_functional_dx_lin),    intent(inout)   :: self
        
        integer(ik)                         :: ielem, nnodes_r
        real(rk)                            :: tol
        real(rk),           allocatable     :: dJdx(:), ref_deriv(:)
        class(function_t),  allocatable     :: fcn

        
        tol = 1.e-6_rk
        self%chidg%data%time_manager%istep = 1

        ! Test updated functionals dX linearization
        call update_functionals(self%chidg%data,differentiate=dX_DIFF)

        ! Allocate reference vectors
        nnodes_r = self%chidg%data%mesh%domain(1)%elems(1)%nterms_c

        ! TEST
        do ielem = 1,self%chidg%data%sdata%adjointx%Jx(1)%dom(1)%nelements()

            ! Allocate ref_deriv
            if (ielem == 1) then
                ref_deriv = [-ONE,ONE,ONE,-ONE,-ONE,ONE,ONE,-ONE]
                ref_deriv = ref_deriv * 0.0625_rk
            else if (ielem == 2) then
                ref_deriv = [-ONE,ONE,ONE,-ONE,-ONE,ONE,ONE,-ONE]
                ref_deriv = ref_deriv * 0.1875_rk
            end if

            dJdx = self%chidg%data%sdata%adjointx%Jx(1)%dom(1)%vecs(ielem)%vec

            ! TEST
            @assertEqual(ref_deriv,dJdx(1:nnodes_r),tol)
        
        end do

    end subroutine test_functional_cache__dx_lin
    !******************************************************************************************







end module test_functional_dX_linearization__d1e2_mod
