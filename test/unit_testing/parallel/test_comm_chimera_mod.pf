module test_comm_chimera_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: XI_MIN, XI_MAX, DIAG, BOUNDARY, IO_DESTINATION, &
                                          ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use type_chidg,                 only: chidg_t
    use type_chidg_matrix,           only: chidg_matrix_t
    use type_chidg_vector,           only: chidg_vector_t
    use mod_chidg_mpi,              only: IRANK, NRANK, GLOBAL_MASTER
    use mpi_f08,                    only: MPI_COMM
    use pfunit_mod
    implicit none



    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !------------------------------------------------------------------
    @TestCase
    type, extends(MpiTestCase) :: test_comm_chimera

        type(chidg_t)   :: chidg

        character(len=:),   allocatable :: gridfile
        integer(ik)                     :: nterms_s = 27
        integer(ik)                     :: solution_order = 3
        type(mpi_comm)                  :: ChiDG_COMM

    contains
        procedure       :: setUp
        procedure       :: tearDown
    end type test_comm_chimera
    !******************************************************************




contains

    !>  This test reads two, 2x2x2 element domains that are overlapping to test the 
    !!  chimera communication.
    !!
    !!  Overlapping cubes. Each cube is 2x2x2 elements. Only one element of overlap
    !!
    !!
    !!    |--------|-|---------|
    !!    |        | |         |
    !!    |        | |         |
    !!    |        | |         |
    !!    |--------|-|---------|
    !!
    !!
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   7/12/2016
    !!
    !-----------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_comm_chimera), intent(inout) :: this

        integer(ik)                     :: iread, ierr, ielem
        real(rk)                        :: initial_vals(this%nterms_s)

        
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        call this%chidg%start_up('mpi',this%ChiDG_COMM)
        call this%chidg%start_up('core')


        this%gridfile  = 'D2E8M1_overlapping_matching.h5'
        IO_DESTINATION = 'file'


        !
        ! Create mesh file
        !
        if (IRANK == GLOBAL_MASTER) then
            call create_mesh_file("D2 E8 M1 : Overlapping : Matching",this%gridfile)
        end if
        call MPI_Barrier(this%ChiDG_COMM,ierr)


        !
        ! Set accuracy for the solution expansion
        !
        call this%chidg%set('Solution Order', integer_input=this%solution_order)



        !
        ! Read partition data: grid, boundary conditions
        !
        call this%chidg%read_mesh(this%gridfile)



    end subroutine setUp
    !*****************************************************************************************




    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_comm_chimera), intent(inout) :: this

        call this%chidg%shut_down('core')
        call this%chidg%shut_down('mpi')

        if (IRANK == GLOBAL_MASTER) then
            call delete_file(this%gridfile)
        end if

    end subroutine tearDown
    !******************************************************************************************







    !>  Trigger setUp to verify initialization completes successfully.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !-----------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4,5,6,7])
    subroutine detect_chimera_donors_comm(self)
        class(test_comm_chimera), intent(inout) :: self


        IRANK = self%getProcessRank()

        @assertTrue(.true.)

    end subroutine detect_chimera_donors_comm
    !*****************************************************************************************







end module test_comm_chimera_mod
