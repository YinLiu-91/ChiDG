module test_comm_D1E4_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: XI_MIN, XI_MAX, DIAG, BOUNDARY, IO_DESTINATION, &
                                          ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, &
                                          NINE, TEN
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use type_chidg,                 only: chidg_t
    use type_chidg_matrix,          only: chidg_matrix_t
    use type_chidg_vector,          only: chidg_vector_t
    use mod_chidg_mpi,              only: IRANK, NRANK, GLOBAL_MASTER
    use operator_chidg_dot,         only: dot
    use operator_chidg_mv,          only: chidg_mv
    use mpi_f08,                    only: MPI_COMM
    use pfunit_mod
    implicit none



    !>  
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !-----------------------------------------------------------------------------------------
    @TestCase
    type, extends(MpiTestCase) :: test_comm_D1E4

        type(chidg_t)   :: chidg

        character(:),   allocatable :: gridfile
        integer(ik)                 :: nterms_s = 27
        integer(ik)                 :: solution_order = 3
        type(mpi_comm)              :: ChiDG_COMM

    contains
        procedure       :: setUp
        procedure       :: tearDown
    end type test_comm_D1E4
    !*****************************************************************************************




contains



    !>  This test reads a 4x1x1 element grid using 1, 2, 3, and 4 processors and tests 
    !!  communication data.
    !!
    !!  For reference, the partitions from METIS are as follows. NOTE: This could change
    !!  if the settings for METIS partitioning were changed. In that case, the partitions
    !!  here and corresponding tests would need updated with the correct indices.
    !!
    !!  Legend:
    !!  --------------------------------------------------------------------
    !!  Interior numbers = global indices
    !!  Exterior numbers = local indices
    !!
    !!  Numbers in matrix diagram indicate what entry in the 
    !!  vector they are multiplied with.
    !!
    !!  Cases:
    !!  ---------------------------------------------------------------------
    !!
    !!  NRANK = 0
    !!
    !!      IRANK = 0                                     [ 1 2     ]   [ 1 ]
    !!  .---.---.---.---.                                 [ 1 2 3   ] * [ 2 ]
    !!  | 1 | 2 | 3 | 4 |                                 [   2 3 4 ]   [ 3 ]
    !!  .---.---.---.---.                                 [     3 4 ]   [ 4 ]
    !!    1   2   3   4
    !!
    !!
    !!
    !!  NRANK = 2
    !!
    !!  IRANK = 0      IRANK = 1                          [ 1 2     ]   [ 1 ]
    !!  .---.---.      .---.---.                          [ 1 2 3   ] * [ 2 ]
    !!  | 1 | 2 |      | 3 | 4 |
    !!  .---.---.      .---.---.                          [   2 3 4 ]   [ 3 ]
    !!    1   2          1   2                            [     3 4 ]   [ 4 ]
    !!
    !!
    !!
    !!  NRANK = 3
    !!
    !!  IRANK = 0   IRANK = 1   IRANK = 2                 [ 1 2     ]   [ 1 ]
    !!    .---.       .---.     .---.---.     
    !!    | 1 |       | 2 |     | 3 | 4 |                 [ 1 2 3   ] * [ 2 ]
    !!    .---.       .---.     .---.---.     
    !!      1           1         1   2                   [   2 3 4 ]   [ 3 ]
    !!                                                    [     3 4 ]   [ 4 ]
    !!
    !!
    !!  NRANK = 4
    !!
    !!  IRANK = 0   IRANK = 1   IRANK = 2   IRANK = 3     [ 1 2     ]   [ 1 ]
    !!    .---.       .---.       .---.       .---.                          
    !!    | 2 |       | 1 |       | 4 |       | 3 |       [ 1 2 3   ] * [ 2 ]
    !!    .---.       .---.       .---.       .---.                          
    !!      1           1           1           1         [   2 3 4 ]   [ 3 ]
    !!
    !!                                                    [     3 4 ]   [ 4 ]
    !!
    !!  ---------------------------------------------------------------------
    !!
    !!
    !!  Using 1 processor, all communication(face neighbors) should be local. 
    !!  Using 4 processors, all communication should occur globally, across 
    !!  processors.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/21/2016
    !!
    !-----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_comm_D1E4), intent(inout) :: this

        integer(ik) :: iread, ierr, ielem, ivar, itime, iproc
        real(rk)    :: initial_vals(this%nterms_s)

        
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        call this%chidg%start_up('mpi',this%ChiDG_COMM)
        call this%chidg%start_up('core')


        IO_DESTINATION = 'file'
        this%gridfile  = 'D1E4M1.h5'

        !
        ! Create mesh
        !
        if (IRANK == GLOBAL_MASTER) then
            call create_mesh_file("D1 NxNxN",this%gridfile,nelem_xi=4,nelem_eta=1,nelem_zeta=1)
        end if
        call MPI_Barrier(this%ChiDG_COMM,ierr)


        !
        ! Set accuracy for the solution expansion
        !
        call this%chidg%set('Solution Order', integer_input=this%solution_order)


        !
        ! Read partition data: grid, boundary conditions
        !
        call this%chidg%read_mesh(this%gridfile)

        

        !
        ! Initialize solution vector
        !
        initial_vals = 1.2_rk
        ivar = 1
        itime = 1
        do ielem = 1,this%chidg%data%mesh%domain(1)%nelem
            call this%chidg%data%sdata%q%dom(1)%vecs(ielem)%setvar(ivar,itime,initial_vals)
        end do


    end subroutine setUp
    !******************************************************************************************




    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_comm_D1E4), intent(inout) :: this

        call this%chidg%shut_down('core')
        call this%chidg%shut_down('mpi')

        if (IRANK == GLOBAL_MASTER) then
            call delete_file(this%gridfile)
        end if

    end subroutine tearDown
    !******************************************************************************************









    !>  Test the parallel computation of the chidgVector norm. 
    !!  This tests the routine: chidgVector%norm_comm
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !------------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine chidg_vector__norm_comm(self)
        class(test_comm_D1E4), intent(inout) :: self

        integer(ik)     :: nelem
        real(rk)        :: computed_norm, expected_norm

        IRANK = self%getProcessRank()


        !
        ! Compute vector norm across processors. THIS IS BEING TESTED
        !
        computed_norm = self%chidg%data%sdata%q%norm(self%ChiDG_COMM)


        nelem = 4
        expected_norm = (1.2_rk**TWO) * self%nterms_s * nelem
        expected_norm = sqrt(expected_norm)

        
        @assertEqual(expected_norm,computed_norm)

    end subroutine chidg_vector__norm_comm
    !******************************************************************************************











    !>  Test the parallel computation of the chidgVector norm. 
    !!  This tests the routine: chidgVector%norm_comm
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !------------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine chidg_vector__dot_comm(self)
        class(test_comm_D1E4), intent(inout) :: self

        type(chidg_vector_t) :: a, b
        integer(ik)         :: nelem
        real(rk)            :: computed_dot, expected_dot

        IRANK = self%getProcessRank()

        ! Create two ChiDG Vectors
        a = self%chidg%data%sdata%q
        b = self%chidg%data%sdata%q


        ! Compute vector dot-product across processors. THIS IS BEING TESTED
        computed_dot = dot(a,b,self%ChiDG_COMM)


        ! Compute expected result
        nelem = 4
        expected_dot = (1.2_rk*1.2_rk) * self%nterms_s * nelem


        @assertEqual(expected_dot,computed_dot,1.e-12_rk)


    end subroutine chidg_vector__dot_comm
    !******************************************************************************************










    !>  Test that storage has been allocated in the chidg_vector for receiving data from neighbor
    !!  processors. For each processor:
    !!      - check the size of the receiving storate communicator. a%recv%comm
    !!      - check that the parent element indices of the element to be received is correct
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/30/3016
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine chidg_vector__init_recv(self)
        class(test_comm_D1E4), intent(inout) :: self

        type(chidg_vector_t) :: a

        IRANK = self%getProcessRank()
        NRANK = self%getNumProcessesRequested()

        ! Copy a ChiDG Vector
        a = self%chidg%data%sdata%q


        if (NRANK == 1) then

            @assertEqual(0,size(a%recv%comm))





        else if (NRANK == 2) then

            if (IRANK == 0) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(3,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
                
            else if (IRANK == 1) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
            end if







        else if (NRANK == 3) then

            if (IRANK == 0) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
            else if (IRANK == 1) then

                @assertEqual(2,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())

                @assertEqual(1,size(a%recv%comm(2)%dom))
                @assertEqual(1,size(a%recv%comm(2)%dom(1)%vecs))

                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(3,a%recv%comm(2)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%eparent_l())


            else if (IRANK == 2) then

                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())

            end if






        else if (NRANK == 4) then

            if (IRANK == 0) then

                @assertEqual(2,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())

                @assertEqual(1,size(a%recv%comm(2)%dom))
                @assertEqual(1,size(a%recv%comm(2)%dom(1)%vecs))
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(3,a%recv%comm(2)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%eparent_l())


            else if (IRANK == 1) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())


            else if (IRANK == 2) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(3,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())


            else if (IRANK == 3) then
                @assertEqual(2,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_g())
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_l())
                @assertEqual(4,a%recv%comm(2)%dom(1)%vecs(1)%eparent_g())
                @assertEqual(1,a%recv%comm(2)%dom(1)%vecs(1)%eparent_l())

            end if





        end if

    end subroutine chidg_vector__init_recv
    !********************************************************************************************










    !>  Test the parallel computation of the chidg matrix-vector product, chidg_mv.
    !!  This tests the routine: chidg_mv(A,x)
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   7/1/2016
    !!
    !---------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine parallel_chidg_mv(self)
        class(test_comm_D1E4), intent(inout) :: self

        type(chidg_matrix_t) :: A
        type(chidg_vector_t) :: x, b
        integer(ik)          :: nelem, imat, itime
        real(rk)             :: computed_dot, expected_dot

        IRANK = self%getProcessRank()
        itime = 1

        !
        ! Create chidg_matrix and two chidg_vectors
        !
        A = self%chidg%data%sdata%lhs
        x = self%chidg%data%sdata%q
        b = self%chidg%data%sdata%q


        !
        ! Initialize with some data
        !
        if (NRANK == 1) then

            !
            ! Element 1
            !
            ! DIAG
            imat = A%dom(1)%lblks(1,1)%loc(1,1,itime)
            A%dom(1)%lblks(1,1)%data_(imat)%mat = ONE

            ! XI_MAX
            imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
            A%dom(1)%lblks(1,1)%data_(imat)%mat = FIVE

            ! X-Vector
            x%dom(1)%vecs(1)%vec = 11._rk
            
            !
            ! Element 2
            !
            ! XI_MIN
            imat = A%dom(1)%lblks(2,1)%loc(1,1,itime)
            A%dom(1)%lblks(2,1)%data_(imat)%mat = EIGHT

            ! DIAG
            imat = A%dom(1)%lblks(2,1)%loc(1,2,itime)
            A%dom(1)%lblks(2,1)%data_(imat)%mat = TWO

            ! XI_MAX
            imat = A%dom(1)%lblks(2,1)%loc(1,3,itime)
            A%dom(1)%lblks(2,1)%data_(imat)%mat = SIX

            ! X-Vector
            x%dom(1)%vecs(2)%vec = 12._rk

            !
            ! Element 3
            !
            ! XI_MIN
            imat = A%dom(1)%lblks(3,1)%loc(1,2,itime)
            A%dom(1)%lblks(3,1)%data_(imat)%mat = NINE

            ! DIAG 
            imat = A%dom(1)%lblks(3,1)%loc(1,3,itime)
            A%dom(1)%lblks(3,1)%data_(imat)%mat = THREE

            ! XI_MAX
            imat = A%dom(1)%lblks(3,1)%loc(1,4,itime)
            A%dom(1)%lblks(3,1)%data_(imat)%mat = SEVEN

            ! X-Vector
            x%dom(1)%vecs(3)%vec = 13._rk

            !
            ! Element 4
            !
            ! XI_MIN
            imat = A%dom(1)%lblks(4,1)%loc(1,3,itime)
            A%dom(1)%lblks(4,1)%data_(imat)%mat = TEN

            ! DIAG 
            imat = A%dom(1)%lblks(4,1)%loc(1,4,itime)
            A%dom(1)%lblks(4,1)%data_(imat)%mat = FOUR
            
            ! X-Vector
            x%dom(1)%vecs(4)%vec = 14._rk



        else if (NRANK == 2) then

            if (IRANK == 0) then
                !
                ! Element 1 (ielem_l = 1)
                !

                ! DIAG
                imat = A%dom(1)%lblks(1,1)%loc(1,1,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = ONE

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = FIVE

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 11._rk


                !
                ! Element 2 (ielem_l = 2)
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(2,1)%loc(1,1,itime)
                A%dom(1)%lblks(2,1)%data_(imat)%mat = EIGHT

                ! DIAG
                imat = A%dom(1)%lblks(2,1)%loc(1,2,itime)
                A%dom(1)%lblks(2,1)%data_(imat)%mat = TWO

                ! XI_MAX
                imat = A%dom(1)%lblks(2,1)%loc(1,3,itime)
                A%dom(1)%lblks(2,1)%data_(imat)%mat = SIX

                ! X-Vector
                x%dom(1)%vecs(2)%vec = 12._rk



            else if (IRANK == 1) then
                !
                ! Element 3 (ielem_l = 1)
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = NINE

                ! DIAG 
                imat = A%dom(1)%lblks(1,1)%loc(1,3,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = THREE

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,4,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = SEVEN

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 13._rk

                
                !
                ! Element 4 (ielem_l = 2)
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(2,1)%loc(1,3,itime)
                A%dom(1)%lblks(2,1)%data_(imat)%mat = TEN

                ! DIAG 
                imat = A%dom(1)%lblks(2,1)%loc(1,4,itime)
                A%dom(1)%lblks(2,1)%data_(imat)%mat = FOUR
                
                ! X-Vector
                x%dom(1)%vecs(2)%vec = 14._rk

            end if


        else if (NRANK == 3) then

            if (IRANK == 0) then
                !
                ! Element 1
                !
                ! DIAG
                imat = A%dom(1)%lblks(1,1)%loc(1,1,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = ONE

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = FIVE

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 11._rk

            else if (IRANK == 1) then
                !
                ! Element 2
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(1,1)%loc(1,1,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = EIGHT

                ! DIAG
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = TWO

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,3,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = SIX

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 12._rk

                
            else if (IRANK == 2) then
                !
                ! Element 3
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = NINE

                ! DIAG 
                imat = A%dom(1)%lblks(1,1)%loc(1,3,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = THREE

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,4,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = SEVEN

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 13._rk

                !
                ! Element 4
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(2,1)%loc(1,3,itime)
                A%dom(1)%lblks(2,1)%data_(imat)%mat = TEN

                ! DIAG 
                imat = A%dom(1)%lblks(2,1)%loc(1,4,itime)
                A%dom(1)%lblks(2,1)%data_(imat)%mat = FOUR
                
                ! X-Vector
                x%dom(1)%vecs(2)%vec = 14._rk


            end if


        else if (NRANK == 4) then

            if (IRANK == 0) then
                !
                ! Element 2
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(1,1)%loc(1,1,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = EIGHT

                ! DIAG
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = TWO

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,3,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = SIX

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 12._rk

            else if (IRANK == 1) then
                !
                ! Element 1
                !
                ! DIAG
                imat = A%dom(1)%lblks(1,1)%loc(1,1,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = ONE

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = FIVE

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 11._rk

            else if (IRANK == 2) then
                !
                ! Element 4
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(1,1)%loc(1,3,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = TEN

                ! DIAG 
                imat = A%dom(1)%lblks(1,1)%loc(1,4,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = FOUR
                
                ! X-Vector
                x%dom(1)%vecs(1)%vec = 14._rk

            else if (IRANK == 3) then
                !
                ! Element 3
                !
                ! XI_MIN
                imat = A%dom(1)%lblks(1,1)%loc(1,2,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = NINE

                ! DIAG 
                imat = A%dom(1)%lblks(1,1)%loc(1,3,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = THREE

                ! XI_MAX
                imat = A%dom(1)%lblks(1,1)%loc(1,4,itime)
                A%dom(1)%lblks(1,1)%data_(imat)%mat = SEVEN

                ! X-Vector
                x%dom(1)%vecs(1)%vec = 13._rk
                

            end if


        end if





        !
        ! Compute vector dot-product across processors. THIS IS BEING TESTED
        !
        b = chidg_mv(A,x)






        if (NRANK == 1) then

            @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)
            @assertEqual(5130._rk,  b%dom(1)%vecs(2)%vec)
            @assertEqual(6615._rk,  b%dom(1)%vecs(3)%vec)
            @assertEqual(5022._rk,  b%dom(1)%vecs(4)%vec)


        else if (NRANK == 2) then

            if (IRANK == 0) then
                @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)
                @assertEqual(5130._rk,  b%dom(1)%vecs(2)%vec)

            else if (IRANK == 1) then
                @assertEqual(6615._rk,  b%dom(1)%vecs(1)%vec)
                @assertEqual(5022._rk,  b%dom(1)%vecs(2)%vec)

            end if


        else if (NRANK == 3) then

            if (IRANK == 0) then
                @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)

            else if (IRANK == 1) then
                @assertEqual(5130._rk,  b%dom(1)%vecs(1)%vec)

            else if (IRANK == 2) then
                @assertEqual(6615._rk,  b%dom(1)%vecs(1)%vec)
                @assertEqual(5022._rk,  b%dom(1)%vecs(2)%vec)

            end if


        else if (NRANK == 4) then

            if (IRANK == 0) then
                @assertEqual(5130._rk,  b%dom(1)%vecs(1)%vec)
            else if (IRANK == 1) then
                @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)
            else if (IRANK == 2) then
                @assertEqual(5022._rk,  b%dom(1)%vecs(1)%vec)
            else if (IRANK == 3) then
                @assertEqual(6615._rk,  b%dom(1)%vecs(1)%vec)
            end if

        end if



    end subroutine parallel_chidg_mv
    !******************************************************************************************





























end module test_comm_D1E4_mod
