!>  Testing new overloaded operators for DNAD_D
!!
!!      - matmul Matrix(Dual)-Vector(real)
!!
!------------------------------------------------------------------

!>  matmul Matrix(Dual)-Vector(real)
!!
!!  Result derived by hand using AD steps
!!
!!  @author Matteo Ugolotti
!!  @date   10/13/2018
!!
!------------------------------------------------------------------
@Test
subroutine test_matmul_ADmat_RKvec_1() 
    use pfunit_mod
    use DNAD_D
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, ONE, TWO
    
    implicit none
    
    real(rk)    :: vec(3), tol
    type(AD_D)  :: mat(3,3), result_(3)
    integer(ik) :: icol, irow

    tol = 1.e-13_rk

    vec = [ ONE, TWO, ONE ]
    
    do irow = 1,3
        do icol = 1,3
            mat(irow,icol) = AD_D(1)
        end do
    end do
    
    !
    ! Set mat real parts
    ! 
    mat(1,1)%x_ad_ = ONE
    mat(1,2)%x_ad_ = ZERO
    mat(1,3)%x_ad_ = 2.1_rk
    mat(2,1)%x_ad_ = ONE
    mat(2,2)%x_ad_ = 1.3_rk
    mat(2,3)%x_ad_ = ZERO
    mat(3,1)%x_ad_ = 6.1_rk
    mat(3,2)%x_ad_ = 3.5_rk
    mat(3,3)%x_ad_ = -1.4_rk

    !
    ! Set mat derivatives
    !
    mat(1,1)%xp_ad_ = 1.1_rk
    mat(1,2)%xp_ad_ = 1.2_rk
    mat(1,3)%xp_ad_ = 1.3_rk
    mat(2,1)%xp_ad_ = 2.1_rk
    mat(2,2)%xp_ad_ = -2.2_rk
    mat(2,3)%xp_ad_ = 2.3_rk
    mat(3,1)%xp_ad_ = 3.1_rk
    mat(3,2)%xp_ad_ = 3.2_rk
    mat(3,3)%xp_ad_ = 3.3_rk
    
    
    result_ = matmul(mat,vec)


    !
    ! Test real value
    !
    @assertEqual(3.1_rk ,result_(1)%x_ad_,tol)
    @assertEqual(3.6_rk ,result_(2)%x_ad_,tol)
    @assertEqual(11.7_rk,result_(3)%x_ad_,tol)

    !
    ! Test derivatives
    !
    @assertEqual(4.8_rk ,result_(1)%xp_ad_(1),tol)
    @assertEqual(0.0_rk ,result_(2)%xp_ad_(1),tol)
    @assertEqual(12.8_rk,result_(3)%xp_ad_(1),tol)

end subroutine



!>  matmul Matrix(Dual)-Vector(real)
!!
!!  Result computed using analytical derivatives.
!!
!!             mat           * vec  =      res
!!
!!  | x+1     x^2+2.1     0 | | 1 |   | 2x^2+x+5.2 |  for x=1   | 8.2|
!!  | -4.5     2.1      -x-5|*| 2 | = | -x-5.3     | =========> |-6.3|
!!  | x^2+2x    0        3.2| | 1 |   | x^2+2x+3.2 |            | 6.2|
!!
!!
!!            | 1+4x |  for x=1    | 5|
!!  dres/dx = | -1   | ==========> |-1|
!!            | 2x+2 |             | 4|
!!  
!!
!!            |  1   2x  0 |  for x=1    | 1  2  0 |
!!  dmat/dx = |  0   0  -1 | ==========> | 0  0 -1 |
!!            |2x+2  0   0 |             | 4  0  0 |
!!
!!
!!  @author Matteo Ugolotti
!!  @date   10/13/2018
!!
!------------------------------------------------------------------
@Test
subroutine test_matmul_ADmat_RKvec_2() 
    use pfunit_mod
    use DNAD_D
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, ONE, TWO, FOUR
    
    implicit none
    
    real(rk)    :: vec(3), tol
    type(AD_D)  :: mat(3,3), result_(3)
    integer(ik) :: icol, irow

    tol = 1.e-13_rk

    vec = [ ONE, TWO, ONE ]
    
    do irow = 1,3
        do icol = 1,3
            mat(irow,icol) = AD_D(1)
        end do
    end do
    
    !
    ! Set mat real parts
    ! 
    mat(1,1)%x_ad_ = TWO
    mat(1,2)%x_ad_ = 3.1_rk
    mat(1,3)%x_ad_ = ZERO
    mat(2,1)%x_ad_ = -4.5_rk
    mat(2,2)%x_ad_ = 2.1_rk
    mat(2,3)%x_ad_ = -6.0_rk
    mat(3,1)%x_ad_ = 3.0_rk
    mat(3,2)%x_ad_ = ZERO
    mat(3,3)%x_ad_ = 3.2_rk

    !
    ! Set mat derivatives
    !
    mat(1,1)%xp_ad_ = ONE
    mat(1,2)%xp_ad_ = TWO
    mat(1,3)%xp_ad_ = ZERO
    mat(2,1)%xp_ad_ = ZERO
    mat(2,2)%xp_ad_ = ZERO
    mat(2,3)%xp_ad_ = -ONE
    mat(3,1)%xp_ad_ = FOUR
    mat(3,2)%xp_ad_ = ZERO
    mat(3,3)%xp_ad_ = ZERO
    
    
    result_ = matmul(mat,vec)


    !
    ! Test real value
    !
    @assertEqual(8.2_rk ,result_(1)%x_ad_,tol)
    @assertEqual(-6.3_rk,result_(2)%x_ad_,tol)
    @assertEqual(6.2_rk ,result_(3)%x_ad_,tol)

    !
    ! Test derivatives
    !
    @assertEqual(5._rk ,result_(1)%xp_ad_(1),tol)
    @assertEqual(-1._rk,result_(2)%xp_ad_(1),tol)
    @assertEqual(4._rk ,result_(3)%xp_ad_(1),tol)

end subroutine



!>  matmul Matrix(Dual)-Matrix(Dual)
!!
!!  Result computed using analytical derivatives.
!!
!!             mat1          *          mat2               =             res
!!
!!  | x+1     x^2+2.1     0 | |   x     2x+5    2.1 |  for x=1   | -1.1   23.3    7.3 |
!!  | -4.5     2.1      -x-5|*| x^3-2   3x^2    1.0 | =========> | -12.6  -42   -13.35|
!!  | x^2+2x    0        3.2| |   x^2  4x-1.2   1.0 |            |  6.2   29.96   9.5 |
!!
!!
!!            for x=1    |  10.3    35.3    4.1 |
!!  dres/dx ===========> | -11.2   -16.9   -1.0 |
!!                       |  13.4    46.8    8.4 |
!!  
!!
!!             |  1   2x  0 |  for x=1    | 1  2  0 |
!!  dmat1/dx = |  0   0  -1 | ==========> | 0  0 -1 |
!!             |2x+2  0   0 |             | 4  0  0 |
!!
!!             |  1   2   0 |  for x=1    | 1  2  0 |
!!  dmat2/dx = |3x^2  6x  0 | ==========> | 3  6  0 |
!!             | 2x   4   0 |             | 2  4  0 |
!!
!!  @author Matteo Ugolotti
!!  @date   10/13/2018
!!
!------------------------------------------------------------------
@Test
subroutine test_matmul_ADmat_ADmat_2() 
    use pfunit_mod
    use DNAD_D
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX
    
    implicit none
    
    real(rk)    :: tol
    type(AD_D)  :: mat1(3,3), mat2(3,3), result_(3,3)
    integer(ik) :: icol, irow

    tol = 1.e-13_rk

    
    do irow = 1,3
        do icol = 1,3
            mat1(irow,icol) = AD_D(1)
            mat2(irow,icol) = AD_D(1)
        end do
    end do
    
    !
    ! Set mat1 real parts
    ! 
    mat1(1,1)%x_ad_ = TWO
    mat1(1,2)%x_ad_ = 3.1_rk
    mat1(1,3)%x_ad_ = ZERO
    mat1(2,1)%x_ad_ = -4.5_rk
    mat1(2,2)%x_ad_ = 2.1_rk
    mat1(2,3)%x_ad_ = -6.0_rk
    mat1(3,1)%x_ad_ = 3.0_rk
    mat1(3,2)%x_ad_ = ZERO
    mat1(3,3)%x_ad_ = 3.2_rk

    !
    ! Set mat1 derivatives
    !
    mat1(1,1)%xp_ad_ = ONE
    mat1(1,2)%xp_ad_ = TWO
    mat1(1,3)%xp_ad_ = ZERO
    mat1(2,1)%xp_ad_ = ZERO
    mat1(2,2)%xp_ad_ = ZERO
    mat1(2,3)%xp_ad_ = -ONE
    mat1(3,1)%xp_ad_ = FOUR
    mat1(3,2)%xp_ad_ = ZERO
    mat1(3,3)%xp_ad_ = ZERO
    
    !
    ! Set mat2 real parts
    ! 
    mat2(1,1)%x_ad_ = ONE
    mat2(1,2)%x_ad_ = 7._rk
    mat2(1,3)%x_ad_ = 2.1_rk
    mat2(2,1)%x_ad_ = -ONE
    mat2(2,2)%x_ad_ = THREE
    mat2(2,3)%x_ad_ = ONE
    mat2(3,1)%x_ad_ = ONE
    mat2(3,2)%x_ad_ = 2.8_rk
    mat2(3,3)%x_ad_ = ONE

    !
    ! Set mat2 derivatives
    !
    mat2(1,1)%xp_ad_ = ONE
    mat2(1,2)%xp_ad_ = TWO
    mat2(1,3)%xp_ad_ = ZERO
    mat2(2,1)%xp_ad_ = THREE
    mat2(2,2)%xp_ad_ = SIX
    mat2(2,3)%xp_ad_ = ZERO
    mat2(3,1)%xp_ad_ = TWO
    mat2(3,2)%xp_ad_ = FOUR
    mat2(3,3)%xp_ad_ = ZERO
    
    result_ = matmul(mat1,mat2)


    !
    ! Test real value
    !
    @assertEqual(-1.1_rk  ,result_(1,1)%x_ad_,tol)
    @assertEqual( 23.3_rk ,result_(1,2)%x_ad_,tol)
    @assertEqual( 7.3_rk  ,result_(1,3)%x_ad_,tol)
    @assertEqual(-12.6_rk ,result_(2,1)%x_ad_,tol)
    @assertEqual(-42._rk  ,result_(2,2)%x_ad_,tol)
    @assertEqual(-13.35_rk,result_(2,3)%x_ad_,tol)
    @assertEqual( 6.2_rk  ,result_(3,1)%x_ad_,tol)
    @assertEqual( 29.96_rk,result_(3,2)%x_ad_,tol)
    @assertEqual( 9.5_rk  ,result_(3,3)%x_ad_,tol)

    !
    ! Test derivatives
    !
    @assertEqual( 10.3_rk,result_(1,1)%xp_ad_(1),tol)
    @assertEqual( 35.6_rk,result_(1,2)%xp_ad_(1),tol)
    @assertEqual( 4.1_rk ,result_(1,3)%xp_ad_(1),tol)
    @assertEqual(-11.2_rk,result_(2,1)%xp_ad_(1),tol)
    @assertEqual(-23.2_rk,result_(2,2)%xp_ad_(1),tol)
    @assertEqual(-1._rk  ,result_(2,3)%xp_ad_(1),tol)
    @assertEqual( 13.4_rk,result_(3,1)%xp_ad_(1),tol)
    @assertEqual( 46.8_rk,result_(3,2)%xp_ad_(1),tol)
    @assertEqual( 8.4_rk ,result_(3,3)%xp_ad_(1),tol)

end subroutine


