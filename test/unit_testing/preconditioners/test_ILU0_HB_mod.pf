module test_ILU0_HB_mod
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: DIAG, XI_MIN, XI_MAX, ZERO, ONE, TWO, THREE, &
                                          PI, FIVE, TEN, IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_chidg_vector,          only: chidg_vector_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use precon_ILU0,                only: precon_ILU0_t

    use mod_io,                     only: time_integrator, frequencies
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    implicit none


    public      :: test_preconditioner_ILU0_HB



    !>
    !!
    !!  @author Mayank Sharma
    !!  @date   10/09/2017
    !!
    !--------------------------------------------------------------------------------
    @TestCase
    type,   extends(TestCase)   :: test_preconditioner_ILU0_HB

        type(chidg_t)                   :: chidg
        type(precon_ILU0_t)             :: ILU0
        character(:),   allocatable     :: filename

    contains

        procedure       :: setUp
        procedure       :: tearDown


    end type test_preconditioner_ILU0_HB
    !********************************************************************************



contains



    !
    ! Set Up
    !
    subroutine setUp(this)
        class(test_preconditioner_ILU0_HB),    intent(inout)       :: this

        integer(ik)     :: ielem, itime, imat


        !
        ! send log to file
        !
        IO_DESTINATION  = 'file'
        time_integrator = 'harmonic_balance'
        frequencies     = ZERO
        frequencies(1)  = 2.0_rk*PI

        !
        ! Initialize ChiDG
        !
        call this%chidg%start_up('core')
        call this%chidg%set('Solution Order', integer_input = 1)

        !
        ! Initialize a 3-element geometry
        !
        this%filename = 'ilu0_HB_test.h5'
        call create_mesh_file('D1 NxNxN', this%filename, nelem_xi = 3, nelem_eta = 1, nelem_zeta = 1)
        call this%chidg%read_mesh(this%filename)




        !
        ! Initialize linearization matrix with some reference values 
        !

        ! Time level 1
        ielem = 1
        itime = 1

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = ONE
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -TWO


        ielem = 2
        itime = 1

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = TWO
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -FIVE
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = 12._rk
        

        ielem = 3
        itime = 1

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = TWO
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -TEN


        ! Time level 2
        ielem = 1
        itime = 2

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = ONE
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -TWO


        ielem = 2
        itime = 2

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = TWO
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -FIVE
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = 12._rk
        

        ielem = 3
        itime = 2

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = TWO
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -TEN


        ! Time level 3
        ielem = 1
        itime = 3

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = ONE
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -TWO


        ielem = 2
        itime = 3

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = TWO
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -FIVE
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = 12._rk
        

        ielem = 3
        itime = 3

        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = TWO
        imat = this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        this%chidg%data%sdata%lhs%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -TEN


        !
        ! Initialize RHS vector with some reference values
        !
        this%chidg%data%sdata%rhs%dom(1)%vecs(1)%vec = ONE
        this%chidg%data%sdata%rhs%dom(1)%vecs(2)%vec = TWO
        this%chidg%data%sdata%rhs%dom(1)%vecs(3)%vec = THREE


    end subroutine setUp
    !********************************************************************************



    !>
    !!
    !!  @author Mayank Sharma
    !!  @date   10/09/2017
    !!
    !--------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_preconditioner_ILU0_HB), intent(inout)       :: this


        call delete_file(this%filename)
        call this%chidg%shut_down('core')


    end subroutine tearDown
    !********************************************************************************



    !>
    !!
    !!  @author Mayank Sharma
    !!  @date   10/09/2017
    !!
    !--------------------------------------------------------------------------------
    @Test 
    subroutine test_ILU0_HB_init(self)
        class(test_preconditioner_ILU0_HB),     intent(inout)       :: self

        integer(ik)     :: ielem, itime, imat


        !
        ! Initialize preconditioner
        ! THIS IS BEING TESTED
        !
        call self%ILU0%init(self%chidg%data)



        !
        ! Test that only lower-triangular and diagonal components are allocated
        !

        ! Time level 1
        ielem = 1
        itime = 1
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))


        ielem = 2
        itime = 1
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))

        ielem = 3
        itime = 1
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))

        ! Time level 2
        ielem = 1
        itime = 2
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))


        ielem = 2
        itime = 2
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))

        ielem = 3
        itime = 2
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))

        ! Time level 2
        ielem = 1
        itime = 3
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))


        ielem = 2
        itime = 3
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))

        ielem = 3
        itime = 3
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        @assertTrue(allocated(self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat))


    end subroutine test_ILU0_HB_init
    !********************************************************************************



    !>  Test the matrix factorization values
    !!
    !!
    !!
    !!      [1  -2    0]
    !!  A = [2  -5   12] = LU
    !!      [0   2  -10]
    !!
    !!  Expecting
    !!
    !!      [1        ]                                     [1/1                ]
    !!  L = [2  -1    ]     inverted diagonal   =>      L = [2      1/-1        ]
    !!      [0  -2  14]                                     [0        -2    1/14]
    !!
    !!  The diagonal values in L should actually be a part of the diagonal of U, but we
    !!  just store them in L for convenience, We also store them inverted
    !!
    !!  The U factorization is identical to the upper-triangular components of matrix A, 
    !!  so they are not computed or stored
    !!
    !!  @author Mayank Sharma
    !!  @date   10/09/2017
    !!
    !--------------------------------------------------------------------------------
    @Test
    subroutine test_ILU0_HB_update(self)
        class(test_preconditioner_ILU0_HB),     intent(inout)       :: self

        integer(ik)     :: ielem, itime, imat


        !
        ! Initialize preconditioner
        !
        call self%ILU0%init(self%chidg%data)


        !
        ! Call ILU0 update procedure
        ! THIS IS BEING TESTED
        !
        associate( A => self%chidg%data%sdata%lhs, b => self%chidg%data%sdata%rhs)

            call self%ILU0%update(A,b)

        end associate


        !
        ! Test ILU0 preconditioner matrix factorization values
        !

        ! Time level 1
        ielem = 1
        itime = 1
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertEqual(ONE, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ielem = 2
        itime = 1
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertEqual(TWO, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertEqual(-ONE, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ielem = 3
        itime = 1
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertEqual(-TWO, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        @assertEqual((ONE/14._rk), self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ! Time level 2
        ielem = 1
        itime = 2
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertEqual(ONE, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ielem = 2
        itime = 2
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertEqual(TWO, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertEqual(-ONE, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ielem = 3
        itime = 2
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertEqual(-TWO, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        @assertEqual((ONE/14._rk), self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ! Time level 3
        ielem = 1
        itime = 3
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertEqual(ONE, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ielem = 2
        itime = 3
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,1,itime)
        @assertEqual(TWO, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertEqual(-ONE, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))

        ielem = 3
        itime = 3
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,2,itime)
        @assertEqual(-TWO, self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))
        imat  = self%ILU0%LD%dom(1)%lblks(ielem,itime)%loc(1,3,itime)
        @assertEqual((ONE/14._rk), self%ILU0%LD%dom(1)%lblks(ielem,itime)%data_(imat)%mat(1,1))


    end subroutine test_ILU0_HB_update
    !********************************************************************************



    !>
    !!
    !!  @author Mayank Sharma
    !!  @date   10/09/2017
    !!
    !--------------------------------------------------------------------------------
    @Test
    subroutine test_ILU0_HB_apply(self)
        class(test_preconditioner_ILU0_HB),     intent(inout)   :: self

        type(chidg_vector_t)    :: z
        real(rk)                :: tol = 1.e-5_rk
        integer(ik)             :: itime_1, itime_2 ,itime_3

        !
        ! Initialize preconditioner
        !
        call self%ILU0%init(self%chidg%data)


        !
        ! Call ILU0 update procedure
        !
        associate ( A => self%chidg%data%sdata%lhs, b => self%chidg%data%sdata%rhs )

            call self%ILU0%update(A,b)

        end associate


        !
        ! Apply preconditioner 
        ! THIS IS BEING TESTED
        !
        associate ( A => self%chidg%data%sdata%lhs, b => self%chidg%data%sdata%rhs )

            z = self%ILU0%apply(A,b)

        end associate


        itime_1 = z%dom(1)%vecs(1)%get_time_start(1)
        itime_2 = z%dom(1)%vecs(1)%get_time_start(2)
        itime_3 = z%dom(1)%vecs(1)%get_time_start(3)
        @assertEqual(6.142857143_rk, z%dom(1)%vecs(1)%vec(itime_1), tol)
        @assertEqual(6.142857143_rk, z%dom(1)%vecs(1)%vec(itime_2), tol)
        @assertEqual(6.142857143_rk, z%dom(1)%vecs(1)%vec(itime_3), tol)

        itime_1 = z%dom(1)%vecs(2)%get_time_start(1)
        itime_2 = z%dom(1)%vecs(2)%get_time_start(2)
        itime_3 = z%dom(1)%vecs(2)%get_time_start(3)
        @assertEqual(2.57142857_rk,  z%dom(1)%vecs(2)%vec(itime_1), tol)
        @assertEqual(2.57142857_rk,  z%dom(1)%vecs(2)%vec(itime_2), tol)
        @assertEqual(2.57142857_rk,  z%dom(1)%vecs(2)%vec(itime_3), tol)

        itime_1 = z%dom(1)%vecs(3)%get_time_start(1)
        itime_2 = z%dom(1)%vecs(3)%get_time_start(2)
        itime_3 = z%dom(1)%vecs(3)%get_time_start(3)
        @assertEqual(0.2142857143_rk, z%dom(1)%vecs(3)%vec(itime_1), tol)
        @assertEqual(0.2142857143_rk, z%dom(1)%vecs(3)%vec(itime_2), tol)
        @assertEqual(0.2142857143_rk, z%dom(1)%vecs(3)%vec(itime_3), tol)


    end subroutine test_ILU0_HB_apply
    !********************************************************************************




















end module test_ILU0_HB_mod
