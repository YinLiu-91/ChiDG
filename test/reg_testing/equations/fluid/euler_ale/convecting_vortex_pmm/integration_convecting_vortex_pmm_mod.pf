!--------------------------------------------------------------------------------
!
!     Euler ALE equation set uniform flow prescribed mesh motion regression test
!
!   This test suite runs a series of tests solving the euler equations on a quartic
!   convecting_vortex_pmm grid of varying resolution for varying orders of solution accuracy.
!   At the end of each case, the L2 error is computed for the domain using the 
!   analytical solution.
!
!   This suite runs the convecting_vortex_pmm case with 6x1x1, 12x1x1, and 24x1x1 grids with
!   quartic elements. Each grid is run from 1st to 4th order accuracy. Each 
!   configuration is run on 1, 2, 7, and 10 processors. The nonlinear convergence
!   for each case is stored in a module global variable that is used to compare
!   convergence.
!
!   After the simulation for each case has been run, an additional test
!   compares the nonlinear convergence of the Newton solver from the parallel
!   simulations to the same case run in serial.
!
!   The boundary condition settings are:
!

!
!
!   @author Eric Wolf 
!   @date  6/21/2017 
!
!--------------------------------------------------------------------------------
module integration_convecting_vortex_pmm_mod
#include <messenger.h>
    use pfunit_mod
    use mod_kinds,              only: rk, ik
    use mod_constants,          only: ZERO, THREE, IO_DESTINATION, ONE, TWO, PI, FOUR, &
                                      XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use mod_string,             only: string_t
    use type_chidg,             only: chidg_t
    use type_chidg_data,        only: chidg_data_t
    use mod_bc,                 only: create_bc
    use type_bc_state,          only: bc_state_t
    use type_bc_state_group,    only: bc_state_group_t
    use type_function,          only: function_t
    use type_rvector,           only: rvector_t
    use type_ivector,           only: ivector_t
    use mod_function,           only: create_function
    use mod_interpolate,        only: interpolate_element_standard
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file

    use mod_chidg_mpi,          only: IRANK, NRANK
    use mpi_f08,                only: MPI_COMM, MPI_REAL8, MPI_SUM
    use mod_io
    use type_chidg_worker,      only: chidg_worker_t
    use type_properties,        only: properties_t
    use DNAD_D

    ! Imports for defining a new operator and model
    use mod_operators,          only: operator_factory
    use type_operator,          only: operator_t
    use mod_models,             only: model_factory
    use type_model,             only: model_t

    use type_point,                     only: point_t
    implicit none


    ! Store the nonlinear convergence for each test case. This is used 
    ! to test the nonlinear convergence between a case running on
    ! a different number of procs.
    !
    ! Procs: 1, 2, 4, 7, 10
    !
    real(rk)        :: error(1,2,3)                         ! nprocs, ngrids, norders


    public  :: convecting_vortex_pmm




    !>  This parameter initialize the state for each test
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestParameter
    type, extends(MpiTestParameter) :: case_grid_order

        integer(ik)     :: nelem_xi
        integer(ik)     :: nelem_eta
        character(100)  :: gridfile
        integer(ik)     :: order

    contains
        procedure   :: toString
    end type case_grid_order
    !*******************************************************************************







    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MpiTestCase) :: convecting_vortex_pmm

        integer(ik)     :: nelem_xi
        integer(ik)     :: nelem_eta
        character(100)  :: gridfile
        integer(ik)     :: order
        type(mpi_comm)  :: ChiDG_COMM

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type convecting_vortex_pmm
    !*******************************************************************************

    type(chidg_t)   :: chidg

contains


    !> Parameter constructors
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_grid_order),  intent(in)          :: test_parameter
        type(convecting_vortex_pmm)    :: test

        test%nelem_xi    = test_parameter%nelem_xi
        test%nelem_eta   = test_parameter%nelem_eta
        test%gridfile    = test_parameter%gridfile
        test%order       = test_parameter%order

    end function newTest
    !******************************************************************************


    !> Parameter initialization
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_grid_order), allocatable :: params(:)
    
        integer(ik),        allocatable :: nelem_xi(:)
        integer(ik),        allocatable :: nelem_eta(:)
        type(string_t),     allocatable :: files(:)
        integer(ik),        allocatable :: orders(:)
        integer(ik) :: icase

        nelem_xi  = [ &
                     20, 20, 20,  &
                     40, 40, 40 ]

        nelem_eta  = [ &
                     15, 15, 15,  &
                     30, 30, 30 ]

        files = [  string_t('convecting_vortex_pmm_20x15x1.h5'), &
                   string_t('convecting_vortex_pmm_20x15x1.h5'), &
                   string_t('convecting_vortex_pmm_20x15x1.h5'), &
                   string_t('convecting_vortex_pmm_40x30x1.h5'), &
                   string_t('convecting_vortex_pmm_40x30x1.h5'), &
                   string_t('convecting_vortex_pmm_40x30x1.h5')  &
                    ]

        orders = [  &
                   1, 2, 3,  &
                   1, 2, 3  ]

        !Initialize the test case container with the parameter
        allocate(params(size(files)))
        do icase = 1,size(files)
            params(icase)%nelem_xi    = nelem_xi(icase)
            params(icase)%nelem_eta   = nelem_eta(icase)
            params(icase)%gridfile    = files(icase)%str
            params(icase)%order       = orders(icase)
        end do

    end function getParameters
    !*******************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!
    !-------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class (case_grid_order),    intent(in)  :: this
        character(:), allocatable   :: string

        character(len=200) :: buffer

        write(buffer,"( '(nelem_xi,  order)=','(', I2,',', I2,',', I2, ')' )") this%nelem_xi, this%order
        string = trim(buffer)

    end function toString
    !********************************************************************************************







    !>  Set up test routine.
    !!
    !!  This routine reads the grid file, sets up boundary conditions, initializes storage
    !!  and sets the appropriate configuration options.
    !!  This routine also gets the numer of processors and the correct MPI communicator for 
    !!  the test.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !--------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(convecting_vortex_pmm),  intent(inout)   :: this

        class(bc_state_t),  allocatable :: bc_state
        type(bc_state_group_t)          :: bc_state_groups(5)
        type(string_t)                  :: group_names(1,6)
        class(function_t),  allocatable :: fcn
        real(rk)                        :: tol, sim_time

        
        sim_time = 10.0_rk
        tol = 1.e-6_rk

        !------------------------------------------------------------------------------
        !
        ! Define input data here that is normally read through the namelist input file
        !
        ! As a result, we don't call chidg%init('io')
        !
        !------------------------------------------------------------------------------
        basis            = 'legendre'
        gq_rule          = 3 
        time_integrator  = 'DIRK'
        nonlinear_solver = 'newton'
        linear_solver    = 'fgmres_cgs'
        preconditioner   = 'RASILU0'
        IO_DESTINATION   = 'both'
        time_steps       = 3200 
        dt               = real(sim_time/time_steps,rk)
        verbosity        = 2 
        nwrite           = 1000
        solutionfile_out = 'testout.h5'
        !------------------------------------------------------------------------------


        !
        ! Get MPI communicator information from pFUnit
        !
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()



        ! Set timescheme options to pass during initialization
        !call toptions%set('dt', 0.1_rk) ! means nothing here
        !call toptions%set('nsteps',100)
        !call toptions%set('nwrite',0)

        call chidg%data%time_manager%init()

        ! Set linear solver options to pass during initialization
        call loptions%set('tol',1.e-10_rk)

        ! Set nonlinear solver options
        call noptions%set('tol',1.e-9_rk)
        call noptions%set('cfl0',2.0_rk)
        call noptions%set('nsteps',20)



        !
        ! Initialize ChiDG environment
        !
        call chidg%start_up('mpi',this%ChiDG_COMM)
        call chidg%start_up('core')




        !
        ! Create mesh
        !
        if (IRANK == GLOBAL_MASTER) then
            bc_state_groups(1)%name = 'Periodic x-min'
            bc_state_groups(2)%name = 'Periodic x-max'
            bc_state_groups(3)%name = 'Periodic y-min'
            bc_state_groups(4)%name = 'Periodic y-max'
            bc_state_groups(5)%name = 'Symmetry'


            call create_bc('Periodic', bc_state)
            call bc_state%set_fcn_option('Offset-1',   'val', 20.0_rk)
            call bc_state_groups(1)%add_bc_state(bc_state)

            call create_bc('Periodic', bc_state)
            call bc_state%set_fcn_option('Offset-1',   'val', -20.0_rk)
            call bc_state_groups(2)%add_bc_state(bc_state)

            call create_bc('Periodic', bc_state)
            call bc_state%set_fcn_option('Offset-2',   'val', 15.0_rk)
            call bc_state_groups(3)%add_bc_state(bc_state)

            call create_bc('Periodic', bc_state)
            call bc_state%set_fcn_option('Offset-2',   'val', -15.0_rk)
            call bc_state_groups(4)%add_bc_state(bc_state)

            call create_bc('Symmetry', bc_state)
            call bc_state_groups(5)%add_bc_state(bc_state)



            ! Define patch group names
            group_names(1,:) = [string_t('Periodic x-min') , &
                                string_t('Periodic x-max'), &
                                string_t('Periodic y-min') , &
                                string_t('Periodic y-max') , &
                                string_t('Symmetry') , &
                                string_t('Symmetry') ]


            call create_mesh_file('Convecting Vortex PMM',this%gridfile, &
                                                              equation_sets=[string_t('Euler ALE')], &
                                                              group_names     = group_names,     &
                                                              bc_state_groups = bc_state_groups, &
                                                              nelem_xi        = this%nelem_xi,   &
                                                              nelem_eta       = this%nelem_eta,  &
                                                              nelem_zeta      = 1) 
                                                              
        end if


        !
        ! Set ChiDG components
        !
        call chidg%set('Solution Order',   integer_input=this%order)
        call chidg%set('Time Integrator',  algorithm=time_integrator)
        call chidg%set('Nonlinear Solver', algorithm=nonlinear_solver, options=noptions)
        call chidg%set('Linear Solver',    algorithm=linear_solver,    options=loptions)
        call chidg%set('Preconditioner',   algorithm=preconditioner)


        !
        ! Read grid
        !

        call chidg%read_mesh(this%gridfile)




        !
        ! Initialize solution
        !
        call create_function(fcn,'convecting_vortex')

        call fcn%set_option('ivar',1.0_rk)
        call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,1)
        call fcn%set_option('ivar',2.0_rk)
        call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,2)
        call fcn%set_option('ivar',3.0_rk)
        call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,3)
        call fcn%set_option('ivar',4.0_rk)
        call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,4)
        call fcn%set_option('ivar',5.0_rk)
        call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,5)

    end subroutine SetUp
    !*******************************************************************************************


    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(convecting_vortex_pmm),  intent(inout)   :: this

        ! Close ChiDG
        call chidg%shut_down('core')

        if (IRANK == GLOBAL_MASTER) then
            call delete_file(this%gridfile)
        end if

    end subroutine tearDown
    !******************************************************************************************










    !>  Run the simulation.
    !!
    !!      - compute the entropy error, test against the reference values.
    !!      - store the nonlinear convergence to the module variable so it can 
    !!        be used by a test for nonlinear convergence.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test(npes=[16])
    subroutine test_entropy_error_rate(self)
        class(convecting_vortex_pmm),  intent(inout)   :: self

        real(rk)    :: tol
        integer(ik) :: npes_index, grid_index, order_index
        real(rk)    :: computed_error


        npes_index  = get_npes_index(NRANK)
        grid_index  = get_grid_index(self%gridfile)
        order_index = get_order_index(self%order)


        print *, 'order'
        print *, self%order
        !
        ! Run ChiDG simulation
        !
        call chidg%run(write_initial=.false., write_final=.false.)
        
        print *, 'run complete'

        !
        ! Store the nonlinear convergence of the calculation
        !

        print *, 'compute error'
        computed_error = compute_convecting_vortex_pmm_error(chidg%data,self%ChiDG_COMM)


        print *, 'computed error'
        print *, computed_error

        !
        ! Store the computed error for the current case
        !
        error(npes_index,grid_index,order_index)         = computed_error


    end subroutine test_entropy_error_rate
    !*******************************************************************************************


    !>
    !!
    !!
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_err_conforming(self)
        class(convecting_vortex_pmm),  intent(inout)   :: self

        integer(ik) :: inpes, igrid, iorder
        real(rk)    :: error_previous, error_current, mesh_parameter_previous, mesh_parameter_current, convergence_rate, tol

        tol = 0.1_rk


        do inpes = 1,1
            do igrid = 2,2  ! Start at the second grid because we need the previous grid in order to compute a rate 
                do iorder = 1, 3

                    error_previous = error(inpes,igrid-1,iorder)
                    error_current  = error(inpes,igrid  ,iorder)

                    mesh_parameter_previous = mesh_parameter(igrid-1,iorder)
                    mesh_parameter_current  = mesh_parameter(igrid  ,iorder)

                    
                    !
                    ! Compute convergence rate of spatial operators. log10(error)/log10(mesh spacing)
                    !
                    convergence_rate = (log10(error_previous)-log10(error_current)) / &
                                       (log10(mesh_parameter_previous)-log10(mesh_parameter_current))

                    print *, 'iorder'
                    print *, iorder
                    print *, 'convergence rate'
                    print *, convergence_rate
                    print *, 'error coarse'
                    print *, error_previous 
                    print *, 'error fine'
                    print *, error_current
                
                    !@assertGreaterThan(convergence_rate, real(iorder,rk)-tol)
                    !@assertLessThan(convergence_rate, real(iorder,rk)+tol)

                end do
            end do
        end do


    end subroutine test_err_conforming
    !*****************************************************************************************





    !>  Function to compute the error in the 1D scalar diffusion equation.
    !!
    !!  The error is computed as the L2-Norm of the difference in the analytical and
    !!  numerical solutions integrated over the domain.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !------------------------------------------------------------------------------------
    function compute_convecting_vortex_pmm_error(data,ChiDG_COMM) result(error)
        type(chidg_data_t), intent(inout)   :: data
        type(mpi_comm),     intent(in)      :: ChiDG_COMM

        real(rk), allocatable, dimension(:) :: &
            u_dg, u_analytical, x_gq, y_gq, gq_error_squared, ale_g_gq


        integer(ik) :: idens, imom1, imom2, imom3, ienergy
        integer(ik) :: ielem, idom, ierr, itime, igq
        real(rk)    :: error_squared_sum, error_squared_sum_reduced, element_error_squared, error

        class(function_t),  allocatable :: fcn
        type(point_t), allocatable, dimension(:) :: test_points

        associate (mesh   => data%mesh,     &
                   sdata  => data%sdata,    &
                   eqnset => data%eqnset,   &
                   prop   => data%eqnset(1)%prop)


            !
            ! Get equation indices
            !
            idens = prop%get_primary_field_index("Density")
            imom1 = prop%get_primary_field_index("Momentum-1")
            imom2 = prop%get_primary_field_index("Momentum-2")
            imom3 = prop%get_primary_field_index("Momentum-3")
            ienergy = prop%get_primary_field_index("Energy")


            !
            ! Zero error accumulator
            !
            error_squared_sum = ZERO


            call create_function(fcn,'convecting_vortex')



            !
            ! Loop over elements and accumulate error
            !
            itime = 1
            do idom = 1,data%mesh%ndomains()
                do ielem = 1,data%mesh%domain(idom)%nelem


                    !
                    ! Compute the analytical solution at the quadrature nodes
                    !
                    x_gq = mesh%domain(idom)%elems(ielem)%interp_coords(:,1)
                    y_gq = mesh%domain(idom)%elems(ielem)%interp_coords(:,2)
                    do igq = 1, size(x_gq)
                        test_points(igq)%c1_ = x_gq(igq)
                        test_points(igq)%c2_ = y_gq(igq)
                    end do

                    ale_g_gq = mesh%domain(idom)%elems(ielem)%ale_g

                    u_analytical = ZERO*x_gq
                    call fcn%set_option('ivar',1.0_rk)
                    u_analytical = fcn%compute(10.0_rk, test_points)


                    !
                    ! Interpolate DG numerical solution
                    !
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,idens,itime,'value')


                    u_dg = u_dg/ale_g_gq
                    !
                    ! Compute error
                    !                    
                    gq_error_squared = (u_analytical - u_dg)**TWO

        

                    !
                    ! Integrate error
                    !
                    element_error_squared = sum(gq_error_squared * mesh%domain(idom)%elems(ielem)%jinv_def * mesh%domain(idom)%elems(ielem)%basis_s%weights_element())


                    print *, 'density error squared'
                    print *, element_error_squared
                    !
                    ! Accumulate error from each element
                    !
                    error_squared_sum = error_squared_sum + element_error_squared


                    !
                    ! Momentum-1
                    !

                    u_analytical = ZERO*x_gq
                    call fcn%set_option('ivar',2.0_rk)
                    u_analytical = fcn%compute(10.0_rk, test_points)

                    !
                    ! Interpolate DG numerical solution
                    !
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,imom1,itime,'value')


                    u_dg = u_dg/ale_g_gq
                    !
                    ! Compute error
                    !                    
                    gq_error_squared = (u_analytical - u_dg)**TWO


                    !
                    ! Integrate error
                    !
                    element_error_squared = sum(gq_error_squared * mesh%domain(idom)%elems(ielem)%jinv_def * mesh%domain(idom)%elems(ielem)%basis_s%weights_element())

                    print *, 'mom1 error squared'
                    print *, element_error_squared

                    !
                    ! Accumulate error from each element
                    !
                    error_squared_sum = error_squared_sum + element_error_squared


                    !
                    ! Momentum-2
                    !

                    u_analytical = ZERO*x_gq
                    call fcn%set_option('ivar',3.0_rk)
                    u_analytical = fcn%compute(10.0_rk, test_points)

                    !
                    ! Interpolate DG numerical solution
                    !
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,imom2,itime,'value')


                    u_dg = u_dg/ale_g_gq
                    !
                    ! Compute error
                    !                    
                    gq_error_squared = (u_analytical - u_dg)**TWO


                    !
                    ! Integrate error
                    !
                    element_error_squared = sum(gq_error_squared * mesh%domain(idom)%elems(ielem)%jinv_def * mesh%domain(idom)%elems(ielem)%basis_s%weights_element())

                    print *, 'mom2 error squared'
                    print *, element_error_squared

                    !
                    ! Accumulate error from each element
                    !
                    error_squared_sum = error_squared_sum + element_error_squared

                    !
                    ! Momentum-3
                    !

                    u_analytical = ZERO*x_gq
                    call fcn%set_option('ivar',4.0_rk)
                    u_analytical = fcn%compute(10.0_rk, test_points)

                    !
                    ! Interpolate DG numerical solution
                    !
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,imom3,itime,'value')


                    u_dg = u_dg/ale_g_gq
                    !
                    ! Compute error
                    !                    
                    gq_error_squared = (u_analytical - u_dg)**TWO


                    !
                    ! Integrate error
                    !
                    element_error_squared = sum(gq_error_squared * mesh%domain(idom)%elems(ielem)%jinv_def * mesh%domain(idom)%elems(ielem)%basis_s%weights_element())


                    print *, 'mom3 error squared'
                    print *, element_error_squared
                    !
                    ! Accumulate error from each element
                    !
                    error_squared_sum = error_squared_sum + element_error_squared


                    !
                    ! Energy 
                    !

                    u_analytical = ZERO*x_gq
                    call fcn%set_option('ivar',5.0_rk)
                    u_analytical = fcn%compute(10.0_rk, test_points)

                    !
                    ! Interpolate DG numerical solution
                    !
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,ienergy,itime,'value')


                    u_dg = u_dg/ale_g_gq
                    !
                    ! Compute error
                    !                    
                    gq_error_squared = (u_analytical - u_dg)**TWO


                    !
                    ! Integrate error
                    !
                    element_error_squared = sum(gq_error_squared * mesh%domain(idom)%elems(ielem)%jinv_def * mesh%domain(idom)%elems(ielem)%basis_s%weights_element())

                    print *, 'energy error squared'
                    print *, element_error_squared

                    !
                    ! Accumulate error from each element
                    !
                    error_squared_sum = error_squared_sum + element_error_squared




                end do ! ielem
            end do ! idom


        end associate



        ! Reduce the total error across processors
        call MPI_AllReduce(error_squared_sum,error_squared_sum_reduced,1,MPI_REAL8,MPI_SUM,ChiDG_COMM,ierr)

        ! Sqrt of the reduced error
        error = sqrt(error_squared_sum_reduced)

    end function compute_convecting_vortex_pmm_error
    !*****************************************************************************************






    

    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    function mesh_parameter(igrid,iorder) result(param)
        integer(ik),    intent(in)  :: igrid
        integer(ik),    intent(in)  :: iorder

        integer(ik) :: nelem, nterms_1d
        real(rk)    :: param

        select case (igrid)
            case(1)
                nelem = 20 
            case(2)
                nelem = 40 
            case default
                call chidg_signal(FATAL,"integration_1D_linear_diffusion_mod%mesh_parameter: invalid igrid")
        end select


        select case (iorder)
            case(1) ! iorder = 1  =>  order = 2
                nterms_1d = (iorder)
            case(2)
                nterms_1d = (iorder)
            case(3)
                nterms_1d = (iorder)
            case(4)
                nterms_1d = (iorder)
            case default
                call chidg_signal(FATAL,"integration_1D_linear_diffusion_mod%mesh_parameter: invalid iorder")
        end select


        param = ONE/(real(nelem,rk)*real(nterms_1d,rk))

    end function mesh_parameter
    !****************************************************************************************












    ! Utility for returning the index associated with a certain number of procs
    !------------------------------------------------------------------------------
    function get_npes_index(numproc) result(inpes)
        integer(ik) :: numproc
        integer(ik) :: inpes

        select case (numproc)
!            case(1)
!                inpes = 1
!            case(2)
!                inpes = 2
!            case(4)
!                inpes = 3
!            case(7)
!                inpes = 4
            case(16)
                inpes = 1

        end select

    end function get_npes_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain grid file
    !------------------------------------------------------------------------------
    function get_grid_index(grid) result(igrid)
        character(len=*)    :: grid
        integer(ik)         :: igrid

        select case (trim(grid))
            case('convecting_vortex_pmm_20x15x1.h5')
                igrid = 1
            case('convecting_vortex_pmm_40x30x1.h5')
                igrid = 2 
        end select

    end function get_grid_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain order of accuracy
    !------------------------------------------------------------------------------
    function get_order_index(order) result(iorder)
        integer(ik) :: order
        integer(ik) :: iorder

        select case (order)
            case(1)
                iorder = 1
            case(2)
                iorder = 2
            case(3)
                iorder = 3
            case(4)
                iorder = 4
        end select

    end function get_order_index
    !******************************************************************************






end module integration_convecting_vortex_pmm_mod
