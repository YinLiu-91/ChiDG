!--------------------------------------------------------------------------------
!
!                Euler equation set entropy-error regression test
!
!   This test suite runs a series of tests solving the euler equations on a quartic
!   smoothbump grid of varying resolution for varying orders of solution accuracy.
!   At the end of each case, the entropy error is computed for the domain. The flow
!   phenomena that are present for the smoothbump case should be isentropic. The 
!   error metric then, is to compute the entropy generated from the numerical scheme.
!
!   This suite runs the smoothbump case with 6x2x2, 12x4x2, and 24x8x2 grids with
!   quartic elements. Each grid is run from 1st to 4th order accuracy. Each 
!   configuration is run on 1, 2, 7, and 10 processors. The nonlinear convergence
!   for each case is stored in a module global variable that is used to compare
!   convergence.
!
!   After the simulation for each case has been run, an additional test
!   compares the nonlinear convergence of the Newton solver from the parallel
!   simulations to the same case run in serial.
!
!   The boundary condition settings are:
!
!       Inlet:  euler_totalinlet  
!               Total Pressure    = 110000 (Pa) 
!               Total Temperature = 300 (K)
!
!       Outlet: euler_pressureoutlet
!               Static Pressure   = 93000 (Pa)
!
!       Walls: euler_wall
!
!   @author Nathan A. Wukie
!   @date   10/23/2016
!
!--------------------------------------------------------------------------------
module integration_smoothbump_mod
#include <messenger.h>
    use pfunit_mod
    use mod_kinds,              only: rk, ik
    use mod_constants,          only: ZERO, ONE, IO_DESTINATION
    use mod_string,             only: string_t
    use type_chidg,             only: chidg_t
    use mod_bc,                 only: create_bc
    use type_bc_state,          only: bc_state_t
    use type_bc_state_group,    only: bc_state_group_t
    use type_function,          only: function_t
    use type_rvector,           only: rvector_t
    use mod_function,           only: create_function
    use mod_entropy,            only: compute_entropy_error
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file

    use mod_chidg_mpi,          only: IRANK, NRANK
    use mpi_f08,                only: MPI_COMM
    use mod_io
    implicit none


    ! Store the nonlinear convergence for each test case. This is used 
    ! to test the nonlinear convergence between a case running on
    ! a different number of procs.
    !
    ! Procs: 1, 2, 4, 5, 8
    type(rvector_t) :: nonlinear_convergence(5,2,4) ! nprocs, ngrids, norders
    real(rk)        :: error(5,2,4) = ZERO          ! nprocs, ngrids, norders
    logical         :: run_setup = .true.


!    public  :: smoothbump



    !>  This parameter initialize the state for each test
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestParameter
    type, extends(MpiTestParameter) :: case_grid_order

        integer(ik)     :: nelem_xi
        integer(ik)     :: nelem_eta
        character(100)  :: gridfile
        integer(ik)     :: P

    contains
        procedure   :: toString
    end type case_grid_order
    !*******************************************************************************




    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MpiTestCase) :: smoothbump

        integer(ik)     :: nelem_xi
        integer(ik)     :: nelem_eta
        character(100)  :: gridfile
        integer(ik)     :: P
        type(mpi_comm)  :: ChiDG_COMM

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type smoothbump
    !*******************************************************************************

    type(chidg_t)   :: chidg

contains


    !> Parameter constructors
    !!
    !------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_grid_order),  intent(in)          :: test_parameter
        type(smoothbump)    :: test

        test%nelem_xi    = test_parameter%nelem_xi
        test%nelem_eta   = test_parameter%nelem_eta
        test%gridfile    = test_parameter%gridfile
        test%P           = test_parameter%P

    end function newTest
    !******************************************************************************


    !> Parameter initialization
    !!
    !------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_grid_order), allocatable :: params(:)
    
        integer(ik),        allocatable :: nelem_xi(:)
        integer(ik),        allocatable :: nelem_eta(:)
        type(string_t),     allocatable :: files(:)
        integer(ik),        allocatable :: P(:)
        integer(ik) :: icase

        nelem_xi  = [24, 24, 24, 24, &
                     48, 48, 48, 48]

        nelem_eta = [12, 12, 12, 12, &
                     24, 24, 24, 24]

        files = [string_t('smoothbump_24x12x2.h5'), &
                 string_t('smoothbump_24x12x2.h5'), &
                 string_t('smoothbump_24x12x2.h5'), &
                 string_t('smoothbump_24x12x2.h5'), &
                 string_t('smoothbump_48x24x2.h5'), &
                 string_t('smoothbump_48x24x2.h5'), &
                 string_t('smoothbump_48x24x2.h5'), &
                 string_t('smoothbump_48x24x2.h5')  &
                 ]

        P = [0, 1, 2, 3, &
             0, 1, 2, 3]


        !Initialize the test case container with the parameter
        allocate(params(size(files)))
        do icase = 1,size(files)
            params(icase)%nelem_xi    = nelem_xi(icase)
            params(icase)%nelem_eta   = nelem_eta(icase)
            params(icase)%gridfile    = files(icase)%str
            params(icase)%P           = P(icase)
        end do

    end function getParameters
    !*******************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!
    !-------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class (case_grid_order),    intent(in)  :: this
        character(:), allocatable   :: string

        character(len=200) :: buffer

        write(buffer,"( '(nelem_xi, nelem_eta, P)=','(', I2,',', I2,',', I2, ')' )") this%nelem_xi, this%nelem_eta, this%P
        string = trim(buffer)

    end function toString
    !********************************************************************************************




    !>  Set up test routine.
    !!
    !!  This routine reads the grid file, sets up boundary conditions, initializes storage
    !!  and sets the appropriate configuration options.
    !!  This routine also gets the numer of processors and the correct MPI communicator for 
    !!  the test.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !--------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(smoothbump),  intent(inout)   :: this

        class(bc_state_t),  allocatable :: bc_state
        type(bc_state_group_t)          :: bc_state_groups(3)
        type(string_t)                  :: group_names(1,6)
        class(function_t),  allocatable :: fcn
        logical                         :: exists
        integer(ik)                     :: ierr

        ! Get MPI communicator information from pFUnit
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        chidg_COMM%mpi_val = this%getMpiCommunicator()

        
        if (run_setup) then

            ! Initialize ChiDG environment
            call chidg%start_up('mpi',chidg_COMM)
            call chidg%start_up('core')

            !------------------------------------------------------------------------------
            !
            ! Define input data here that is normally read through the namelist input file
            !
            ! As a result, we don't call chidg%init('io')
            !
            !------------------------------------------------------------------------------
            basis            = 'legendre'
            gq_rule          = 3
            time_integrator  = 'steady'
            nonlinear_solver = 'newton'
            linear_solver    = 'fgmres'
            preconditioner   = 'RASILU0'
            IO_DESTINATION   = 'file'

            call chidg%data%time_manager%init()


            ! Set linear solver options to pass during initialization
            call loptions%set('tol',1.e-10_rk)
            call loptions%set('inner_fgmres',.true.)

            ! Set nonlinear solver options
            call noptions%set('tol',1.e-8_rk)
            call noptions%set('cfl0',1.0_rk)
            call noptions%set('nsteps',100)
            call noptions%set('ptc',.true.)
            call noptions%set('search','Backtrack')
            !------------------------------------------------------------------------------



            ! Create mesh, only for P==0 since we don't want to destroy the lower-order
            ! solutions once they are written because they are used to initialize the higher-order 
            ! problems.
            if ( IRANK==GLOBAL_MASTER .and. this%P==0 ) then
            !if ( IRANK==GLOBAL_MASTER ) then
                bc_state_groups(1)%name = 'Inlet'
                bc_state_groups(2)%name = 'Outlet'
                bc_state_groups(3)%name = 'Walls'


                call create_bc('Inlet - Total', bc_state)
                call bc_state%set_fcn_option('Total Pressure',   'val', 110000._rk)
                call bc_state%set_fcn_option('Total Temperature','val', 300._rk   )
                call bc_state_groups(1)%add_bc_state(bc_state)

                call create_bc('Outlet - Constant Pressure', bc_state)
                call bc_state%set_fcn_option('Static Pressure', 'val', 93000._rk )
                call bc_state_groups(2)%add_bc_state(bc_state)

                call create_bc('Wall', bc_state)
                call bc_state_groups(3)%add_bc_state(bc_state)


                ! Define patch group names
                group_names(1,:) = [string_t('Inlet') , &
                                    string_t('Outlet'), &
                                    string_t('Walls') , &
                                    string_t('Walls') , &
                                    string_t('Walls') , &
                                    string_t('Walls') ]


                call create_mesh_file('Smooth Bump',this%gridfile,equation_sets=[string_t('Euler')], &
                                                                  group_names     = group_names,     &
                                                                  bc_state_groups = bc_state_groups, &
                                                                  nelem_xi        = this%nelem_xi,   &
                                                                  nelem_eta       = this%nelem_eta,  &
                                                                  nelem_zeta      = 1)
            end if


            ! Set ChiDG components
            call chidg%set('Solution Order',   integer_input=this%P+1)
            call chidg%set('Time Integrator',  algorithm=time_integrator)
            call chidg%set('Nonlinear Solver', algorithm=nonlinear_solver, options=noptions)
            call chidg%set('Linear Solver',    algorithm=linear_solver,    options=loptions)
            call chidg%set('Preconditioner',   algorithm=preconditioner)

            ! Read grid
            call chidg%read_mesh(this%gridfile)


            ! Initialize solution
            if (this%P == 0) then
                call create_function(fcn,'constant')
                call fcn%set_option('val',1.13262_rk)
                call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,1)
                call fcn%set_option('val',190.339029_rk)
                call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,2)
                call fcn%set_option('val',ZERO)
                call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,3)
                call fcn%set_option('val',ZERO)
                call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,4)
                call fcn%set_option('val',248493.425_rk)
                call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,5)
            else
                call chidg%read_fields(this%gridfile)
            end if

        end if !run_setup


    end subroutine setUp
    !*******************************************************************************************


    !>
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(smoothbump),  intent(inout)   :: this

        logical :: exists

        if (run_setup) then

            ! Close ChiDG
            call chidg%shut_down('core')

            if (IRANK == GLOBAL_MASTER) then
                !call delete_file(this%gridfile)

                inquire(file=this%gridfile, exist=exists)
                if (exists) then
                    if (this%P == 3) then
                        call delete_file(this%gridfile)
                    end if
                end if
            end if

        end if !run_setup

    end subroutine tearDown
    !******************************************************************************************



    !>  Run the simulation.
    !!
    !!      - compute the entropy error, test against the reference values.
    !!      - store the nonlinear convergence to the module variable so it can 
    !!        be used by a test for nonlinear convergence.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test(npes=[1,2,4,5,8])
    !@Test(npes=[8])
    subroutine run_calculations(self)
        class(smoothbump),  intent(inout)   :: self

        real(rk)    :: computed_error
        integer(ik) :: npes_index, grid_index, order_index


        npes_index  = get_npes_index(NRANK)
        grid_index  = get_grid_index(self%gridfile)
        order_index = get_order_index(self%P)

        ! Run ChiDG simulation
        call chidg%run(write_initial=.false., write_final=.false.)

        call chidg%write_mesh(self%gridfile)
        call chidg%write_fields(self%gridfile)


        ! Store the nonlinear convergence of the calculation
        nonlinear_convergence(npes_index,grid_index,order_index) = chidg%nonlinear_solver%residual_norm


!        ! Store the number of nonlinear iterations that the solution converged in. 
!        ! Problem is linear so it should converge in 1 Newton Step. Really, just the 
!        ! solution of 1 linear system of equations.
!        if (self%gridtype == 'singleblock') then
!            nsteps_convergence(npes_index,grid_index,order_index) = chidg%nonlinear_solver%newton_iterations
!        elseif (self%gridtype == 'chimera') then
!            nsteps_convergence_chimera(npes_index,grid_index,order_index) = chidg%nonlinear_solver%newton_iterations
!        end if



        ! Compute entropy error
        error(npes_index,grid_index,order_index) = compute_entropy_error(chidg%data)


        ! Check if all information has been accumulated, if so, don't initialize anymore 
        ! or try to open files because they might not exist.
        if (abs(error(size(error,1),size(error,2),size(error,3)) - ZERO) > 1.e-8_rk) then
            run_setup = .false.
        end if


    end subroutine run_calculations
    !*****************************************************************************************




    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !----------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_entropy_error_rate_new(self)
        class(smoothbump),  intent(inout)   :: self

        integer(ik) :: inpes, igrid, iorder
        real(rk)    :: error_previous, error_current, mesh_parameter_previous, mesh_parameter_current, convergence_rate

        do inpes = 1,5
            do igrid = 2,2  ! Start at the second grid because we need the previous grid in order to compute a rate 
                do iorder = 2,4

                    error_previous = error(inpes,igrid-1,iorder)
                    error_current  = error(inpes,igrid  ,iorder)

                    mesh_parameter_previous = mesh_parameter(igrid-1,iorder)
                    mesh_parameter_current  = mesh_parameter(igrid  ,iorder)

                    ! Compute convergence rate of spatial operators. log10(error change)/log10(mesh spacing change)
                    convergence_rate = (log10(error_previous)-log10(error_current))/(log10(mesh_parameter_previous)-log10(mesh_parameter_current))
                
                    ! For this problem and specified grid resolutions, the convergence rates are 
                    ! a little higher than expected so we want to observe between iorder and iorder+1
                    @assertGreaterThan(convergence_rate, real(iorder,rk)-0.1)
                    @assertLessThan(convergence_rate, real(iorder,rk)+1.)

                end do
            end do
        end do

    end subroutine test_entropy_error_rate_new
    !*****************************************************************************************











    !>  Access the stored nonlinear convergence data(module global variable) and compare 
    !!  the parallel convergence to the serial convergence for each (grid,order) combination.
    !!
    !!  This assumes that the 'test_entropy_error_rate' has already been executed for all cases
    !!  and numbers of processors to that the 'nonlinear_convergence' variable has been 
    !!  populated.
    !!  So, we are relying on pFUnit to do things in order here. Works now, but I don't think
    !!  there is a guaruntee that this can't change.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_nonlinear_convergence(self)
        class(smoothbump),  intent(inout)   :: self

        integer(ik)             :: inpes, igrid, iorder
        real(rk), allocatable   :: reference_convergence(:), test_convergence(:)

        do igrid = 1,2
            do iorder = 1,4
                print*, 'igrid, iorder: ', igrid, iorder
                do inpes = 1,5
                    print*, 'inpes: ', inpes
                    print*, nonlinear_convergence(inpes,igrid,iorder)%data()
                end do
            end do
        end do

        do inpes = 1,5
            do igrid = 1,2
                do iorder = 1,4

                    ! Get the serial convergence for this (igrid,iorder)
                    reference_convergence = nonlinear_convergence(1,igrid,iorder)%data()

                    ! Test that the current convergence for the processor count matches the serial convergence
                    test_convergence = nonlinear_convergence(inpes,igrid,iorder)%data()

                    @assertEqual(reference_convergence, test_convergence, 1.e-5_rk)

                end do
            end do
        end do

    end subroutine test_nonlinear_convergence
    !*******************************************************************************************






    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !----------------------------------------------------------------------------------------
    function mesh_parameter(igrid,iorder) result(param)
        integer(ik),    intent(in)  :: igrid
        integer(ik),    intent(in)  :: iorder

        integer(ik) :: nelem, nterms_1d
        real(rk)    :: param

        select case (igrid)
            case(1)
                nelem = 24*12
            case(2)
                nelem = 48*24
            case default
                call chidg_signal(FATAL,"integration_smoothbump_mod%mesh_parameter: invalid igrid")
        end select


        select case (iorder)
            case(1) 
                nterms_1d = (iorder)
            case(2)
                nterms_1d = (iorder)
            case(3)
                nterms_1d = (iorder)
            case(4)
                nterms_1d = (iorder)
            case default
                call chidg_signal(FATAL,"integration_smoothbump_mod%mesh_parameter: invalid iorder")
        end select


        param = ONE/sqrt(real(nelem,rk)*real(nterms_1d*nterms_1d,rk))

    end function mesh_parameter
    !****************************************************************************************







    ! Utility for returning the index associated with a certain number of procs
    !------------------------------------------------------------------------------
    function get_npes_index(numproc) result(inpes)
        integer(ik) :: numproc
        integer(ik) :: inpes

        select case (numproc)
            case(1)
                inpes = 1
            case(2)
                inpes = 2
            case(4)
                inpes = 3
            case(5)
                inpes = 4
            case(8)
                inpes = 5

        end select

    end function get_npes_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain grid file
    !------------------------------------------------------------------------------
    function get_grid_index(grid) result(igrid)
        character(len=*)    :: grid
        integer(ik)         :: igrid

        select case (trim(grid))
            case('smoothbump_24x12x2.h5')
                igrid = 1 
            case('smoothbump_48x24x2.h5')
                igrid = 2 
        end select

    end function get_grid_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain order of accuracy
    !------------------------------------------------------------------------------
    function get_order_index(P) result(iorder)
        integer(ik) :: P
        integer(ik) :: iorder

        select case (P)
            case(0)
                iorder = 1
            case(1)
                iorder = 2
            case(2)
                iorder = 3
            case(3)
                iorder = 4
        end select

    end function get_order_index
    !******************************************************************************






end module integration_smoothbump_mod
