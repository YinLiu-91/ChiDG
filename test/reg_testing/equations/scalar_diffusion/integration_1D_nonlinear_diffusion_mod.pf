!--------------------------------------------------------------------------------
!
!           Test a 1D nonlinear diffusion problem with a source term.
!
!   div(-mu(u)*grad(u)) = S
!
!   Diffusion Flux Definition:
!       F(u) = -mu(u)*dudx
!
!   Source Definition: no source
!       S(x) = 0
!
!   Scalar Diffusion Coefficient model:
!       mu(u) = exp(lambda * u)
!
!
!   Analytical Solution is:
!       U(x) = (1/lambda)ln((A+Bx)/D)  for x in [0,1]
!
!   Boundary conditions are:
!       Dirichlet U(x=0) = (1/lambda)ln(A/D)
!       Dirichlet U(x=1) = (1/lambda)ln((A+B)/D)
!
!   Free coefficients:
!       A = 1, B = 50, D = 1, lambda = 1
!
!   Reference:
!       Polyanin, A. D., and Zaitsev, V. F., 
!       "Handbook of Nonlinear Partial Differential Equations", 
!       Chapman & Hall, 2004
!
!
!   Tests that are being run here:
!       - Run the calculation on multiple grids with order of accuracy 2-4
!       - Test convergence rates for spatial orders of accuracy
!
!--------------------------------------------------------------------------------
module integration_1D_nonlinear_diffusion_mod
#include <messenger.h>
    use pfunit_mod
    use mod_kinds,              only: rk, ik
    use mod_constants,          only: ZERO, THREE, IO_DESTINATION, ONE, TWO, PI, FOUR, &
                                      XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use mod_bc,                 only: create_bc
    use mod_string,             only: string_t
    use type_bc_state,          only: bc_state_t
    use type_bc_state_group,          only: bc_state_group_t
    use type_chidg,             only: chidg_t
    use type_chidg_data,        only: chidg_data_t
    use type_function,          only: function_t
    use mod_function,           only: create_function
    use mod_interpolate,        only: interpolate_element_standard
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use type_fgmres,            only: fgmres_t

    use mod_chidg_mpi,          only: IRANK, NRANK, ChiDG_COMM
    use mpi_f08,                only: MPI_COMM, MPI_REAL8, MPI_SUM
    use mod_io

    use type_chidg_worker,      only: chidg_worker_t
    use type_properties,        only: properties_t
    use DNAD_D


    ! Imports for defining a new operator
    use mod_operators,          only: operator_factory
    use type_operator,          only: operator_t
    use mod_models,             only: model_factory
    use type_model,             only: model_t

    ! Imports for defining a new equation builder
    use mod_equations,          only: equation_set_factory
    use type_equation_builder,  only: equation_builder_t
    use type_equation_set,      only: equation_set_t
    implicit none



    ! Store the nonlinear convergence for each test case. This is used 
    ! to test the nonlinear convergence between a case running on
    ! a different number of procs.
    !
    ! Procs: 1, 2, 3, 5, 8
    !
    real(rk)    :: error(5,2,3)         ! nprocs, ngrids, norders
    real(rk)    :: error_chimera(5,2,3) ! nprocs, ngrids, norders


    public  :: nonlinear_diffusion_1D





    !>  Nonlinear coefficient model for nonlinear scalar diffusion problem
    !!
    !!  mu(u) = exp(lambda*u)
    !!
    !!  @author Nathan A. Wukie
    !!  @date   12/3/2016
    !!
    !!
    !---------------------------------------------------------------------------------------
    type, extends(model_t), public :: testing_1D_nonlinear_diffusion_model_t

    contains

        procedure   :: init    => init_model
        procedure   :: compute => compute_model

    end type testing_1D_nonlinear_diffusion_model_t
    !***************************************************************************************





    !>  A new equation set builder to build a linear diffusion equation set with the 
    !!  new custom volume source.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/19/2016
    !!
    !----------------------------------------------------------------------------------------
    type, extends(equation_builder_t), public :: test_nonlinear_diffusion_builder_t


    contains

        procedure   :: init => init_builder
        procedure   :: build

    end type test_nonlinear_diffusion_builder_t
    !****************************************************************************************







    !>  This parameter initialize the state for each test
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestParameter
    type, extends(MpiTestParameter) :: case_grid_order

        integer(ik)                 :: nelem_xi
        character(:),   allocatable :: gridtype
        character(:),   allocatable :: gridfile
        integer(ik)                 :: order
        
    contains
        procedure   :: toString
    end type case_grid_order
    !*******************************************************************************







    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MpiTestCase) :: nonlinear_diffusion_1D

        integer(ik)                 :: nelem_xi
        character(:),   allocatable :: gridtype
        character(:),   allocatable :: gridfile
        integer(ik)                 :: order

        type(chidg_t)   :: chidg
        type(mpi_comm)  :: ChiDG_COMM

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type nonlinear_diffusion_1D
    !*******************************************************************************


contains


    !----------------------------------------------------------------------------------------
    !                       Scalar Diffusion Coefficient Model Methods
    !----------------------------------------------------------------------------------------

    !>  Initialize scalar diffusion coefficient model with name and model field being 
    !!  provided.
    !!
    !!  @author Nathan A. Wukie
    !!  @date   12/3/2016
    !!
    !----------------------------------------------------------------------------------------
    subroutine init_model(self)
        class(testing_1D_nonlinear_diffusion_model_t),    intent(inout)   :: self

        call self%set_name('Testing 1D Nonlinear Diffusion :: Coefficient Model')
        call self%set_dependency('f(Q-)')

        call self%add_model_field('Scalar Diffusion Coefficient')

    end subroutine init_model
    !****************************************************************************************



    !>  Implement the function for providing the scalar diffusion coefficient field.
    !!
    !!  @author Nathan A. Wukie
    !!  @date   12/3/2016
    !!
    !----------------------------------------------------------------------------------------
    subroutine compute_model(self,worker)
        class(testing_1D_nonlinear_diffusion_model_t), intent(in)      :: self
        type(chidg_worker_t),                       intent(inout)   :: worker

        type(AD_D), allocatable, dimension(:)   :: u, mu


        u = worker%get_field('u', 'value')
        mu = exp(u)

        call worker%store_model_field('Scalar Diffusion Coefficient', 'value', mu)

    end subroutine compute_model
    !****************************************************************************************





    !-------------------------------------------------------------------------------
    !                           Builder Methods for new equation set
    !-------------------------------------------------------------------------------


    !>  Initialize the new nonlinear diffusion builder.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/30/2016
    !!
    !----------------------------------------------------------------------------------------
    subroutine init_builder(self)
        class(test_nonlinear_diffusion_builder_t),   intent(inout)  :: self

        call self%set_name('Test 1D Nonlinear Diffusion')

    end subroutine init_builder
    !****************************************************************************************

    



    !>  Implement the nonlinear diffusion builder definition.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/19/2016
    !!
    !----------------------------------------------------------------------------------------
    function build(self,blueprint) result(nonlinear_diffusion_eqn)
        class(test_nonlinear_diffusion_builder_t),  intent(in)  :: self
        character(*),                               intent(in)  :: blueprint

        type(equation_set_t)    :: nonlinear_diffusion_eqn
        
        ! Set equationset name.
        call nonlinear_diffusion_eqn%set_name("Test 1D Nonlinear Diffusion")

        ! Add spatial operators
        call nonlinear_diffusion_eqn%add_operator("Scalar Diffusion Boundary Average Operator")
        call nonlinear_diffusion_eqn%add_operator("Scalar Diffusion Volume Operator")
        call nonlinear_diffusion_eqn%add_operator("Scalar Diffusion BC Operator")

        ! Add nonlinear coefficient model
        call nonlinear_diffusion_eqn%add_model('Testing 1D Nonlinear Diffusion :: Coefficient Model')

    end function build
    !*****************************************************************************************





    !-------------------------------------------------------------------------------
    !                               Test methods
    !-------------------------------------------------------------------------------



    !> Parameter constructors
    !!
    !!
    !----------------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_grid_order),  intent(in)          :: test_parameter
        type(nonlinear_diffusion_1D)    :: test

        test%nelem_xi = test_parameter%nelem_xi
        test%gridtype = test_parameter%gridtype
        test%gridfile = test_parameter%gridfile
        test%order    = test_parameter%order

    end function newTest
    !****************************************************************************************


    !> Parameter initialization
    !!
    !!
    !----------------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_grid_order), allocatable :: params(:)
    
        integer(ik),        allocatable :: nelem_xi(:)
        type(string_t),     allocatable :: files(:), gridtype(:)
        integer(ik),        allocatable :: orders(:)
        integer(ik) :: icase

        nelem_xi = [120, 120, 120, &
                    240, 240, 240, &
                    120, 120, 120, &
                    240, 240, 240 ]


        gridtype = [string_t('singleblock'), &
                    string_t('singleblock'), &
                    string_t('singleblock'), &
                    string_t('singleblock'), &
                    string_t('singleblock'), &
                    string_t('singleblock'), &
                    string_t('chimera'),     &
                    string_t('chimera'),     &
                    string_t('chimera'),     &
                    string_t('chimera'),     &
                    string_t('chimera'),     &
                    string_t('chimera')      &
                    ]


        files = [ string_t('1D_nonlinear_diffusion_120x1x1.h5'),         &
                  string_t('1D_nonlinear_diffusion_120x1x1.h5'),         &
                  string_t('1D_nonlinear_diffusion_120x1x1.h5'),         &
                  string_t('1D_nonlinear_diffusion_240x1x1.h5'),         &
                  string_t('1D_nonlinear_diffusion_240x1x1.h5'),         &
                  string_t('1D_nonlinear_diffusion_240x1x1.h5'),         &
                  string_t('1D_nonlinear_diffusion_120x1x1_chimera.h5'), &
                  string_t('1D_nonlinear_diffusion_120x1x1_chimera.h5'), &
                  string_t('1D_nonlinear_diffusion_120x1x1_chimera.h5'), &
                  string_t('1D_nonlinear_diffusion_240x1x1_chimera.h5'), &
                  string_t('1D_nonlinear_diffusion_240x1x1_chimera.h5'), &
                  string_t('1D_nonlinear_diffusion_240x1x1_chimera.h5')  &
                  ]


        orders = [ 2, 3, 4, &
                   2, 3, 4, &
                   2, 3, 4, &
                   2, 3, 4 ]


        !Initialize the test case container with the parameter
        allocate(params(size(files)))
        do icase = 1,size(files)
            params(icase)%nelem_xi = nelem_xi(icase)
            params(icase)%gridtype = gridtype(icase)%str
            params(icase)%gridfile = files(icase)%str
            params(icase)%order    = orders(icase)
        end do

    end function getParameters
    !****************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!
    !----------------------------------------------------------------------------------------
    function toString(this) result(string)
        class (case_grid_order),    intent(in)  :: this
        character(:), allocatable   :: string

        character(200) :: buffer

        write(buffer,'( "(nelem_xi, gridtype, order)=","(", I3,",", A10,",", I1, ")" )') this%nelem_xi, this%gridtype, this%order
        string = trim(buffer)

    end function toString
    !****************************************************************************************





    !>  Set up test routine.
    !!
    !!  This routine reads the grid file, sets up boundary conditions, initializes storage
    !!  and sets the appropriate configuration options.
    !!  This routine also gets the numer of processors and the correct MPI communicator for 
    !!  the test.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !----------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(nonlinear_diffusion_1D),  intent(inout)   :: this

        integer(ik)                     :: ierr
        class(function_t),  allocatable :: fcn
        class(bc_state_t),  allocatable :: bc_state
        type(bc_state_group_t)          :: bc_state_groups(3)
        type(string_t)                  :: group_names(2,6)

        
        type(test_nonlinear_diffusion_builder_t)        :: builder_test_nonlinear_diffusion
        type(testing_1D_nonlinear_diffusion_model_t)    :: diffusion_coefficient_model

        ! Get MPI communicator information from pFUnit
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        ! Initialize ChiDG environment
        IO_DESTINATION   = 'file'
        call this%chidg%start_up('mpi',this%ChiDG_COMM)
        call this%chidg%start_up('core')


        !-------------------------------------------------------------------------------
        !          Initialize and register the diffusion coefficient model
        !-------------------------------------------------------------------------------
        call diffusion_coefficient_model%init()
        call model_factory%register(diffusion_coefficient_model)


        !-------------------------------------------------------------------------------
        !                 Initialize and register equation set builder
        !-------------------------------------------------------------------------------
        call builder_test_nonlinear_diffusion%init()
        call equation_set_factory%register(builder_test_nonlinear_diffusion%build('default'))


        !------------------------------------------------------------------------------
        !
        ! Define input data here that is normally read through the namelist input file
        !
        ! As a result, we don't call chidg%init('io')
        !
        !------------------------------------------------------------------------------
        basis            = 'legendre'
        gq_rule          = 2
        time_integrator  = 'steady'
        nonlinear_solver = 'newton'
        linear_solver    = 'fgmres'
        preconditioner   = 'RASILU0'

        ! Set linear solver options to pass during initialization
        call loptions%set('tol',1.e-15_rk)
        call loptions%set('rtol',1.e-15_rk)

        ! Set nonlinear solver options
        call noptions%set('tol',1.e-8_rk)
        call noptions%set("rtol",1.e-14_rk)
        call noptions%set('cfl0',0.01_rk)
        call noptions%set('nsteps',1000)
        call noptions%set('ptc',.true.)
        !------------------------------------------------------------------------------





        !
        ! Create mesh
        !
        if (IRANK == GLOBAL_MASTER) then
            bc_state_groups(1)%name = "Left Boundary"
            bc_state_groups(2)%name = "Right Boundary"
            bc_state_groups(3)%name = "YZ Boundaries"


            call create_bc("Scalar Value", bc_state)
            call bc_state%set_fcn_option("Value","val", ZERO )
            call bc_state_groups(1)%add_bc_state(bc_state)

            call create_bc("Scalar Value", bc_state)
            call bc_state%set_fcn_option("Value","val", log(ONE + 50._rk*ONE) )
            call bc_state_groups(2)%add_bc_state(bc_state)

            call create_bc("Scalar Extrapolate", bc_state)
            call bc_state_groups(3)%add_bc_state(bc_state)


            if (this%gridtype == 'singleblock') then

                group_names(1,:) = [string_t("Left Boundary")  , &
                                    string_t("Right Boundary") , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries") ]



                call create_mesh_file('D1 NxNxN',this%gridfile,                                                 &
                                                 equation_sets   = [string_t("Test 1D Nonlinear Diffusion")],   &
                                                 group_names     = group_names,                                 &
                                                 bc_state_groups = bc_state_groups,                             &
                                                 nelem_xi        = this%nelem_xi,                               &
                                                 nelem_eta       = 1,                                           &
                                                 nelem_zeta      = 1,                                           &
                                                 clusterx        = -1)

            else if (this%gridtype == 'chimera') then


                group_names(1,:) = [string_t("Left Boundary")  , &
                                    string_t("Empty")          , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries") ]

                group_names(2,:) = [string_t("Empty")          , &
                                    string_t("Right Boundary") , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries")  , &
                                    string_t("YZ Boundaries") ]


                call create_mesh_file('D2 NxNxN M1',this%gridfile,                                              &
                                                    equation_sets   =[string_t("Test 1D Nonlinear Diffusion"),  &
                                                                      string_t("Test 1D Nonlinear Diffusion")], &
                                                    group_names     = group_names,                              &
                                                    bc_state_groups = bc_state_groups,                          &
                                                    nelem_xi        = this%nelem_xi,                            &
                                                    nelem_eta       = 1,                                        &
                                                    nelem_zeta      = 1,                                        &
                                                    clusterx        = -1)

            end if


        end if
        call MPI_Barrier(this%ChiDG_COMM,ierr)


        ! Set ChiDG components
        call this%chidg%set('Solution Order',   integer_input=this%order)
        call this%chidg%set('Time Integrator',  algorithm=time_integrator)
        call this%chidg%set('Nonlinear Solver', algorithm=nonlinear_solver, options=noptions)
        call this%chidg%set('Linear Solver',    algorithm=linear_solver,    options=loptions)
        call this%chidg%set('Preconditioner',   algorithm=preconditioner)

        ! Read grid
        call this%chidg%read_mesh(this%gridfile)


        ! Initialize solution. 
        !
        ! This problem depends strongly on having a good initial solution, or else
        ! the cfl0 needs to be reduced a lot. Setting a linear initial solution here
        ! from 0 to 3.5 on x=[0,1]
        call create_function(fcn,'polynomial')
        call fcn%set_option('f',3.5_rk)
        call this%chidg%data%sdata%q_in%project(this%chidg%data%mesh,fcn,1)



    end subroutine SetUp
    !****************************************************************************************



    !>
    !!
    !!
    !!
    !----------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(nonlinear_diffusion_1D),  intent(inout)   :: this

        ! Close ChiDG
        call this%chidg%shut_down('core')

        if (IRANK == GLOBAL_MASTER) then
            call delete_file(this%gridfile)
        end if

    end subroutine tearDown
    !****************************************************************************************




    !>  Run the simulation.
    !!
    !!      - compute the entropy error, test against the reference values.
    !!      - store the nonlinear convergence to the module variable so it can 
    !!        be used by a test for nonlinear convergence.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !----------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,5,8])
    subroutine run_calculations(self)
        class(nonlinear_diffusion_1D),  intent(inout)   :: self

        real(rk)    :: computed_error
        integer(ik) :: npes_index, grid_index, order_index

        npes_index  = get_npes_index(NRANK)
        grid_index  = get_grid_index(self%nelem_xi)
        order_index = get_order_index(self%order)

        ! Run ChiDG simulation
        call self%chidg%run(write_initial=.false., write_final=.false.)

        ! Compute error
        computed_error = compute_1D_nonlinear_diffusion_error(self%chidg%data,self%ChiDG_COMM)

        ! Store the computed error for the current case
        if (self%gridtype == 'singleblock') then
            error(        npes_index,grid_index,order_index) = computed_error
        else if (self%gridtype == 'chimera') then
            error_chimera(npes_index,grid_index,order_index) = computed_error
        end if

    end subroutine run_calculations
    !****************************************************************************************






    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !----------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_err_conform(self)
        class(nonlinear_diffusion_1D),  intent(inout)   :: self

        integer(ik) :: inpes, igrid, iorder
        real(rk)    :: error_previous, error_current, mesh_parameter_previous, mesh_parameter_current, convergence_rate, tol

        tol = 0.1_rk

        do inpes = 1,5
            do igrid = 2,2  ! Start at the second grid because we need the previous grid in order to compute a rate 
                do iorder = 1,3

                    error_previous = error(inpes,igrid-1,iorder)
                    error_current  = error(inpes,igrid  ,iorder)

                    mesh_parameter_previous = mesh_parameter(igrid-1,iorder)
                    mesh_parameter_current  = mesh_parameter(igrid  ,iorder)

                    ! Compute convergence rate of spatial operators. log10(error)/log10(mesh spacing)
                    convergence_rate = (log10(error_previous)-log10(error_current))/(log10(mesh_parameter_previous)-log10(mesh_parameter_current))
                    @assertGreaterThan(convergence_rate, real(iorder+1,rk)-tol)

                end do
            end do
        end do

    end subroutine test_err_conform
    !****************************************************************************************






    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !----------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_err_chimera(self)
        class(nonlinear_diffusion_1D),  intent(inout)   :: self

        integer(ik) :: inpes, igrid, iorder
        real(rk)    :: error_previous, error_current, mesh_parameter_previous, mesh_parameter_current, convergence_rate, tol

        tol = 0.1_rk

        do inpes = 1,5
            do igrid = 2,2  ! Start at the second grid because we need the previous grid in order to compute a rate 
                do iorder = 1,3

                    error_previous = error_chimera(inpes,igrid-1,iorder)
                    error_current  = error_chimera(inpes,igrid  ,iorder)

                    mesh_parameter_previous = mesh_parameter(igrid-1,iorder)
                    mesh_parameter_current  = mesh_parameter(igrid  ,iorder)

                    ! Compute convergence rate of spatial operators. log10(error)/log10(mesh spacing)
                    convergence_rate = (log10(error_previous)-log10(error_current))/(log10(mesh_parameter_previous)-log10(mesh_parameter_current))
                    @assertGreaterThan(convergence_rate, real(iorder+1,rk)-tol)

                end do
            end do
        end do


    end subroutine test_err_chimera
    !****************************************************************************************






    !>  Function to compute the error in the 1D scalar diffusion equation.
    !!
    !!  The error is computed as the L2-Norm of the difference in the analytical and
    !!  numerical solutions integrated over the domain.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !----------------------------------------------------------------------------------------
    function compute_1D_nonlinear_diffusion_error(data,ChiDG_COMM) result(error)
        type(chidg_data_t), intent(inout)   :: data
        type(mpi_comm),     intent(in)      :: ChiDG_COMM

        real(rk), allocatable, dimension(:) :: &
            u_dg, u_analytical, x_gq, gq_error_squared


        integer(ik) :: iu
        integer(ik) :: ielem, idom, ierr, itime
        real(rk)    :: error_squared_sum, error_squared_sum_reduced, element_error_squared, error


        associate (mesh => data%mesh, sdata => data%sdata, &
                   eqnset => data%eqnset, prop => data%eqnset(1)%prop)

            ! Get equation indices
            iu = prop%get_primary_field_index("u")

            ! Zero error accumulator
            error_squared_sum = ZERO

            ! Loop over elements and accumulate error
            itime = 1
            do idom = 1,data%mesh%ndomains()
                do ielem = 1,data%mesh%domain(idom)%nelem

                    ! Compute the analytical solution at the quadrature nodes
                    !      U(x) = (1/lambda)ln((A+Bx)/D)  for x in [0,1]
                    x_gq = mesh%domain(idom)%elems(ielem)%interp_coords(:,1)
                    u_analytical = log(ONE + 50._rk*x_gq)

                    ! Interpolate DG numerical solution
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,iu,itime,'value')

                    ! Compute error at GQ nodes
                    gq_error_squared = (u_analytical - u_dg)**TWO

                    ! Integrate error
                    element_error_squared = sum(gq_error_squared * mesh%domain(idom)%elems(ielem)%jinv * mesh%domain(idom)%elems(ielem)%basis_s%weights_element())

                    ! Accumulate error from each element
                    error_squared_sum = error_squared_sum + element_error_squared

                end do ! ielem
            end do ! idom


        end associate

        ! Reduce the total error across processors
        call MPI_AllReduce(error_squared_sum,error_squared_sum_reduced,1,MPI_REAL8,MPI_SUM,ChiDG_COMM,ierr)

        ! Sqrt of the reduced error
        error = sqrt(error_squared_sum_reduced)

    end function compute_1D_nonlinear_diffusion_error
    !****************************************************************************************





    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !---------------------------------------------------------------------------------------
    function mesh_parameter(igrid,iorder) result(param)
        integer(ik),    intent(in)  :: igrid
        integer(ik),    intent(in)  :: iorder

        integer(ik) :: nelem, nterms_1d
        real(rk)    :: param

        select case (igrid)
            case(1)
                nelem = 120
            case(2)
                nelem = 240
            case default
                call chidg_signal(FATAL,"integration_1D_nonlinear_diffusion_mod%mesh_parameter: invalid igrid")
        end select


        select case (iorder)
            case(1) ! iorder = 1  =>  order = 2
                nterms_1d = (iorder+1)
            case(2)
                nterms_1d = (iorder+1)
            case(3)
                nterms_1d = (iorder+1)
            case default
                call chidg_signal(FATAL,"integration_1D_nonlinear_diffusion_mod%mesh_parameter: invalid iorder")
        end select


        param = ONE/(real(nelem,rk)*real(nterms_1d,rk))

    end function mesh_parameter
    !****************************************************************************************




    ! Utility for returning the index associated with a certain number of procs
    !---------------------------------------------------------------------------------------
    function get_npes_index(numproc) result(inpes)
        integer(ik), intent(in) :: numproc

        integer(ik) :: inpes

        select case (numproc)
            case(1)
                inpes = 1
            case(2)
                inpes = 2
            case(3)
                inpes = 3
            case(5)
                inpes = 4
            case(8)
                inpes = 5
        end select

    end function get_npes_index
    !****************************************************************************************



    ! Utility for returning the index associated with a certain grid file
    !----------------------------------------------------------------------------------------
    function get_grid_index(nelem_xi) result(igrid)
        integer(ik),    intent(in)  :: nelem_xi

        integer(ik) :: igrid

        select case (nelem_xi)
            case(120)
                igrid = 1
            case(240)
                igrid = 2
        end select

    end function get_grid_index
    !***************************************************************************************



    ! Utility for returning the index associated with a certain order of accuracy
    !---------------------------------------------------------------------------------------
    function get_order_index(order) result(iorder)
        integer(ik), intent(in) :: order

        integer(ik) :: iorder

        select case (order)
            case(2)
                iorder = 1
            case(3)
                iorder = 2
            case(4)
                iorder = 3
        end select

    end function get_order_index
    !****************************************************************************************






end module integration_1D_nonlinear_diffusion_mod
