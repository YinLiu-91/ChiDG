!--------------------------------------------------------------------------------
!
!           Test a 2D linear diffusion problem with a source term.
!
!   div(-grad(u)) = S
!
!   Linear Diffusion Flux Definition:
!       F(u) = -grad(u)
!
!   Diffusion Coefficient Model:
!       mu(u) = 1.0
!
!   Source Definition:
!       S(x) = -2*pi*pi*sin(pi*x)*sin(pi*y)
!
!   Boundary conditions are:
!       Dirichlet U(boundaries) = 0
!
!   Analytical Solution is:
!       U(x,y) = sin(pi*x)sin(pi*y)   for x in [0,1]
!
!   Reference:
!       Galbraith, M. "A discontinuous Galerkin Chimera Overset Solver", 
!       PhD Dissertation, University of Cincinnati, 2013
!
!
!   Tests that are being run here:
!       - Run the calculation on multiple grids with order of accuracy 2-5
!       - Test for convergence in 1 Newton iteration (linear problem)
!       - Test convergence rates for spatial orders of accuracy
!
!--------------------------------------------------------------------------------
module integration_2D_linear_diffusion_mod
#include <messenger.h>
    use pfunit_mod
    use mod_kinds,              only: rk, ik
    use mod_constants,          only: ZERO, THREE, IO_DESTINATION, ONE, TWO, PI, FOUR, &
                                      XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use type_chidg,             only: chidg_t
    use type_chidg_data,        only: chidg_data_t
    use mod_bc,                 only: create_bc
    use mod_string,             only: string_t
    use type_bc_state,          only: bc_state_t
    use type_bc_state_group,    only: bc_state_group_t
    use type_function,          only: function_t
    use type_ivector,           only: ivector_t
    use mod_function,           only: create_function
    use mod_interpolate,        only: interpolate_element_standard
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file

    use mod_chidg_mpi,          only: IRANK, NRANK, ChiDG_COMM
    use mpi_f08,                only: MPI_COMM, MPI_REAL8, MPI_SUM
    use mod_io

    use type_chidg_worker,      only: chidg_worker_t
    use type_properties,        only: properties_t
    use DNAD_D

    ! Imports for defining a new operator
    use mod_operators,          only: operator_factory
    use type_operator,          only: operator_t
    use mod_models,             only: model_factory
    use type_model,             only: model_t

    ! Imports for defining a new equation builder
    use mod_equations,          only: equation_set_factory
    use type_equation_builder,  only: equation_builder_t
    use type_equation_set,      only: equation_set_t
    implicit none


    ! Store the nonlinear convergence for each test case. This is used 
    ! to test the nonlinear convergence between a case running on
    ! a different number of procs.
    !
    ! Procs: 1, 2, 3
    !
    type(ivector_t) :: nsteps_convergence(3,2,4,2)    ! nprocs, ngrids, norders, (native,petsc)
    real(rk)        :: error(3,2,4,2)                 ! nprocs, ngrids, norders, (native,petsc)


    public  :: linear_diffusion_2D






    !>  A custom source term for the current test case
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/21/2016
    !!
    !!  S(x) = 2*pi*pi*sin(pi*x)*sin(pi*y)
    !!
    !-------------------------------------------------------------------------
    type, extends(operator_t), public :: test_2D_LD_volume_source_t

    contains

        procedure   :: init
        procedure   :: compute

    end type test_2D_LD_volume_source_t
    !*************************************************************************



    !>  The diffusion coefficient model.
    !!
    !!  @author Nathan A. Wukie
    !!  @date   12/3/2016
    !!
    !!
    !---------------------------------------------------------------------------------------
    type, extends(model_t), public :: testing_2D_linear_diffusion_model_t

    contains

        procedure   :: init    => init_model
        procedure   :: compute => compute_model

    end type testing_2D_linear_diffusion_model_t
    !***************************************************************************************










    !>  A new equation set builder to build a linear diffusion equation set with the 
    !!  new custom volume source.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/19/2016
    !!
    !----------------------------------------------------------------------------------------
    type, extends(equation_builder_t), public :: test_2D_linear_diffusion_builder_t

    contains

        procedure   :: init => init_builder
        procedure   :: build

    end type test_2D_linear_diffusion_builder_t
    !*****************************************************************************************





    !>  This parameter initialize the state for each test
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestParameter
    type, extends(MpiTestParameter) :: case_grid_order
        integer(ik)                 :: nelem_xi
        integer(ik)                 :: nelem_eta
        integer(ik)                 :: order
        character(:),   allocatable :: gridfile
        character(:),   allocatable :: backend
    contains
        procedure   :: toString
    end type case_grid_order
    !*******************************************************************************







    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MpiTestCase) :: linear_diffusion_2D
        
        integer(ik)                 :: nelem_xi
        integer(ik)                 :: nelem_eta
        integer(ik)                 :: order
        character(:),   allocatable :: gridfile
        character(:),   allocatable :: backend

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type linear_diffusion_2D
    !*******************************************************************************

    type(chidg_t)   :: chidg

contains

    !-------------------------------------------------------------------------------
    !                           Volume Source Methods
    !-------------------------------------------------------------------------------

    !>  Initialize the new volume source operator.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/29/2016
    !!
    !--------------------------------------------------------------------------------
    subroutine init(self)
        class(test_2D_LD_volume_source_t),   intent(inout)      :: self

        ! Set operator name
        call self%set_name("Test 2D Linear Diffusion Volume Source")

        ! Set operator type
        call self%set_operator_type("Volume Diffusive Flux")

        ! Set operator equations
        call self%add_primary_field("u")

    end subroutine init
    !********************************************************************************



    !>  Implement the volume source definition.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/19/2016
    !!
    !!
    !----------------------------------------------------------------------------------------
    subroutine compute(self,worker,prop)
        class(test_2D_LD_volume_source_t),  intent(inout)   :: self
        type(chidg_worker_t),               intent(inout)   :: worker
        class(properties_t),                intent(inout)   :: prop

        type(AD_D), allocatable, dimension(:)   :: source, x, y

        ! Interpolate solution to quadrature nodes
        source = worker%get_field('u','grad1','element')

        x = worker%x('volume')
        y = worker%y('volume')
        source = TWO*PI*PI*dsin(PI*x)*dsin(PI*y)


        ! Integrate volume flux
        call worker%integrate_volume_source('u',source)

    end subroutine compute
    !****************************************************************************************




    !----------------------------------------------------------------------------------------
    !                       Scalar Diffusion Coefficient Model Methods
    !----------------------------------------------------------------------------------------

    !>  Initialize scalar diffusion coefficient model with name and model field being 
    !!  provided.
    !!
    !!  @author Nathan A. Wukie
    !!  @date   12/3/2016
    !!
    !----------------------------------------------------------------------------------------
    subroutine init_model(self)
        class(testing_2D_linear_diffusion_model_t),    intent(inout)   :: self

        call self%set_name('Testing 2D Linear Diffusion :: Coefficient Model')
        call self%set_dependency('f(Q-)')

        call self%add_model_field('Scalar Diffusion Coefficient')

    end subroutine init_model
    !****************************************************************************************



    !>  Implement the function for providing the scalar diffusion coefficient field.
    !!
    !!  @author Nathan A. Wukie
    !!  @date   12/3/2016
    !!
    !----------------------------------------------------------------------------------------
    subroutine compute_model(self,worker)
        class(testing_2D_linear_diffusion_model_t), intent(in)      :: self
        type(chidg_worker_t),                       intent(inout)   :: worker

        type(AD_D), allocatable, dimension(:)   :: u, mu

        u = worker%get_field('u', 'value')
        mu = u
        mu = 1._rk

        call worker%store_model_field('Scalar Diffusion Coefficient', 'value', mu)

    end subroutine compute_model
    !****************************************************************************************






    
    !-------------------------------------------------------------------------------
    !                           Builder Methods for new equation set
    !-------------------------------------------------------------------------------


    !>  Initialize the new linear diffusion builder.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/30/2016
    !!
    !-----------------------------------------------------------------------------------------
    subroutine init_builder(self)
        class(test_2D_linear_diffusion_builder_t),   intent(inout)  :: self

        call self%set_name('Test 2D Linear Diffusion')

    end subroutine init_builder
    !*****************************************************************************************

    



    !>  Implement the linear diffusion builder definition.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/19/2016
    !!
    !-----------------------------------------------------------------------------------------
    function build(self,blueprint) result(linear_diffusion_eqn)
        class(test_2D_linear_diffusion_builder_t),  intent(in)  :: self
        character(*),                               intent(in)  :: blueprint

        type(equation_set_t)    :: linear_diffusion_eqn
        
        ! Set equationset name.
        call linear_diffusion_eqn%set_name("Test 2D Linear Diffusion")

        ! Add spatial operators
        call linear_diffusion_eqn%add_operator("Scalar Diffusion Boundary Average Operator")
        call linear_diffusion_eqn%add_operator("Scalar Diffusion Volume Operator")
        call linear_diffusion_eqn%add_operator("Scalar Diffusion BC Operator")
        call linear_diffusion_eqn%add_operator("Test 2D Linear Diffusion Volume Source")

        ! Add model for 'compute_mu' scalar coefficient
        call linear_diffusion_eqn%add_model('Testing 2D Linear Diffusion :: Coefficient Model')

    end function build
    !*****************************************************************************************





    !-------------------------------------------------------------------------------
    !                               Test methods
    !-------------------------------------------------------------------------------



    !> Parameter constructors
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_grid_order),  intent(in)  :: test_parameter

        type(linear_diffusion_2D)   :: test

        test%nelem_xi  = test_parameter%nelem_xi
        test%nelem_eta = test_parameter%nelem_eta
        test%order     = test_parameter%order
        test%gridfile  = test_parameter%gridfile
        test%backend   = test_parameter%backend

    end function newTest
    !******************************************************************************


    !> Parameter initialization
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_grid_order), allocatable :: params(:)
    
        integer(ik),        allocatable :: nelem_xi(:)
        integer(ik),        allocatable :: nelem_eta(:)
        integer(ik),        allocatable :: orders(:)
        type(string_t),     allocatable :: backend(:)
        integer(ik) :: icase, imesh, iorder, ibackend, ncases


        nelem_xi  = [16, 32]
        nelem_eta = [16, 32]
        orders    = [2, 3, 4]
        backend   = [ string_t("native"), string_t("petsc")   ]


        !Initialize the test case container with the parameter
        ncases = size(nelem_xi)*size(orders)*size(backend)
        if (allocated(params)) deallocate(params)
        allocate(params(ncases))

        icase = 1
        do imesh = 1,size(nelem_xi)
            do iorder = 1,size(orders)
                do ibackend = 1,size(backend)

                    params(icase)%nelem_xi  = nelem_xi(imesh)
                    params(icase)%nelem_eta = nelem_eta(imesh)
                    params(icase)%order     = orders(iorder)
                    params(icase)%gridfile  = 'grid.h5'
                    params(icase)%backend   = backend(ibackend)%str
                    icase = icase + 1

                end do
            end do
        end do

    end function getParameters
    !******************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!
    !------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class (case_grid_order),    intent(in)  :: this
        character(:), allocatable   :: string

        character(200) :: buffer

        write(buffer,'( "(nelem_xi, nelem_eta, order, backend)=","(", I2,",", I2,",", I1,",", A5, ")" )') this%nelem_xi, this%nelem_eta, this%order, this%backend
        string = trim(buffer)

    end function toString
    !******************************************************************************************







    !>  Set up test routine.
    !!
    !!  This routine reads the grid file, sets up boundary conditions, initializes storage
    !!  and sets the appropriate configuration options.
    !!  This routine also gets the numer of processors and the correct MPI communicator for 
    !!  the test.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(linear_diffusion_2D),  intent(inout)   :: this

        class(function_t),  allocatable :: fcn
        class(bc_state_t),  allocatable :: bc_state
        type(bc_state_group_t)          :: bc_state_groups(2)
        type(string_t)                  :: group_names(1,6)

        
        type(testing_2D_linear_diffusion_model_t)  :: diffusion_coefficient_model
        type(test_2D_LD_volume_source_t)           :: source_test_linear_diffusion
        type(test_2D_linear_diffusion_builder_t)   :: builder_test_linear_diffusion


        ! Get MPI communicator information from pFUnit
        IRANK              = this%getProcessRank()
        NRANK              = this%getNumProcessesRequested()
        ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        ! Initialize ChiDG environment
        call chidg%start_up('mpi',ChiDG_COMM)
        call chidg%start_up('core')


        !------------------------------------------------------------------------------
        !
        ! Define input data here that is normally read through the namelist input file
        !
        ! As a result, we don't call chidg%init('io')
        !
        !------------------------------------------------------------------------------
        basis            = 'legendre'
        gq_rule          = 1
        backend          = trim(this%backend)
        time_integrator  = 'steady'
        nonlinear_solver = 'newton'
        linear_solver    = 'fgmres'
        preconditioner   = 'RASILU0'
        IO_DESTINATION   = 'file'

        ! Set linear solver options to pass during initialization
        call loptions%set("tol",1.e-14_rk)
        call loptions%set("rtol",1.e-14_rk)

        ! Set nonlinear solver options
        call noptions%set("tol",5.e-10_rk)
        call noptions%set("rtol",1.e-14_rk)
        call noptions%set("cfl0",1.0_rk)
        call noptions%set("nsteps",100)
        call noptions%set("ptc",.false.)
        !------------------------------------------------------------------------------




        !-------------------------------------------------------------------------------
        !               Initialize and register the diffusion coefficient model
        !-------------------------------------------------------------------------------
        call diffusion_coefficient_model%init()
        call model_factory%register(diffusion_coefficient_model)


        !-------------------------------------------------------------------------------
        !
        !                 Initialize and register the source operator
        !
        !   This has to be done before the equation set builder because it needs to be
        !   able to find this operator.
        !
        !-------------------------------------------------------------------------------
        call source_test_linear_diffusion%init()
        call operator_factory%register(source_test_linear_diffusion)


        !-------------------------------------------------------------------------------
        !
        !                 Initialize and register equation set builder
        !
        !-------------------------------------------------------------------------------
        call builder_test_linear_diffusion%init()
        call equation_set_factory%register(builder_test_linear_diffusion%build('default'))



        ! Create mesh
        if (IRANK == GLOBAL_MASTER) then
            bc_state_groups(1)%name = "XY Boundaries"
            bc_state_groups(2)%name = "Z Boundaries"


            call create_bc("Scalar Value", bc_state)
            call bc_state%set_fcn_option("Value","val",ZERO)
            call bc_state_groups(1)%add_bc_state(bc_state)


            call create_bc("Scalar Extrapolate", bc_state)
            call bc_state_groups(2)%add_bc_state(bc_state)


            group_names(1,:) = [ string_t("XY Boundaries"), &
                                 string_t("XY Boundaries"), &
                                 string_t("XY Boundaries"), &
                                 string_t("XY Boundaries"), &
                                 string_t("Z Boundaries"), &
                                 string_t("Z Boundaries") ]


            call create_mesh_file("D1 NxNxN",this%gridfile,equation_sets   = [string_t("Test 2D Linear Diffusion")], &
                                                           group_names     = group_names,                            &
                                                           bc_state_groups = bc_state_groups,                        &
                                                           nelem_xi        = this%nelem_xi,                          &
                                                           nelem_eta       = this%nelem_eta,                         &
                                                           nelem_zeta      = 1)
        end if


        ! Set ChiDG components
        call chidg%set('Solution Order', integer_input=this%order)
        call chidg%set("Time Integrator",  algorithm=time_integrator)
        call chidg%set("Nonlinear Solver", algorithm=nonlinear_solver, options=noptions)
        call chidg%set("Linear Solver",    algorithm=linear_solver,    options=loptions)
        call chidg%set("Preconditioner",   algorithm=preconditioner)


        ! Read grid
        call chidg%read_mesh(this%gridfile)


        ! Initialize solution
        call create_function(fcn,'constant')
        call fcn%set_option('val',0.1_rk)
        call chidg%data%sdata%q_in%project(chidg%data%mesh,fcn,1)


    end subroutine SetUp
    !*****************************************************************************************



    !>
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(linear_diffusion_2D),  intent(inout)   :: this

        ! Close ChiDG
        call chidg%shut_down('core')
        call chidg%shut_down('mpi')

        if (IRANK == GLOBAL_MASTER) then
            call delete_file(this%gridfile)
        end if

    end subroutine tearDown
    !*****************************************************************************************





    !>  Run the simulation.
    !!
    !!      - compute the entropy error, test against the reference values.
    !!      - store the nonlinear convergence to the module variable so it can 
    !!        be used by a test for nonlinear convergence.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test(npes=[1,2,3])
    subroutine run_calculations(this)
        class(linear_diffusion_2D),  intent(inout)   :: this 

        real(rk)    :: computed_error
        integer(ik) :: npes_index, grid_index, order_index, backend_index

        npes_index    = get_npes_index(NRANK)
        grid_index    = get_grid_index(this%nelem_xi)
        order_index   = get_order_index(this%order)
        backend_index = get_backend_index(this%backend)


        ! Run ChiDG simulation
        call chidg%run(write_initial=.false., write_final=.false.)


        ! Store the number of nonlinear iterations that the solution converged in. 
        ! Problem is linear so it should converge in 1 Newton Step. Really, just the 
        ! solution of 1 linear system of equations.
        nsteps_convergence(npes_index,grid_index,order_index,backend_index) = chidg%nonlinear_solver%newton_iterations           !conforming grids


        ! Compute error
        computed_error = compute_2D_linear_diffusion_error(chidg%data,ChiDG_COMM)

        ! Store the computed error for the current case
        error(npes_index,grid_index,order_index,backend_index) = computed_error   ! conforming grids

    end subroutine run_calculations
    !****************************************************************************************





    !>  Access the stored number of steps convergence data(module global variable) and confirm
    !!  that all simulations converged in 1 step.
    !!
    !!  This assumes that the 'run_calculations' routine has already been executed for all cases
    !!  and numbers of processors to that the 'nsteps_convergence' variable has been populated.
    !!  So, we are relying on pFUnit to do things in order here. Works now, but I don't think
    !!  there is a guaruntee that this can't change.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-----------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_conv_conform(this)
        class(linear_diffusion_2D),  intent(inout)   :: this 

        integer(ik) :: inpes, igrid, iorder, ibackend, nsteps

        do inpes = 1,3
            do igrid = 1,2
                do iorder = 1,3
                    do ibackend = 1,2

                        ! Test that the current convergence for the processor count matches the serial convergence
                        nsteps = nsteps_convergence(inpes,igrid,iorder,ibackend)%size()
                        @assertEqual(1, nsteps)

                    end do
                end do
            end do
        end do


    end subroutine test_conv_conform
    !******************************************************************************************






    !>  Test the rate of error reduction for the conforming grids.
    !!
    !!  Error Rate = log10(error_previous)-log10(error_current) / log10(mesh_previous)-log10(mesh_current)
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !----------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_err_conform(this)
        class(linear_diffusion_2D),  intent(inout)   :: this

        integer(ik) :: inpes, igrid, iorder, ibackend
        real(rk)    :: error_previous, error_current, mesh_parameter_previous, mesh_parameter_current, convergence_rate, tol

        tol = 0.1_rk

        do inpes = 1,3
            do igrid = 2,2  ! Start at the second grid because we need the previous grid in order to compute a rate 
                do iorder = 1,3
                    do ibackend = 1,2

                        error_previous = error(inpes,igrid-1,iorder,ibackend)
                        error_current  = error(inpes,igrid  ,iorder,ibackend)

                        mesh_parameter_previous = mesh_parameter(igrid-1,iorder)
                        mesh_parameter_current  = mesh_parameter(igrid  ,iorder)

                        ! Compute convergence rate of spatial operators. log10(error)/log10(mesh spacing)
                        convergence_rate = (log10(error_previous)-log10(error_current))/(log10(mesh_parameter_previous)-log10(mesh_parameter_current))
                    
                        @assertGreaterThan(convergence_rate, real(iorder+1,rk)-tol)

                    end do
                end do
            end do
        end do

    end subroutine test_err_conform
    !*****************************************************************************************





    !>  Function to compute the error in the 2D scalar diffusion equation.
    !!
    !!  The error is computed as the L2-Norm of the difference in the analytical and
    !!  numerical solutions integrated over the domain.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !------------------------------------------------------------------------------------
    function compute_2D_linear_diffusion_error(data,ChiDG_COMM) result(error)
        type(chidg_data_t), intent(inout)   :: data
        type(mpi_comm),     intent(in)      :: ChiDG_COMM

        real(rk), allocatable, dimension(:) :: &
            u_dg, u_analytical, x_gq, y_gq, gq_error_squared

        integer(ik) :: iu
        integer(ik) :: ielem, idom, ierr, itime
        real(rk)    :: error_squared_sum, error_squared_sum_reduced, element_error_squared, &
                       error

        associate (mesh => data%mesh, sdata => data%sdata, eqnset => data%eqnset, &
                   prop => data%eqnset(1)%prop)

            ! Get equation indices
            iu = prop%get_primary_field_index("u")

            ! Zero error accumulator
            error_squared_sum = ZERO

            ! Loop over elements and accumulate error
            itime = 1
            do idom = 1,data%mesh%ndomains()
                do ielem = 1,data%mesh%domain(idom)%nelem

                    ! Compute the analytical solution at the quadrature nodes
                    x_gq = mesh%domain(idom)%elems(ielem)%interp_coords(:,1)
                    y_gq = mesh%domain(idom)%elems(ielem)%interp_coords(:,2)
                    u_analytical = dsin(PI*x_gq)*dsin(PI*y_gq)

                    ! Interpolate DG numerical solution
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,iu,itime,'value')

                    ! Compute error at GQ nodes
                    gq_error_squared = (u_analytical - u_dg)**TWO

                    ! Integrate error
                    element_error_squared = sum(gq_error_squared * mesh%domain(idom)%elems(ielem)%jinv * mesh%domain(idom)%elems(ielem)%basis_s%weights_element())

                    ! Accumulate error from each element
                    error_squared_sum = error_squared_sum + element_error_squared

                end do ! ielem
            end do ! idom

        end associate

        ! Reduce the total error across processors
        call MPI_AllReduce(error_squared_sum,error_squared_sum_reduced,1,MPI_REAL8,MPI_SUM,ChiDG_COMM,ierr)

        ! Sqrt of the reduced error
        error = sqrt(error_squared_sum_reduced)

    end function compute_2D_linear_diffusion_error
    !*****************************************************************************************





    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !-----------------------------------------------------------------------------
    function mesh_parameter(igrid,iorder) result(param)
        integer(ik),    intent(in)  :: igrid
        integer(ik),    intent(in)  :: iorder

        integer(ik) :: nelem, nterms_1d
        real(rk)    :: param, dof

        select case (igrid)
            case(1)
                nelem = 256
            case(2)
                nelem = 1024
            case default
                call chidg_signal(FATAL,"integration_2D_linear_diffusion_mod%mesh_parameter: invalid igrid")
        end select


        select case (iorder)
            case(1) ! iorder = 1  =>  order = 2
                nterms_1d = (iorder+1)
            case(2)
                nterms_1d = (iorder+1)
            case(3)
                nterms_1d = (iorder+1)
            case(4)
                nterms_1d = (iorder+1)
            case default
                call chidg_signal(FATAL,"integration_2D_linear_diffusion_mod%mesh_parameter: invalid iorder")
        end select

        dof = real(nelem,rk) * real(nterms_1d,rk) * real(nterms_1d,rk) * real(nterms_1d,rk)

        param = ONE/sqrt(dof)

    end function mesh_parameter
    !******************************************************************************





    ! Utility for returning the index associated with a certain number of procs
    !------------------------------------------------------------------------------
    function get_npes_index(numproc) result(inpes)
        integer(ik), intent(in) :: numproc

        integer(ik) :: inpes

        select case (numproc)
            case(1)
                inpes = 1
            case(2)
                inpes = 2
            case(3)
                inpes = 3
        end select

    end function get_npes_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain grid file
    !------------------------------------------------------------------------------
    function get_grid_index(nelem_1d) result(igrid)
        integer(ik),    intent(in)  :: nelem_1d

        integer(ik) :: igrid

        select case (nelem_1d)
            case(16)
                igrid = 1
            case(32)
                igrid = 2
        end select

    end function get_grid_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain order of accuracy
    !------------------------------------------------------------------------------
    function get_order_index(order) result(iorder)
        integer(ik), intent(in) :: order

        integer(ik) :: iorder

        select case (order)
            case(2)
                iorder = 1
            case(3)
                iorder = 2
            case(4)
                iorder = 3
            case(5)
                iorder = 4
        end select

    end function get_order_index
    !******************************************************************************




    ! Utility for returning the index associated with a certain number of procs
    !------------------------------------------------------------------------------
    function get_backend_index(backend) result(ibackend)
        character(*),   intent(in)  :: backend

        integer(ik) :: ibackend

        select case (trim(backend))
            case('native')
                ibackend = 1
            case('petsc')
                ibackend = 2
            case default
                call chidg_signal_one(FATAL,'Invalid backend.', trim(backend))
        end select

    end function get_backend_index
    !******************************************************************************





end module integration_2D_linear_diffusion_mod
